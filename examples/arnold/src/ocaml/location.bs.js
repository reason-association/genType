// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as $$Buffer from "bs-platform/lib/es6/buffer.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Clflags from "./clflags.bs.js";
import * as Parsing from "./parsing.bs.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_sys from "bs-platform/lib/es6/caml_sys.js";
import * as Filename from "bs-platform/lib/es6/filename.js";
import * as Printexc from "bs-platform/lib/es6/printexc.js";
import * as Warnings from "./warnings.bs.js";
import * as Caml_bytes from "bs-platform/lib/es6/caml_bytes.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.js";
import * as Caml_external_polyfill from "bs-platform/lib/es6/caml_external_polyfill.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var absname = {
  contents: false
};

function in_file(name) {
  var loc = {
    pos_fname: name,
    pos_lnum: 1,
    pos_bol: 0,
    pos_cnum: -1
  };
  return {
          loc_start: loc,
          loc_end: loc,
          loc_ghost: true
        };
}

var none = in_file("_none_");

function curr(lexbuf) {
  return {
          loc_start: lexbuf.lex_start_p,
          loc_end: lexbuf.lex_curr_p,
          loc_ghost: false
        };
}

function init(lexbuf, fname) {
  lexbuf.lex_curr_p = {
    pos_fname: fname,
    pos_lnum: 1,
    pos_bol: 0,
    pos_cnum: 0
  };
  return /* () */0;
}

function symbol_rloc(param) {
  return {
          loc_start: Parsing.symbol_start_pos(/* () */0),
          loc_end: Parsing.symbol_end_pos(/* () */0),
          loc_ghost: false
        };
}

function symbol_gloc(param) {
  return {
          loc_start: Parsing.symbol_start_pos(/* () */0),
          loc_end: Parsing.symbol_end_pos(/* () */0),
          loc_ghost: true
        };
}

function rhs_loc(n) {
  return {
          loc_start: Parsing.rhs_start_pos(n),
          loc_end: Parsing.rhs_end_pos(n),
          loc_ghost: false
        };
}

var input_name = {
  contents: "_none_"
};

var input_lexbuf = {
  contents: undefined
};

function set_input_name(name) {
  if (name !== "") {
    input_name.contents = name;
    return /* () */0;
  } else {
    return 0;
  }
}

var status = {
  contents: /* Uninitialised */0
};

var num_loc_lines = {
  contents: 0
};

function print_updating_num_loc_lines(ppf, f, arg) {
  var out_functions = Format.pp_get_formatter_out_functions(ppf, /* () */0);
  var out_string = function (str, start, len) {
    var count = function (_i, _c) {
      while(true) {
        var c = _c;
        var i = _i;
        if (i === (start + len | 0)) {
          return c;
        } else if (Caml_string.get(str, i) === /* "\n" */10) {
          _c = c + 1 | 0;
          _i = i + 1 | 0;
          continue ;
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      };
    };
    num_loc_lines.contents = num_loc_lines.contents + count(start, 0) | 0;
    return Curry._3(out_functions.out_string, str, start, len);
  };
  Format.pp_set_formatter_out_functions(ppf, {
        out_string: out_string,
        out_flush: out_functions.out_flush,
        out_newline: out_functions.out_newline,
        out_spaces: out_functions.out_spaces,
        out_indent: out_functions.out_indent
      });
  Curry._2(f, ppf, arg);
  Format.pp_print_flush(ppf, /* () */0);
  return Format.pp_set_formatter_out_functions(ppf, out_functions);
}

function highlight_terminfo(ppf, num_lines, lb, locs) {
  Format.pp_print_flush(ppf, /* () */0);
  var pos0 = -lb.lex_abs_pos | 0;
  if (pos0 < 0) {
    throw Pervasives.Exit;
  }
  var lines = num_loc_lines.contents;
  for(var i = pos0 ,i_finish = lb.lex_buffer_len - 1 | 0; i <= i_finish; ++i){
    if (Caml_bytes.get(lb.lex_buffer, i) === /* "\n" */10) {
      lines = lines + 1 | 0;
    }
    
  }
  if (lines >= (num_lines - 2 | 0)) {
    throw Pervasives.Exit;
  }
  Pervasives.flush(Pervasives.stdout);
  Caml_external_polyfill.resolve("caml_terminfo_backup")(lines);
  var bol = false;
  Pervasives.print_string("# ");
  for(var pos = 0 ,pos_finish = (lb.lex_buffer_len - pos0 | 0) - 1 | 0; pos <= pos_finish; ++pos){
    if (bol) {
      Pervasives.print_string("  ");
      bol = false;
    }
    if (List.exists((function(pos){
          return function (loc) {
            return pos === loc.loc_start.pos_cnum;
          }
          }(pos)), locs)) {
      Caml_external_polyfill.resolve("caml_terminfo_standout")(true);
    }
    if (List.exists((function(pos){
          return function (loc) {
            return pos === loc.loc_end.pos_cnum;
          }
          }(pos)), locs)) {
      Caml_external_polyfill.resolve("caml_terminfo_standout")(false);
    }
    var c = Caml_bytes.get(lb.lex_buffer, pos + pos0 | 0);
    Pervasives.print_char(c);
    bol = c === /* "\n" */10;
  }
  Caml_external_polyfill.resolve("caml_terminfo_standout")(false);
  Caml_external_polyfill.resolve("caml_terminfo_resume")(num_loc_lines.contents);
  return Pervasives.flush(Pervasives.stdout);
}

function highlight_dumb(ppf, lb, loc) {
  var pos0 = -lb.lex_abs_pos | 0;
  if (pos0 < 0) {
    throw Pervasives.Exit;
  }
  var end_pos = (lb.lex_buffer_len - pos0 | 0) - 1 | 0;
  var line_start = 0;
  var line_end = 0;
  for(var pos = 0; pos <= end_pos; ++pos){
    if (Caml_bytes.get(lb.lex_buffer, pos + pos0 | 0) === /* "\n" */10) {
      if (loc.loc_start.pos_cnum > pos) {
        line_start = line_start + 1 | 0;
      }
      if (loc.loc_end.pos_cnum > pos) {
        line_end = line_end + 1 | 0;
      }
      
    }
    
  }
  Curry._2(Format.fprintf(ppf, /* Format */[
            /* Formatting_gen */Block.__(18, [
                /* Open_box */Block.__(1, [/* Format */[
                      /* String_literal */Block.__(11, [
                          "<v>",
                          /* End_of_format */0
                        ]),
                      "<v>"
                    ]]),
                /* String_literal */Block.__(11, [
                    "Characters ",
                    /* Int */Block.__(4, [
                        /* Int_i */3,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* "-" */45,
                            /* Int */Block.__(4, [
                                /* Int_i */3,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* ":" */58,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@,",
                                            0,
                                            0
                                          ]),
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]),
            "@[<v>Characters %i-%i:@,"
          ]), loc.loc_start.pos_cnum, loc.loc_end.pos_cnum);
  Format.pp_print_string(ppf, "  ");
  var line = 0;
  var pos_at_bol = 0;
  for(var pos$1 = 0; pos$1 <= end_pos; ++pos$1){
    var c = Caml_bytes.get(lb.lex_buffer, pos$1 + pos0 | 0);
    if (c !== 10) {
      if (c !== 13) {
        if (line === line_start && line === line_end) {
          Format.pp_print_char(ppf, c);
        } else if (line === line_start) {
          if (pos$1 < loc.loc_start.pos_cnum) {
            Format.pp_print_char(ppf, /* "." */46);
          } else {
            Format.pp_print_char(ppf, c);
          }
        } else if (line === line_end) {
          if (pos$1 < loc.loc_end.pos_cnum) {
            Format.pp_print_char(ppf, c);
          } else {
            Format.pp_print_char(ppf, /* "." */46);
          }
        } else if (line > line_start && line < line_end) {
          Format.pp_print_char(ppf, c);
        }
        
      }
      
    } else {
      if (line === line_start && line === line_end) {
        Format.fprintf(ppf, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@,",
                      0,
                      0
                    ]),
                  /* String_literal */Block.__(11, [
                      "  ",
                      /* End_of_format */0
                    ])
                ]),
              "@,  "
            ]);
        for(var _i = pos_at_bol ,_i_finish = loc.loc_start.pos_cnum - 1 | 0; _i <= _i_finish; ++_i){
          Format.pp_print_char(ppf, /* " " */32);
        }
        for(var _i$1 = loc.loc_start.pos_cnum ,_i_finish$1 = loc.loc_end.pos_cnum - 1 | 0; _i$1 <= _i_finish$1; ++_i$1){
          Format.pp_print_char(ppf, /* "^" */94);
        }
      }
      if (line >= line_start && line <= line_end) {
        Format.fprintf(ppf, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@,",
                      0,
                      0
                    ]),
                  /* End_of_format */0
                ]),
              "@,"
            ]);
        if (pos$1 < loc.loc_end.pos_cnum) {
          Format.pp_print_string(ppf, "  ");
        }
        
      }
      line = line + 1 | 0;
      pos_at_bol = pos$1 + 1 | 0;
    }
  }
  return Format.fprintf(ppf, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Close_box */0,
                  /* End_of_format */0
                ]),
              "@]"
            ]);
}

function highlight_locations(ppf, locs) {
  while(true) {
    var match = status.contents;
    if (typeof match === "number") {
      if (match !== 0) {
        var match$1 = input_lexbuf.contents;
        if (match$1 !== undefined) {
          var norepeat;
          try {
            norepeat = Caml_sys.caml_sys_getenv("TERM") === "norepeat";
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              norepeat = false;
            } else {
              throw exn;
            }
          }
          if (norepeat) {
            return false;
          } else {
            var loc1 = List.hd(locs);
            try {
              highlight_dumb(ppf, match$1, loc1);
              return true;
            }
            catch (exn$1){
              if (exn$1 === Pervasives.Exit) {
                return false;
              } else {
                throw exn$1;
              }
            }
          }
        } else {
          return false;
        }
      } else {
        status.contents = Caml_external_polyfill.resolve("caml_terminfo_setup")(Pervasives.stdout);
        continue ;
      }
    } else {
      var match$2 = input_lexbuf.contents;
      if (match$2 !== undefined) {
        try {
          highlight_terminfo(ppf, match[0], match$2, locs);
          return true;
        }
        catch (exn$2){
          if (exn$2 === Pervasives.Exit) {
            return false;
          } else {
            throw exn$2;
          }
        }
      } else {
        return false;
      }
    }
  };
}

function absolute_path(s) {
  var s$1 = Curry._1(Filename.is_relative, s) ? Filename.concat(Caml_sys.caml_sys_getcwd(/* () */0), s) : s;
  var aux = function (_s) {
    while(true) {
      var s = _s;
      var base = Curry._1(Filename.basename, s);
      var dir = Curry._1(Filename.dirname, s);
      if (dir === s) {
        return dir;
      } else if (base === Filename.current_dir_name) {
        _s = dir;
        continue ;
      } else if (base === Filename.parent_dir_name) {
        return Curry._1(Filename.dirname, aux(dir));
      } else {
        return Filename.concat(aux(dir), base);
      }
    };
  };
  return aux(s$1);
}

function show_filename(file) {
  if (absname.contents) {
    return absolute_path(file);
  } else {
    return file;
  }
}

function print_filename(ppf, file) {
  return Curry._1(Format.fprintf(ppf, /* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* End_of_format */0
                    ]),
                  "%s"
                ]), show_filename(file));
}

function reset(param) {
  num_loc_lines.contents = 0;
  return /* () */0;
}

function get_pos_info(pos) {
  return /* tuple */[
          pos.pos_fname,
          pos.pos_lnum,
          pos.pos_cnum - pos.pos_bol | 0
        ];
}

function print_loc(ppf, loc) {
  Misc.Color.setup(Clflags.color.contents);
  var match = get_pos_info(loc.loc_start);
  var startchar = match[2];
  var file = match[0];
  var startchar$1 = Clflags.bs_vscode ? startchar + 1 | 0 : startchar;
  var endchar = (loc.loc_end.pos_cnum - loc.loc_start.pos_cnum | 0) + startchar$1 | 0;
  if (file === "//toplevel//") {
    if (highlight_locations(ppf, /* :: */[
            loc,
            /* [] */0
          ])) {
      return /* () */0;
    } else {
      return Curry._2(Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Characters ",
                          /* Int */Block.__(4, [
                              /* Int_i */3,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* Char_literal */Block.__(12, [
                                  /* "-" */45,
                                  /* Int */Block.__(4, [
                                      /* Int_i */3,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "Characters %i-%i"
                    ]), loc.loc_start.pos_cnum, loc.loc_end.pos_cnum);
    }
  } else {
    Curry._5(Format.fprintf(ppf, /* Format */[
              /* String */Block.__(2, [
                  /* No_padding */0,
                  /* Formatting_gen */Block.__(18, [
                      /* Open_tag */Block.__(0, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<loc>",
                                /* End_of_format */0
                              ]),
                            "<loc>"
                          ]]),
                      /* Alpha */Block.__(15, [/* String */Block.__(2, [
                              /* No_padding */0,
                              /* Int */Block.__(4, [
                                  /* Int_i */3,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ])])
                    ])
                ]),
              "%s@{<loc>%a%s%i"
            ]), "File \"", print_filename, file, "\", line ", match[1]);
    if (startchar$1 >= 0) {
      Curry._4(Format.fprintf(ppf, /* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Int */Block.__(4, [
                        /* Int_i */3,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Int */Block.__(4, [
                                /* Int_i */3,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ]),
                "%s%i%s%i"
              ]), ", characters ", startchar$1, "-", endchar);
    }
    return Format.fprintf(ppf, /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Close_tag */1,
                    /* End_of_format */0
                  ]),
                "@}"
              ]);
  }
}

function default_printer(ppf, loc) {
  Misc.Color.setup(Clflags.color.contents);
  if (loc.loc_start.pos_fname === "//toplevel//" && highlight_locations(ppf, /* :: */[
          loc,
          /* [] */0
        ])) {
    return /* () */0;
  } else {
    return Curry._3(Format.fprintf(ppf, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_tag */Block.__(0, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<loc>",
                                  /* End_of_format */0
                                ]),
                              "<loc>"
                            ]]),
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Close_tag */1,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@,",
                                            0,
                                            0
                                          ]),
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])])
                      ]),
                    "@{<loc>%a@}%s@,"
                  ]), print_loc, loc, ":");
  }
}

var printer = {
  contents: default_printer
};

function print(ppf, loc) {
  return Curry._2(printer.contents, ppf, loc);
}

var error_prefix = "Error";

var warning_prefix = "Warning";

function print_error_prefix(ppf) {
  Misc.Color.setup(Clflags.color.contents);
  return Curry._1(Format.fprintf(ppf, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_tag */Block.__(0, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<error>",
                                /* End_of_format */0
                              ]),
                            "<error>"
                          ]]),
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* Formatting_lit */Block.__(17, [
                              /* Close_tag */1,
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "@{<error>%s@}"
                ]), error_prefix);
}

function print_compact(ppf, loc) {
  if (loc.loc_start.pos_fname === "//toplevel//" && highlight_locations(ppf, /* :: */[
          loc,
          /* [] */0
        ])) {
    return /* () */0;
  } else {
    var match = get_pos_info(loc.loc_start);
    var startchar = match[2];
    var endchar = (loc.loc_end.pos_cnum - loc.loc_start.pos_cnum | 0) + startchar | 0;
    Curry._3(Format.fprintf(ppf, /* Format */[
              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                      /* ":" */58,
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* End_of_format */0
                        ])
                    ])]),
              "%a:%i"
            ]), print_filename, match[0], match[1]);
    if (startchar >= 0) {
      return Curry._2(Format.fprintf(ppf, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "," */44,
                          /* Int */Block.__(4, [
                              /* Int_i */3,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  "--",
                                  /* Int */Block.__(4, [
                                      /* Int_i */3,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      ",%i--%i"
                    ]), startchar, endchar);
    } else {
      return 0;
    }
  }
}

function print_error(ppf, loc) {
  return Curry._3(Format.fprintf(ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Theta */Block.__(16, [/* Char_literal */Block.__(12, [
                              /* ":" */58,
                              /* End_of_format */0
                            ])])]),
                  "%a%t:"
                ]), print, loc, print_error_prefix);
}

function print_error_cur_file(ppf, param) {
  return print_error(ppf, in_file(input_name.contents));
}

function default_warning_printer(loc, ppf, w) {
  var match = Warnings.report(w);
  if (typeof match === "number") {
    return /* () */0;
  } else {
    var match$1 = match[1];
    var message = match$1.message;
    var number = match$1.number;
    Misc.Color.setup(Clflags.color.contents);
    Format.fprintf(ppf, /* Format */[
          /* Formatting_gen */Block.__(18, [
              /* Open_box */Block.__(1, [/* Format */[
                    /* String_literal */Block.__(11, [
                        "<v>",
                        /* End_of_format */0
                      ]),
                    "<v>"
                  ]]),
              /* End_of_format */0
            ]),
          "@[<v>"
        ]);
    Curry._2(printer.contents, ppf, loc);
    if (match$1.is_error) {
      Curry._4(Format.fprintf(ppf, /* Format */[
                /* Theta */Block.__(16, [/* String_literal */Block.__(11, [
                        " (",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        "): ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@,",
                                                    0,
                                                    0
                                                  ]),
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])]),
                "%t (%s %d): %s@,"
              ]), print_error_prefix, $$String.uncapitalize_ascii(warning_prefix), number, message);
    } else {
      Curry._3(Format.fprintf(ppf, /* Format */[
                /* Formatting_gen */Block.__(18, [
                    /* Open_tag */Block.__(0, [/* Format */[
                          /* String_literal */Block.__(11, [
                              "<warning>",
                              /* End_of_format */0
                            ]),
                          "<warning>"
                        ]]),
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Formatting_lit */Block.__(17, [
                            /* Close_tag */1,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ": ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@,",
                                                    0,
                                                    0
                                                  ]),
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "@{<warning>%s@} %d: %s@,"
              ]), warning_prefix, number, message);
    }
    List.iter((function (param) {
            var loc = param[0];
            if (Caml_obj.caml_notequal(loc, none)) {
              return Curry._3(Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "  ",
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          "  ",
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@,",
                                                      0,
                                                      0
                                                    ]),
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])])
                                ]),
                              "  %a  %s@,"
                            ]), print, loc, param[1]);
            } else {
              return 0;
            }
          }), match$1.sub_locs);
    return Format.fprintf(ppf, /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Close_box */0,
                    /* End_of_format */0
                  ]),
                "@]"
              ]);
  }
}

var warning_printer = {
  contents: default_warning_printer
};

function print_warning(loc, ppf, w) {
  return print_updating_num_loc_lines(ppf, Curry._1(warning_printer.contents, loc), w);
}

var formatter_for_warnings = {
  contents: Format.err_formatter
};

function prerr_warning(loc, w) {
  if (Clflags.bs_quiet.contents) {
    return 0;
  } else {
    return print_warning(loc, formatter_for_warnings.contents, w);
  }
}

function echo_eof(param) {
  Format.print_newline(/* () */0);
  num_loc_lines.contents = num_loc_lines.contents + 1 | 0;
  return /* () */0;
}

function mkloc(txt, loc) {
  return {
          txt: txt,
          loc: loc
        };
}

function mknoloc(txt) {
  return {
          txt: txt,
          loc: none
        };
}

function pp_ksprintf(before, k, fmt) {
  var buf = $$Buffer.create(64);
  var ppf = Format.formatter_of_buffer(buf);
  Misc.Color.set_color_tag_handling(ppf);
  if (before !== undefined) {
    Curry._1(before, ppf);
  }
  return Format.kfprintf((function (param) {
                Format.pp_print_flush(ppf, /* () */0);
                return Curry._1(k, $$Buffer.contents(buf));
              }), ppf, fmt);
}

function print_phanton_error_prefix(ppf) {
  return Format.pp_print_as(ppf, error_prefix.length + 2 | 0, "");
}

function errorf($staropt$star, $staropt$star$1, $staropt$star$2, fmt) {
  var loc = $staropt$star !== undefined ? $staropt$star : none;
  var sub = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var if_highlight = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return pp_ksprintf(print_phanton_error_prefix, (function (msg) {
                return {
                        loc: loc,
                        msg: msg,
                        sub: sub,
                        if_highlight: if_highlight
                      };
              }), fmt);
}

function error($staropt$star, $staropt$star$1, $staropt$star$2, msg) {
  var loc = $staropt$star !== undefined ? $staropt$star : none;
  var sub = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var if_highlight = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return {
          loc: loc,
          msg: msg,
          sub: sub,
          if_highlight: if_highlight
        };
}

var error_of_exn = {
  contents: /* [] */0
};

function register_error_of_exn(f) {
  error_of_exn.contents = /* :: */[
    f,
    error_of_exn.contents
  ];
  return /* () */0;
}

function error_of_exn$1(exn) {
  if (exn === Warnings.Errors) {
    return /* Already_displayed */301815898;
  } else {
    var _param = error_of_exn.contents;
    while(true) {
      var param = _param;
      if (param) {
        var match = Curry._1(param[0], exn);
        if (match !== undefined) {
          return /* `Ok */[
                  17724,
                  Caml_option.valFromOption(match)
                ];
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return ;
      }
    };
  }
}

function default_error_reporter(ppf, err) {
  var if_highlight = err.if_highlight;
  var loc = err.loc;
  var highlighted;
  if (if_highlight !== "" && loc.loc_start.pos_fname === "//toplevel//") {
    var collect_locs = function (locs, param) {
      return List.fold_left(collect_locs, /* :: */[
                  param.loc,
                  locs
                ], param.sub);
    };
    var locs = collect_locs(/* [] */0, err);
    highlighted = highlight_locations(ppf, locs);
  } else {
    highlighted = false;
  }
  if (highlighted) {
    return Format.pp_print_string(ppf, if_highlight);
  } else {
    Curry._3(Format.fprintf(ppf, /* Format */[
              /* Formatting_gen */Block.__(18, [
                  /* Open_box */Block.__(1, [/* Format */[
                        /* String_literal */Block.__(11, [
                            "<v>",
                            /* End_of_format */0
                          ]),
                        "<v>"
                      ]]),
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* " " */32,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])])
                ]),
              "@[<v>%a %s"
            ]), print_error, loc, err.msg);
    List.iter(Curry._1(Format.fprintf(ppf, /* Format */[
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@,",
                          0,
                          0
                        ]),
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<2>",
                                    /* End_of_format */0
                                  ]),
                                "<2>"
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Close_box */0,
                                  /* End_of_format */0
                                ])])
                        ])
                    ]),
                  "@,@[<2>%a@]"
                ]), default_error_reporter), err.sub);
    return Format.fprintf(ppf, /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Close_box */0,
                    /* End_of_format */0
                  ]),
                "@]"
              ]);
  }
}

var error_reporter = {
  contents: default_error_reporter
};

function report_error(ppf, err) {
  return print_updating_num_loc_lines(ppf, error_reporter.contents, err);
}

function error_of_printer(loc, print, x) {
  return Curry._2(errorf(loc, undefined, undefined, /* Format */[
                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                          /* FFlush */2,
                          /* End_of_format */0
                        ])]),
                  "%a@?"
                ]), print, x);
}

function error_of_printer_file(print, x) {
  return error_of_printer(in_file(input_name.contents), print, x);
}

register_error_of_exn((function (param) {
        if (param[0] === Caml_builtin_exceptions.sys_error) {
          return Curry._1(errorf(in_file(input_name.contents), undefined, undefined, /* Format */[
                          /* String_literal */Block.__(11, [
                              "I/O error: ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "I/O error: %s"
                        ]), param[1]);
        } else if (param[0] === Misc.HookExnWrapper) {
          var e = param[/* error */1];
          var match = error_of_exn$1(e);
          var sub;
          if (match !== undefined) {
            var match$1 = match;
            sub = typeof match$1 === "number" ? error(undefined, undefined, undefined, Printexc.to_string(e)) : match$1[1];
          } else {
            sub = error(undefined, undefined, undefined, Printexc.to_string(e));
          }
          return Curry._1(errorf(in_file(param[/* hook_info */3].sourcefile), /* :: */[
                          sub,
                          /* [] */0
                        ], undefined, /* Format */[
                          /* String_literal */Block.__(11, [
                              "In hook ",
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* ":" */58,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "In hook %S:"
                        ]), param[/* hook_name */2]);
        } else {
          return ;
        }
      }));

function report_exception(ppf, exn) {
  var _n = 5;
  var ppf$1 = ppf;
  var _exn = exn;
  while(true) {
    var exn$1 = _exn;
    var n = _n;
    try {
      var match = error_of_exn$1(exn$1);
      if (match !== undefined) {
        var match$1 = match;
        if (typeof match$1 === "number") {
          return /* () */0;
        } else {
          return Curry._2(Format.fprintf(ppf$1, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* End_of_format */0,
                                    ""
                                  ]]),
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Close_box */0,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Flush_newline */4,
                                          /* End_of_format */0
                                        ])
                                    ])])
                            ]),
                          "@[%a@]@."
                        ]), report_error, match$1[1]);
        }
      } else {
        throw exn$1;
      }
    }
    catch (raw_exn){
      var exn$2 = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (n > 0) {
        _exn = exn$2;
        _n = n - 1 | 0;
        continue ;
      } else {
        throw exn$2;
      }
    }
  };
}

var $$Error = Caml_exceptions.create("Location.Error");

register_error_of_exn((function (param) {
        if (param[0] === $$Error) {
          return param[1];
        }
        
      }));

function raise_errorf($staropt$star, $staropt$star$1, $staropt$star$2) {
  var loc = $staropt$star !== undefined ? $staropt$star : none;
  var sub = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var if_highlight = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  var partial_arg = print_phanton_error_prefix;
  return (function (param) {
      return pp_ksprintf(partial_arg, (function (msg) {
                    throw [
                          $$Error,
                          {
                            loc: loc,
                            msg: msg,
                            sub: sub,
                            if_highlight: if_highlight
                          }
                        ];
                  }), param);
    });
}

function deprecated($staropt$star, $staropt$star$1, loc, msg) {
  var def = $staropt$star !== undefined ? $staropt$star : none;
  var use = $staropt$star$1 !== undefined ? $staropt$star$1 : none;
  return prerr_warning(loc, /* Deprecated */Block.__(0, [
                msg,
                def,
                use
              ]));
}

var Already_displayed_error = Warnings.Errors;

export {
  none ,
  in_file ,
  init ,
  curr ,
  symbol_rloc ,
  symbol_gloc ,
  rhs_loc ,
  input_name ,
  set_input_name ,
  input_lexbuf ,
  get_pos_info ,
  print_loc ,
  print_error ,
  print_error_cur_file ,
  print_warning ,
  formatter_for_warnings ,
  prerr_warning ,
  echo_eof ,
  reset ,
  default_printer ,
  printer ,
  warning_printer ,
  default_warning_printer ,
  highlight_locations ,
  mknoloc ,
  mkloc ,
  print ,
  print_compact ,
  print_filename ,
  absolute_path ,
  show_filename ,
  absname ,
  Already_displayed_error ,
  $$Error ,
  error ,
  print_error_prefix ,
  pp_ksprintf ,
  errorf ,
  raise_errorf ,
  error_of_printer ,
  error_of_printer_file ,
  error_of_exn$1 as error_of_exn,
  register_error_of_exn ,
  report_error ,
  error_reporter ,
  default_error_reporter ,
  report_exception ,
  deprecated ,
  
}
/* none Not a pure module */
