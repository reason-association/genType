// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as $$Location from "./location.bs.js";
import * as Ast_helper from "./ast_helper.bs.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var prefix_symbols = /* :: */[
  /* "!" */33,
  /* :: */[
    /* "?" */63,
    /* :: */[
      /* "~" */126,
      /* [] */0
    ]
  ]
];

function fixity_of_string(s) {
  if (List.mem(s, /* :: */[
          "asr",
          /* :: */[
            "land",
            /* :: */[
              "lor",
              /* :: */[
                "lsl",
                /* :: */[
                  "lsr",
                  /* :: */[
                    "lxor",
                    /* :: */[
                      "mod",
                      /* :: */[
                        "or",
                        /* :: */[
                          ":=",
                          /* :: */[
                            "!=",
                            /* :: */[
                              "::",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]) || List.mem(Caml_string.get(s, 0), /* :: */[
          /* "=" */61,
          /* :: */[
            /* "<" */60,
            /* :: */[
              /* ">" */62,
              /* :: */[
                /* "@" */64,
                /* :: */[
                  /* "^" */94,
                  /* :: */[
                    /* "|" */124,
                    /* :: */[
                      /* "&" */38,
                      /* :: */[
                        /* "+" */43,
                        /* :: */[
                          /* "-" */45,
                          /* :: */[
                            /* "*" */42,
                            /* :: */[
                              /* "/" */47,
                              /* :: */[
                                /* "$" */36,
                                /* :: */[
                                  /* "%" */37,
                                  /* :: */[
                                    /* "#" */35,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ])) {
    return /* `Infix */[
            -784100624,
            s
          ];
  } else if (List.mem(Caml_string.get(s, 0), prefix_symbols)) {
    return /* `Prefix */[
            -481604174,
            s
          ];
  } else if (Caml_string.get(s, 0) === /* "." */46) {
    return /* `Mixfix */[
            237833689,
            s
          ];
  } else {
    return /* Normal */-453122489;
  }
}

function view_fixity_of_exp(param) {
  var match = param.pexp_desc;
  if (typeof match === "number" || match.tag) {
    return /* Normal */-453122489;
  } else {
    var match$1 = match[0].txt;
    switch (match$1.tag | 0) {
      case /* Lident */0 :
          if (param.pexp_attributes) {
            return /* Normal */-453122489;
          } else {
            return fixity_of_string(match$1[0]);
          }
      case /* Ldot */1 :
      case /* Lapply */2 :
          return /* Normal */-453122489;
      
    }
  }
}

function is_infix(param) {
  if (typeof param === "number") {
    return false;
  } else {
    return param[0] === -784100624;
  }
}

function is_mixfix(param) {
  if (typeof param === "number") {
    return false;
  } else {
    return param[0] === 237833689;
  }
}

function needs_parens(txt) {
  var fix = fixity_of_string(txt);
  if (is_infix(fix) || is_mixfix(fix)) {
    return true;
  } else {
    return List.mem(Caml_string.get(txt, 0), prefix_symbols);
  }
}

function needs_spaces(txt) {
  if (Caml_string.get(txt, 0) === /* "*" */42) {
    return true;
  } else {
    return Caml_string.get(txt, txt.length - 1 | 0) === /* "*" */42;
  }
}

function protect_ident(ppf, txt) {
  var format = needs_parens(txt) ? (
      needs_spaces(txt) ? /* Format */[
          /* Char_literal */Block.__(12, [
              /* "(" */40,
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@;",
                      1,
                      0
                    ]),
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@;",
                              1,
                              0
                            ]),
                          /* Char_literal */Block.__(12, [
                              /* ")" */41,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ])
            ]),
          "(@;%s@;)"
        ] : /* Format */[
          /* Char_literal */Block.__(12, [
              /* "(" */40,
              /* String */Block.__(2, [
                  /* No_padding */0,
                  /* Char_literal */Block.__(12, [
                      /* ")" */41,
                      /* End_of_format */0
                    ])
                ])
            ]),
          "(%s)"
        ]
    ) : /* Format */[
      /* String */Block.__(2, [
          /* No_padding */0,
          /* End_of_format */0
        ]),
      "%s"
    ];
  return Curry._1(Format.fprintf(ppf, format), txt);
}

function type_variance(param) {
  switch (param) {
    case /* Covariant */0 :
        return "+";
    case /* Contravariant */1 :
        return "-";
    case /* Invariant */2 :
        return "";
    
  }
}

function view_expr(x) {
  var match = x.pexp_desc;
  if (typeof match === "number" || match.tag !== /* Pexp_construct */9) {
    return /* normal */812216871;
  } else {
    var x$1 = match[0];
    var match$1 = x$1.txt;
    switch (match$1.tag | 0) {
      case /* Lident */0 :
          switch (match$1[0]) {
            case "()" :
                return /* tuple */405183496;
            case "::" :
                if (match[1] !== undefined) {
                  var loop = function (_exp, _acc) {
                    while(true) {
                      var acc = _acc;
                      var exp = _exp;
                      var match = exp.pexp_desc;
                      if (typeof match !== "number" && match.tag === /* Pexp_construct */9) {
                        var match$1 = match[0].txt;
                        switch (match$1.tag | 0) {
                          case /* Lident */0 :
                              switch (match$1[0]) {
                                case "::" :
                                    var match$2 = match[1];
                                    if (match$2 !== undefined) {
                                      var match$3 = match$2;
                                      var match$4 = match$3.pexp_desc;
                                      if (typeof match$4 !== "number" && match$4.tag === /* Pexp_tuple */8) {
                                        var match$5 = match$4[0];
                                        if (match$5) {
                                          var match$6 = match$5[1];
                                          if (match$6 && !match$6[1] && !match$3.pexp_attributes && !exp.pexp_attributes) {
                                            _acc = /* :: */[
                                              match$5[0],
                                              acc
                                            ];
                                            _exp = match$6[0];
                                            continue ;
                                          }
                                          
                                        }
                                        
                                      }
                                      
                                    }
                                    break;
                                case "[]" :
                                    if (!exp.pexp_attributes) {
                                      return /* tuple */[
                                              List.rev(acc),
                                              true
                                            ];
                                    }
                                    break;
                                default:
                                  
                              }
                              break;
                          case /* Ldot */1 :
                          case /* Lapply */2 :
                              break;
                          
                        }
                      }
                      return /* tuple */[
                              List.rev(/* :: */[
                                    exp,
                                    acc
                                  ]),
                              false
                            ];
                    };
                  };
                  var match$2 = loop(x, /* [] */0);
                  var ls = match$2[0];
                  if (match$2[1]) {
                    return /* `list */[
                            -944563106,
                            ls
                          ];
                  } else {
                    return /* `cons */[
                            -1044071951,
                            ls
                          ];
                  }
                }
                break;
            case "[]" :
                return /* nil */5493713;
            default:
              
          }
          break;
      case /* Ldot */1 :
      case /* Lapply */2 :
          break;
      
    }
    if (match[1] !== undefined) {
      return /* normal */812216871;
    } else {
      return /* `simple */[
              947848242,
              x$1.txt
            ];
    }
  }
}

function is_simple_construct(param) {
  if (typeof param === "number") {
    return param < 812216871;
  } else {
    return param[0] >= -944563106;
  }
}

var reset_ctxt = {
  pipe: false,
  semi: false,
  ifthenelse: false
};

function under_pipe(ctxt) {
  return {
          pipe: true,
          semi: ctxt.semi,
          ifthenelse: ctxt.ifthenelse
        };
}

function under_semi(ctxt) {
  return {
          pipe: ctxt.pipe,
          semi: true,
          ifthenelse: ctxt.ifthenelse
        };
}

function under_ifthenelse(ctxt) {
  return {
          pipe: ctxt.pipe,
          semi: ctxt.semi,
          ifthenelse: true
        };
}

function list(sep, first, last, fu, f, xs) {
  var first$1 = first !== undefined ? first : /* Format */[
      /* End_of_format */0,
      ""
    ];
  var last$1 = last !== undefined ? last : /* Format */[
      /* End_of_format */0,
      ""
    ];
  var sep$1 = sep !== undefined ? sep : /* Format */[
      /* Formatting_lit */Block.__(17, [
          /* Break */Block.__(0, [
              "@ ",
              1,
              0
            ]),
          /* End_of_format */0
        ]),
      "@ "
    ];
  var f$1 = f;
  var xs$1 = xs;
  if (xs$1) {
    if (xs$1[1]) {
      var loop = function (f, _param) {
        while(true) {
          var param = _param;
          if (param) {
            var xs = param[1];
            var x = param[0];
            if (xs) {
              Curry._2(fu, f, x);
              Format.fprintf(f, sep$1);
              _param = xs;
              continue ;
            } else {
              return Curry._2(fu, f, x);
            }
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "pprintast.ml",
                    166,
                    19
                  ]
                ];
          }
        };
      };
      Format.fprintf(f$1, first$1);
      loop(f$1, xs$1);
      return Format.fprintf(f$1, last$1);
    } else {
      return Curry._2(fu, f$1, xs$1[0]);
    }
  } else {
    return /* () */0;
  }
}

function option(first, last, fu, f, a) {
  var first$1 = first !== undefined ? first : /* Format */[
      /* End_of_format */0,
      ""
    ];
  var last$1 = last !== undefined ? last : /* Format */[
      /* End_of_format */0,
      ""
    ];
  if (a !== undefined) {
    Format.fprintf(f, first$1);
    Curry._2(fu, f, Caml_option.valFromOption(a));
    return Format.fprintf(f, last$1);
  } else {
    return /* () */0;
  }
}

function paren($staropt$star, $staropt$star$1, b, fu, f, x) {
  var first = $staropt$star !== undefined ? $staropt$star : /* Format */[
      /* End_of_format */0,
      ""
    ];
  var last = $staropt$star$1 !== undefined ? $staropt$star$1 : /* Format */[
      /* End_of_format */0,
      ""
    ];
  if (b) {
    Format.fprintf(f, /* Format */[
          /* Char_literal */Block.__(12, [
              /* "(" */40,
              /* End_of_format */0
            ]),
          "("
        ]);
    Format.fprintf(f, first);
    Curry._2(fu, f, x);
    Format.fprintf(f, last);
    return Format.fprintf(f, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* ")" */41,
                    /* End_of_format */0
                  ]),
                ")"
              ]);
  } else {
    return Curry._2(fu, f, x);
  }
}

function longident(f, param) {
  switch (param.tag | 0) {
    case /* Lident */0 :
        return protect_ident(f, param[0]);
    case /* Ldot */1 :
        var ppf = f;
        var print_longident = longident;
        var longprefix = param[0];
        var txt = param[1];
        var format = needs_parens(txt) ? (
            needs_spaces(txt) ? /* Format */[
                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                        ".(",
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ])]),
                "%a.(@;%s@;)"
              ] : /* Format */[
                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                        ".(",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* End_of_format */0
                              ])
                          ])
                      ])]),
                "%a.(%s)"
              ]
          ) : /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "." */46,
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* End_of_format */0
                      ])
                  ])]),
            "%a.%s"
          ];
        return Curry._3(Format.fprintf(ppf, format), print_longident, longprefix, txt);
    case /* Lapply */2 :
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])]),
                        "%a(%a)"
                      ]), longident, param[0], longident, param[1]);
    
  }
}

function longident_loc(f, x) {
  return Curry._2(Format.fprintf(f, /* Format */[
                  /* Alpha */Block.__(15, [/* End_of_format */0]),
                  "%a"
                ]), longident, x.txt);
}

function constant(f, param) {
  switch (param.tag | 0) {
    case /* Pconst_integer */0 :
        var match = param[1];
        var i = param[0];
        if (match !== undefined) {
          return paren(undefined, undefined, Caml_string.get(i, 0) === /* "-" */45, (function (f, param) {
                        return Curry._2(Format.fprintf(f, /* Format */[
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char */Block.__(0, [/* End_of_format */0])
                                          ]),
                                        "%s%c"
                                      ]), param[0], param[1]);
                      }), f, /* tuple */[
                      i,
                      match
                    ]);
        } else {
          return paren(undefined, undefined, Caml_string.get(i, 0) === /* "-" */45, (function (f) {
                        return Format.fprintf(f, /* Format */[
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ]),
                                    "%s"
                                  ]);
                      }), f, i);
        }
    case /* Pconst_char */1 :
        return Curry._1(Format.fprintf(f, /* Format */[
                        /* Caml_char */Block.__(1, [/* End_of_format */0]),
                        "%C"
                      ]), param[0]);
    case /* Pconst_string */2 :
        var match$1 = param[1];
        var i$1 = param[0];
        if (match$1 !== undefined) {
          var delim = match$1;
          return Curry._3(Format.fprintf(f, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "{" */123,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "|" */124,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* "|" */124,
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Char_literal */Block.__(12, [
                                                      /* "}" */125,
                                                      /* End_of_format */0
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "{%s|%s|%s}"
                        ]), delim, i$1, delim);
        } else {
          return Curry._1(Format.fprintf(f, /* Format */[
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ]),
                          "%S"
                        ]), i$1);
        }
    case /* Pconst_float */3 :
        var match$2 = param[1];
        var i$2 = param[0];
        if (match$2 !== undefined) {
          return paren(undefined, undefined, Caml_string.get(i$2, 0) === /* "-" */45, (function (f, param) {
                        return Curry._2(Format.fprintf(f, /* Format */[
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char */Block.__(0, [/* End_of_format */0])
                                          ]),
                                        "%s%c"
                                      ]), param[0], param[1]);
                      }), f, /* tuple */[
                      i$2,
                      match$2
                    ]);
        } else {
          return paren(undefined, undefined, Caml_string.get(i$2, 0) === /* "-" */45, (function (f) {
                        return Format.fprintf(f, /* Format */[
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ]),
                                    "%s"
                                  ]);
                      }), f, i$2);
        }
    
  }
}

function mutable_flag(f, param) {
  if (param) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "mutable",
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                "mutable@;"
              ]);
  } else {
    return /* () */0;
  }
}

function virtual_flag(f, param) {
  if (param) {
    return /* () */0;
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "virtual",
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                "virtual@;"
              ]);
  }
}

function rec_flag(f, rf) {
  if (rf) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "rec ",
                    /* End_of_format */0
                  ]),
                "rec "
              ]);
  } else {
    return /* () */0;
  }
}

function nonrec_flag(f, rf) {
  if (rf) {
    return /* () */0;
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "nonrec ",
                    /* End_of_format */0
                  ]),
                "nonrec "
              ]);
  }
}

function direction_flag(f, param) {
  if (param) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "downto",
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@ ",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                "downto@ "
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "to",
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@ ",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                "to@ "
              ]);
  }
}

function private_flag(f, param) {
  if (param) {
    return /* () */0;
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "private",
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@ ",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                "private@ "
              ]);
  }
}

function constant_string(f, s) {
  return Curry._1(Format.fprintf(f, /* Format */[
                  /* Caml_string */Block.__(3, [
                      /* No_padding */0,
                      /* End_of_format */0
                    ]),
                  "%S"
                ]), s);
}

function tyvar_loc(f, str) {
  return Curry._1(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "'" */39,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "'%s"
                ]), str.txt);
}

function string_quot(f, x) {
  return Curry._1(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "`" */96,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "`%s"
                ]), x);
}

function class_params_def(ctxt, f, l) {
  if (l) {
    var partial_arg = /* Format */[
      /* Char_literal */Block.__(12, [
          /* "," */44,
          /* End_of_format */0
        ]),
      ","
    ];
    return Curry._2(Format.fprintf(f, /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "[" */91,
                        /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                "] ",
                                /* End_of_format */0
                              ])])
                      ]),
                    "[%a] "
                  ]), (function (param, param$1) {
                  return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                return type_param(ctxt, param, param$1);
                              }), param, param$1);
                }), l);
  } else {
    return /* () */0;
  }
}

function expression(ctxt, f, x) {
  if (x.pexp_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "((",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@,",
                                        0,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])])
                      ]),
                    "((%a)@,%a)"
                  ]), (function (param, param$1) {
                  return expression(ctxt, param, param$1);
                }), {
                pexp_desc: x.pexp_desc,
                pexp_loc: x.pexp_loc,
                pexp_attributes: /* [] */0
              }, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.pexp_attributes);
  } else {
    var match = x.pexp_desc;
    var exit = 0;
    var exit$1 = 0;
    if (typeof match === "number") {
      return Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "." */46,
                      /* End_of_format */0
                    ]),
                  "."
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Pexp_apply */5 :
            var l = match[1];
            var e = match[0];
            if (sugar_expr(ctxt, f, x)) {
              return 0;
            } else {
              var match$1 = view_fixity_of_exp(e);
              if (typeof match$1 !== "number") {
                var variant = match$1[0];
                if (variant !== -784100624) {
                  if (variant === -481604174) {
                    var s = match$1[1];
                    var tmp = false;
                    if (List.mem(s, /* :: */[
                            "~+",
                            /* :: */[
                              "~-",
                              /* :: */[
                                "~+.",
                                /* :: */[
                                  "~-.",
                                  /* [] */0
                                ]
                              ]
                            ]
                          ])) {
                      var tmp$1;
                      if (l) {
                        var tmp$2 = l[0][1].pexp_desc;
                        tmp$1 = typeof tmp$2 === "number" || !(tmp$2.tag === /* Pexp_constant */1 && !l[1]) ? true : false;
                      } else {
                        tmp$1 = true;
                      }
                      tmp = tmp$1;
                    }
                    var s$1 = tmp ? $$String.sub(s, 1, s.length - 1 | 0) : s;
                    var exit$2 = 0;
                    if (l) {
                      var match$2 = l[0];
                      if (typeof match$2[0] === "number" && !l[1]) {
                        return Curry._3(Format.fprintf(f, /* Format */[
                                        /* Formatting_gen */Block.__(18, [
                                            /* Open_box */Block.__(1, [/* Format */[
                                                  /* String_literal */Block.__(11, [
                                                      "<2>",
                                                      /* End_of_format */0
                                                    ]),
                                                  "<2>"
                                                ]]),
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])
                                              ])
                                          ]),
                                        "@[<2>%s@;%a@]"
                                      ]), s$1, (function (param, param$1) {
                                      return simple_expr(ctxt, param, param$1);
                                    }), match$2[1]);
                      } else {
                        exit$2 = 5;
                      }
                    } else {
                      exit$2 = 5;
                    }
                    if (exit$2 === 5) {
                      return Curry._4(Format.fprintf(f, /* Format */[
                                      /* Formatting_gen */Block.__(18, [
                                          /* Open_box */Block.__(1, [/* Format */[
                                                /* String_literal */Block.__(11, [
                                                    "<2>",
                                                    /* End_of_format */0
                                                  ]),
                                                "<2>"
                                              ]]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* " " */32,
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])])
                                        ]),
                                      "@[<2>%a %a@]"
                                    ]), (function (param, param$1) {
                                    return simple_expr(ctxt, param, param$1);
                                  }), e, (function (param, param$1) {
                                    return list(undefined, undefined, undefined, (function (param, param$1) {
                                                  return label_x_expression_param(ctxt, param, param$1);
                                                }), param, param$1);
                                  }), l);
                    }
                    
                  }
                  
                } else {
                  var exit$3 = 0;
                  if (l) {
                    var arg1 = l[0];
                    if (typeof arg1[0] === "number") {
                      var match$3 = l[1];
                      if (match$3) {
                        var arg2 = match$3[0];
                        if (typeof arg2[0] === "number" && !match$3[1]) {
                          return Curry._5(Format.fprintf(f, /* Format */[
                                          /* Formatting_gen */Block.__(18, [
                                              /* Open_box */Block.__(1, [/* Format */[
                                                    /* String_literal */Block.__(11, [
                                                        "<2>",
                                                        /* End_of_format */0
                                                      ]),
                                                    "<2>"
                                                  ]]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* String */Block.__(2, [
                                                          /* No_padding */0,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@;",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])])
                                            ]),
                                          "@[<2>%a@;%s@;%a@]"
                                        ]), (function (param, param$1) {
                                        return label_x_expression_param(reset_ctxt, param, param$1);
                                      }), arg1, match$1[1], (function (param, param$1) {
                                        return label_x_expression_param(ctxt, param, param$1);
                                      }), arg2);
                        } else {
                          exit$3 = 5;
                        }
                      } else {
                        exit$3 = 5;
                      }
                    } else {
                      exit$3 = 5;
                    }
                  } else {
                    exit$3 = 5;
                  }
                  if (exit$3 === 5) {
                    return Curry._4(Format.fprintf(f, /* Format */[
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<2>",
                                                  /* End_of_format */0
                                                ]),
                                              "<2>"
                                            ]]),
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* " " */32,
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])])
                                              ])])
                                      ]),
                                    "@[<2>%a %a@]"
                                  ]), (function (param, param$1) {
                                  return simple_expr(ctxt, param, param$1);
                                }), e, (function (param, param$1) {
                                  return list(undefined, undefined, undefined, (function (param, param$1) {
                                                return label_x_expression_param(ctxt, param, param$1);
                                              }), param, param$1);
                                }), l);
                  }
                  
                }
              }
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* End_of_format */0
                                        ])])
                                ]),
                              "@[<hov2>%a@]"
                            ]), (function (f, param) {
                            return Curry._4(Format.fprintf(f, /* Format */[
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])]),
                                            "%a@ %a"
                                          ]), (function (param, param$1) {
                                          return expression2(ctxt, param, param$1);
                                        }), param[0], (function (param, param$1) {
                                          return list(undefined, undefined, undefined, (function (param, param$1) {
                                                        return label_x_expression_param(reset_ctxt, param, param$1);
                                                      }), param, param$1);
                                        }), param[1]);
                          }), /* tuple */[
                          e,
                          l
                        ]);
            }
            break;
        case /* Pexp_construct */9 :
            var match$4 = match[1];
            if (match$4 !== undefined && !is_simple_construct(view_expr(x))) {
              var match$5 = view_expr(x);
              if (typeof match$5 === "number") {
                if (match$5 !== 812216871) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "pprintast.ml",
                          621,
                          16
                        ]
                      ];
                }
                return Curry._4(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])])
                                  ]),
                                "@[<2>%a@;%a@]"
                              ]), longident_loc, match[0], (function (param, param$1) {
                              return simple_expr(ctxt, param, param$1);
                            }), match$4);
              } else {
                if (match$5[0] !== -1044071951) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "pprintast.ml",
                          621,
                          16
                        ]
                      ];
                }
                return list(/* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    "::",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "@;::@;"
                          ], undefined, undefined, (function (param, param$1) {
                              return simple_expr(ctxt, param, param$1);
                            }), f, match$5[1]);
              }
            } else {
              return expression1(ctxt, f, x);
            }
        case /* Pexp_variant */10 :
            var match$6 = match[1];
            if (match$6 !== undefined) {
              return Curry._3(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Char_literal */Block.__(12, [
                                      /* "`" */96,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<2>`%s@;%a@]"
                            ]), match[0], (function (param, param$1) {
                            return simple_expr(ctxt, param, param$1);
                          }), match$6);
            } else {
              return expression1(ctxt, f, x);
            }
        case /* Pexp_setfield */13 :
            return Curry._6(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "." */46,
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* String_literal */Block.__(11, [
                                                    "<-",
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* End_of_format */0
                                                              ])])
                                                      ])
                                                  ])
                                              ])])
                                      ])])
                              ]),
                            "@[<2>%a.%a@ <-@ %a@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[0], longident_loc, match[1], (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[2]);
        case /* Pexp_ifthenelse */15 :
            exit = 1;
            break;
        case /* Pexp_function */3 :
        case /* Pexp_fun */4 :
        case /* Pexp_match */6 :
        case /* Pexp_try */7 :
        case /* Pexp_sequence */16 :
            exit$1 = 2;
            break;
        case /* Pexp_new */22 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "new",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<hov2>new@ %a@]"
                          ]), longident_loc, match[0]);
        case /* Pexp_setinstvar */23 :
            return Curry._3(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* String_literal */Block.__(11, [
                                            "<-",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@[<hov2>%s@ <-@ %a@]"
                          ]), match[0].txt, (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[1]);
        case /* Pexp_override */24 :
            var string_x_expression = function (f, param) {
              return Curry._3(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* "=" */61,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>%s@ =@ %a@]"
                            ]), param[0].txt, (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), param[1]);
            };
            var partial_arg = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ";" */59,
                  /* End_of_format */0
                ]),
              ";"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "{<",
                                    /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                            ">}",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<hov2>{<%a>}@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, string_x_expression, param, param$1);
                        }), match[0]);
        case /* Pexp_assert */27 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "assert",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<hov2>assert@ %a@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[0]);
        case /* Pexp_lazy */28 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "lazy",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<hov2>lazy@ %a@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[0]);
        case /* Pexp_poly */29 :
            var match$7 = match[1];
            var e$1 = match[0];
            if (match$7 !== undefined) {
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "(!poly!",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* String_literal */Block.__(11, [
                                                      ": ",
                                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                              /* ")" */41,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Close_box */0,
                                                                  /* End_of_format */0
                                                                ])
                                                            ])])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>(!poly!@ %a@ : %a)@]"
                            ]), (function (param, param$1) {
                            return simple_expr(ctxt, param, param$1);
                          }), e$1, (function (param, param$1) {
                            return core_type(ctxt, param, param$1);
                          }), match$7);
            } else {
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "!poly!",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Close_box */0,
                                                  /* End_of_format */0
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>!poly!@ %a@]"
                            ]), (function (param, param$1) {
                            return simple_expr(ctxt, param, param$1);
                          }), e$1);
            }
        case /* Pexp_let */2 :
        case /* Pexp_letmodule */25 :
        case /* Pexp_letexception */26 :
        case /* Pexp_open */33 :
            exit$1 = 3;
            break;
        case /* Pexp_extension */34 :
            return extension(ctxt, f, match[0]);
        default:
          return expression1(ctxt, f, x);
      }
    }
    switch (exit$1) {
      case 2 :
          if (ctxt.pipe || ctxt.semi) {
            return paren(undefined, undefined, true, (function (param, param$1) {
                          return expression(reset_ctxt, param, param$1);
                        }), f, x);
          } else {
            exit = 1;
          }
          break;
      case 3 :
          if (ctxt.semi) {
            return paren(undefined, undefined, true, (function (param, param$1) {
                          return expression(reset_ctxt, param, param$1);
                        }), f, x);
          } else {
            exit = 1;
          }
          break;
      
    }
    if (exit === 1) {
      if (typeof match !== "number") {
        switch (match.tag | 0) {
          case /* Pexp_let */2 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          " in",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;<1 -2>",
                                                  1,
                                                  -2
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])])
                                ]),
                              "@[<2>%a in@;<1 -2>%a@]"
                            ]), (function (param, param$1) {
                            return bindings(reset_ctxt, param, param$1);
                          }), /* tuple */[
                          match[0],
                          match[1]
                        ], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), match[2]);
          case /* Pexp_function */3 :
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "function",
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* End_of_format */0
                                            ])])
                                    ])
                                ]),
                              "@[<hv>function%a@]"
                            ]), (function (param, param$1) {
                            return case_list(ctxt, param, param$1);
                          }), match[0]);
          case /* Pexp_fun */4 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "fun",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                  "->",
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<2>fun@;%a->@;%a@]"
                            ]), (function (param, param$1) {
                            return label_exp(ctxt, param, param$1);
                          }), /* tuple */[
                          match[0],
                          match[1],
                          match[2]
                        ], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), match[3]);
          case /* Pexp_match */6 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv0>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv0>"
                                      ]]),
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<hv0>",
                                                /* End_of_format */0
                                              ]),
                                            "<hv0>"
                                          ]]),
                                      /* Formatting_gen */Block.__(18, [
                                          /* Open_box */Block.__(1, [/* Format */[
                                                /* String_literal */Block.__(11, [
                                                    "<2>",
                                                    /* End_of_format */0
                                                  ]),
                                                "<2>"
                                              ]]),
                                          /* String_literal */Block.__(11, [
                                              "match ",
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* String_literal */Block.__(11, [
                                                              "with",
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Close_box */0,
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Close_box */0,
                                                                          /* End_of_format */0
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hv0>@[<hv0>@[<2>match %a@]@ with@]%a@]"
                            ]), (function (param, param$1) {
                            return expression(reset_ctxt, param, param$1);
                          }), match[0], (function (param, param$1) {
                            return case_list(ctxt, param, param$1);
                          }), match[1]);
          case /* Pexp_try */7 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<0>",
                                            /* End_of_format */0
                                          ]),
                                        "<0>"
                                      ]]),
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<hv2>",
                                                /* End_of_format */0
                                              ]),
                                            "<hv2>"
                                          ]]),
                                      /* String_literal */Block.__(11, [
                                          "try",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Formatting_gen */Block.__(18, [
                                                              /* Open_box */Block.__(1, [/* Format */[
                                                                    /* String_literal */Block.__(11, [
                                                                        "<0>",
                                                                        /* End_of_format */0
                                                                      ]),
                                                                    "<0>"
                                                                  ]]),
                                                              /* String_literal */Block.__(11, [
                                                                  "with",
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Close_box */0,
                                                                          /* Formatting_lit */Block.__(17, [
                                                                              /* Close_box */0,
                                                                              /* End_of_format */0
                                                                            ])
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<0>@[<hv2>try@ %a@]@ @[<0>with%a@]@]"
                            ]), (function (param, param$1) {
                            return expression(reset_ctxt, param, param$1);
                          }), match[0], (function (param, param$1) {
                            return case_list(ctxt, param, param$1);
                          }), match[1]);
          case /* Pexp_ifthenelse */15 :
          case /* Pexp_sequence */16 :
              break;
          case /* Pexp_letmodule */25 :
              return Curry._5(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "let",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "module",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* String */Block.__(2, [
                                                      /* No_padding */0,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Char_literal */Block.__(12, [
                                                              /* "=" */61,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@ ",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Break */Block.__(0, [
                                                                              "@ ",
                                                                              1,
                                                                              0
                                                                            ]),
                                                                          /* String_literal */Block.__(11, [
                                                                              "in",
                                                                              /* Formatting_lit */Block.__(17, [
                                                                                  /* Break */Block.__(0, [
                                                                                      "@ ",
                                                                                      1,
                                                                                      0
                                                                                    ]),
                                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                          /* Close_box */0,
                                                                                          /* End_of_format */0
                                                                                        ])])
                                                                                ])
                                                                            ])
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>let@ module@ %s@ =@ %a@ in@ %a@]"
                            ]), match[0].txt, (function (param, param$1) {
                            return module_expr(reset_ctxt, param, param$1);
                          }), match[1], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), match[2]);
          case /* Pexp_letexception */26 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "let",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "exception",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* String_literal */Block.__(11, [
                                                              "in",
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@ ",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Close_box */0,
                                                                          /* End_of_format */0
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>let@ exception@ %a@ in@ %a@]"
                            ]), (function (param, param$1) {
                            return extension_constructor(ctxt, param, param$1);
                          }), match[0], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), match[1]);
          case /* Pexp_open */33 :
              return Curry._5(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "let open",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* " " */32,
                                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                      " in",
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                  /* Close_box */0,
                                                                  /* End_of_format */0
                                                                ])])
                                                        ])
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<2>let open%s %a in@;%a@]"
                            ]), match[0] ? "" : "!", longident_loc, match[1], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), match[2]);
          
        }
      }
      if (ctxt.ifthenelse) {
        return paren(undefined, undefined, true, (function (param, param$1) {
                      return expression(reset_ctxt, param, param$1);
                    }), f, x);
      } else if (typeof match === "number") {
        return expression1(ctxt, f, x);
      } else {
        switch (match.tag | 0) {
          case /* Pexp_ifthenelse */15 :
              var partial_arg$1 = under_ifthenelse(ctxt);
              var expression_under_ifthenelse = function (param, param$1) {
                return expression(partial_arg$1, param, param$1);
              };
              return Curry._6(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv0>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv0>"
                                      ]]),
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<2>",
                                                /* End_of_format */0
                                              ]),
                                            "<2>"
                                          ]]),
                                      /* String_literal */Block.__(11, [
                                          "if",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Formatting_gen */Block.__(18, [
                                                              /* Open_box */Block.__(1, [/* Format */[
                                                                    /* String_literal */Block.__(11, [
                                                                        "<2>",
                                                                        /* End_of_format */0
                                                                      ]),
                                                                    "<2>"
                                                                  ]]),
                                                              /* String_literal */Block.__(11, [
                                                                  "then",
                                                                  /* Formatting_lit */Block.__(17, [
                                                                      /* Break */Block.__(0, [
                                                                          "@ ",
                                                                          1,
                                                                          0
                                                                        ]),
                                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                              /* Close_box */0,
                                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                      /* Close_box */0,
                                                                                      /* End_of_format */0
                                                                                    ])])
                                                                            ])])
                                                                    ])
                                                                ])
                                                            ])
                                                        ])
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hv0>@[<2>if@ %a@]@;@[<2>then@ %a@]%a@]"
                            ]), expression_under_ifthenelse, match[0], expression_under_ifthenelse, match[1], (function (f, eo) {
                            if (eo !== undefined) {
                              var partial_arg = under_semi(ctxt);
                              return Curry._2(Format.fprintf(f, /* Format */[
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Formatting_gen */Block.__(18, [
                                                      /* Open_box */Block.__(1, [/* Format */[
                                                            /* String_literal */Block.__(11, [
                                                                "<2>",
                                                                /* End_of_format */0
                                                              ]),
                                                            "<2>"
                                                          ]]),
                                                      /* String_literal */Block.__(11, [
                                                          "else",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@;",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])
                                                ]),
                                              "@;@[<2>else@;%a@]"
                                            ]), (function (param, param$1) {
                                            return expression(partial_arg, param, param$1);
                                          }), eo);
                            } else {
                              return /* () */0;
                            }
                          }), match[2]);
          case /* Pexp_sequence */16 :
              var sequence_helper = function (_acc, _v) {
                while(true) {
                  var v = _v;
                  var acc = _acc;
                  var match = v.pexp_desc;
                  if (typeof match === "number" || !(match.tag === /* Pexp_sequence */16 && !v.pexp_attributes)) {
                    return List.rev(/* :: */[
                                v,
                                acc
                              ]);
                  } else {
                    _v = match[1];
                    _acc = /* :: */[
                      match[0],
                      acc
                    ];
                    continue ;
                  }
                };
              };
              var lst = sequence_helper(/* [] */0, x);
              var partial_arg$2 = under_semi(ctxt);
              var partial_arg$3 = function (param, param$1) {
                return expression(partial_arg$2, param, param$1);
              };
              var partial_arg$4 = /* Format */[
                /* Char_literal */Block.__(12, [
                    /* ";" */59,
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                ";@;"
              ];
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* End_of_format */0
                                        ])])
                                ]),
                              "@[<hv>%a@]"
                            ]), (function (param, param$1) {
                            return list(partial_arg$4, undefined, undefined, partial_arg$3, param, param$1);
                          }), lst);
          default:
            return expression1(ctxt, f, x);
        }
      }
    }
    
  }
}

function pattern(ctxt, f, x) {
  var list_of_pattern = function (_acc, _x) {
    while(true) {
      var x = _x;
      var acc = _acc;
      var match = x.ppat_desc;
      if (typeof match === "number" || !(match.tag === /* Ppat_or */9 && !x.ppat_attributes)) {
        return /* :: */[
                x,
                acc
              ];
      } else {
        _x = match[0];
        _acc = /* :: */[
          match[1],
          acc
        ];
        continue ;
      }
    };
  };
  if (x.ppat_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "((",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "((%a)%a)"
                  ]), (function (param, param$1) {
                  return pattern(ctxt, param, param$1);
                }), {
                ppat_desc: x.ppat_desc,
                ppat_loc: x.ppat_loc,
                ppat_attributes: /* [] */0
              }, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.ppat_attributes);
  } else {
    var match = x.ppat_desc;
    if (typeof match === "number") {
      return pattern1(ctxt, f, x);
    } else {
      switch (match.tag | 0) {
        case /* Ppat_alias */1 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* String_literal */Block.__(11, [
                                            "as",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@;",
                                                    1,
                                                    0
                                                  ]),
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])])
                                              ])
                                          ])
                                      ])])
                              ]),
                            "@[<2>%a@;as@;%a@]"
                          ]), (function (param, param$1) {
                          return pattern(ctxt, param, param$1);
                        }), match[0], protect_ident, match[1].txt);
        case /* Ppat_or */9 :
            var partial_arg = /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@,",
                      0,
                      0
                    ]),
                  /* Char_literal */Block.__(12, [
                      /* "|" */124,
                      /* End_of_format */0
                    ])
                ]),
              "@,|"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov0>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov0>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "@[<hov0>%a@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return pattern(ctxt, param, param$1);
                                      }), param, param$1);
                        }), list_of_pattern(/* [] */0, x));
        default:
          return pattern1(ctxt, f, x);
      }
    }
  }
}

function type_def_list(ctxt, f, param) {
  var l = param[1];
  var rf = param[0];
  var type_decl = function (kwd, rf, f, x) {
    var eq = x.ptype_kind === /* Ptype_abstract */0 && x.ptype_manifest === undefined ? "" : " =";
    return Curry.app(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<2>",
                                  /* End_of_format */0
                                ]),
                              "<2>"
                            ]]),
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                      ])])
                                              ])
                                          ])])])
                              ])
                          ])
                      ]),
                    "@[<2>%s %a%a%s%s%a@]%a"
                  ]), [
                kwd,
                nonrec_flag,
                rf,
                (function (param, param$1) {
                    var ctxt$1 = ctxt;
                    var f = param;
                    var l = param$1;
                    if (l) {
                      var partial_arg = /* Format */[
                        /* Char_literal */Block.__(12, [
                            /* ")" */41,
                            /* End_of_format */0
                          ]),
                        ")"
                      ];
                      var partial_arg$1 = /* Format */[
                        /* Char_literal */Block.__(12, [
                            /* "(" */40,
                            /* End_of_format */0
                          ]),
                        "("
                      ];
                      var partial_arg$2 = /* Format */[
                        /* Char_literal */Block.__(12, [
                            /* "," */44,
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* End_of_format */0
                              ])
                          ]),
                        ",@;"
                      ];
                      return Curry._2(Format.fprintf(f, /* Format */[
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* " " */32,
                                              /* End_of_format */0
                                            ])]),
                                      "%a "
                                    ]), (function (param, param$1) {
                                    return list(partial_arg$2, partial_arg$1, partial_arg, (function (param, param$1) {
                                                  return type_param(ctxt$1, param, param$1);
                                                }), param, param$1);
                                  }), l);
                    } else {
                      return /* () */0;
                    }
                  }),
                x.ptype_params,
                x.ptype_name.txt,
                eq,
                (function (param, param$1) {
                    return type_declaration(ctxt, param, param$1);
                  }),
                x,
                (function (param, param$1) {
                    return item_attributes(ctxt, param, param$1);
                  }),
                x.ptype_attributes
              ]);
  };
  if (l) {
    var xs = l[1];
    var x = l[0];
    if (xs) {
      var partial_arg = /* Format */[
        /* Formatting_lit */Block.__(17, [
            /* Break */Block.__(0, [
                "@,",
                0,
                0
              ]),
            /* End_of_format */0
          ]),
        "@,"
      ];
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<v>",
                                    /* End_of_format */0
                                  ]),
                                "<v>"
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@,",
                                      0,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* End_of_format */0
                                        ])])
                                ])])
                        ]),
                      "@[<v>%a@,%a@]"
                    ]), (function (param, param$1) {
                    return type_decl("type", rf, param, param$1);
                  }), x, (function (param, param$1) {
                    return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                  return type_decl("and", /* Recursive */1, param, param$1);
                                }), param, param$1);
                  }), xs);
    } else {
      return type_decl("type", rf, f, x);
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "pprintast.ml",
            1354,
            10
          ]
        ];
  }
}

function item_extension(ctxt, f, param) {
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<2>",
                                /* End_of_format */0
                              ]),
                            "<2>"
                          ]]),
                      /* Char_literal */Block.__(12, [
                          /* "[" */91,
                          /* Char_literal */Block.__(12, [
                              /* "%" */37,
                              /* Char_literal */Block.__(12, [
                                  /* "%" */37,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* "]" */93,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "@[<2>[%%%%%s@ %a]@]"
                ]), param[0].txt, (function (param, param$1) {
                return payload(ctxt, param, param$1);
              }), param[1]);
}

function type_extension(ctxt, f, x) {
  var extension_constructor$1 = function (f, x) {
    return Curry._2(Format.fprintf(f, /* Format */[
                    /* Formatting_lit */Block.__(17, [
                        /* Force_newline */3,
                        /* Char_literal */Block.__(12, [
                            /* "|" */124,
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ])
                          ])
                      ]),
                    "@\n|@;%a"
                  ]), (function (param, param$1) {
                  return extension_constructor(ctxt, param, param$1);
                }), x);
  };
  var partial_arg = /* Format */[
    /* End_of_format */0,
    ""
  ];
  return Curry.app(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<2>",
                                /* End_of_format */0
                              ]),
                            "<2>"
                          ]]),
                      /* String_literal */Block.__(11, [
                          "type ",
                          /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      " += ",
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                    ])])
                                            ])])
                                    ])])])
                        ])
                    ]),
                  "@[<2>type %a%a += %a@ %a@]%a"
                ]), [
              (function (f, l) {
                  if (l) {
                    var partial_arg = /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* ")" */41,
                          /* End_of_format */0
                        ]),
                      ")"
                    ];
                    var partial_arg$1 = /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "(" */40,
                          /* End_of_format */0
                        ]),
                      "("
                    ];
                    var partial_arg$2 = /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "," */44,
                          /* End_of_format */0
                        ]),
                      ","
                    ];
                    return Curry._2(Format.fprintf(f, /* Format */[
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* End_of_format */0
                                          ])]),
                                    "%a@;"
                                  ]), (function (param, param$1) {
                                  return list(partial_arg$2, partial_arg$1, partial_arg, (function (param, param$1) {
                                                return type_param(ctxt, param, param$1);
                                              }), param, param$1);
                                }), l);
                  } else {
                    return /* () */0;
                  }
                }),
              x.ptyext_params,
              longident_loc,
              x.ptyext_path,
              private_flag,
              x.ptyext_private,
              (function (param, param$1) {
                  return list(partial_arg, undefined, undefined, extension_constructor$1, param, param$1);
                }),
              x.ptyext_constructors,
              (function (param, param$1) {
                  return item_attributes(ctxt, param, param$1);
                }),
              x.ptyext_attributes
            ]);
}

function floating_attribute(ctxt, f, param) {
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<2>",
                                /* End_of_format */0
                              ]),
                            "<2>"
                          ]]),
                      /* Char_literal */Block.__(12, [
                          /* "[" */91,
                          /* Formatting_lit */Block.__(17, [
                              /* Escaped_at */5,
                              /* Formatting_lit */Block.__(17, [
                                  /* Escaped_at */5,
                                  /* Formatting_lit */Block.__(17, [
                                      /* Escaped_at */5,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                      /* "]" */93,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "@[<2>[@@@@@@%s@ %a]@]"
                ]), param[0].txt, (function (param, param$1) {
                return payload(ctxt, param, param$1);
              }), param[1]);
}

function module_type(ctxt, f, x) {
  if (x.pmty_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "((",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "((%a)%a)"
                  ]), (function (param, param$1) {
                  return module_type(ctxt, param, param$1);
                }), {
                pmty_desc: x.pmty_desc,
                pmty_loc: x.pmty_loc,
                pmty_attributes: /* [] */0
              }, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.pmty_attributes);
  } else {
    var match = x.pmty_desc;
    switch (match.tag | 0) {
      case /* Pmty_ident */0 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Alpha */Block.__(15, [/* End_of_format */0]),
                          "%a"
                        ]), longident_loc, match[0]);
      case /* Pmty_signature */1 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hv0>",
                                        /* End_of_format */0
                                      ]),
                                    "<hv0>"
                                  ]]),
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "sig",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Close_box */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* String_literal */Block.__(11, [
                                                          "end",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ])
                            ]),
                          "@[<hv0>@[<hv2>sig@ %a@]@ end@]"
                        ]), (function (param, param$1) {
                        return list(undefined, undefined, undefined, (function (param, param$1) {
                                      return signature_item(ctxt, param, param$1);
                                    }), param, param$1);
                      }), match[0]);
      case /* Pmty_functor */2 :
          var match$1 = match[1];
          var s = match[0];
          if (match$1 !== undefined) {
            var mt2 = match[2];
            var mt1 = match$1;
            if (s.txt === "_") {
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "->",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "@[<hov2>%a@ ->@ %a@]"
                            ]), (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          }), mt1, (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          }), mt2);
            } else {
              return Curry._5(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "functor",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* "(" */40,
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Char_literal */Block.__(12, [
                                                          /* ":" */58,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@ ",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                      /* ")" */41,
                                                                      /* Formatting_lit */Block.__(17, [
                                                                          /* Break */Block.__(0, [
                                                                              "@ ",
                                                                              1,
                                                                              0
                                                                            ]),
                                                                          /* String_literal */Block.__(11, [
                                                                              "->",
                                                                              /* Formatting_lit */Block.__(17, [
                                                                                  /* Break */Block.__(0, [
                                                                                      "@ ",
                                                                                      1,
                                                                                      0
                                                                                    ]),
                                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                          /* Close_box */0,
                                                                                          /* End_of_format */0
                                                                                        ])])
                                                                                ])
                                                                            ])
                                                                        ])
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>functor@ (%s@ :@ %a)@ ->@ %a@]"
                            ]), s.txt, (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          }), mt1, (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          }), mt2);
            }
          } else {
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "functor () ->",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<hov2>functor () ->@ %a@]"
                          ]), (function (param, param$1) {
                          return module_type(ctxt, param, param$1);
                        }), match[2]);
          }
      case /* Pmty_with */3 :
          var l = match[1];
          var mt = match[0];
          var with_constraint = function (f, param) {
            switch (param.tag | 0) {
              case /* Pwith_type */0 :
                  var td = param[1];
                  var ls = List.map((function (prim) {
                          return prim[0];
                        }), td.ptype_params);
                  var partial_arg = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* ")" */41,
                        /* End_of_format */0
                      ]),
                    ")"
                  ];
                  var partial_arg$1 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "(" */40,
                        /* End_of_format */0
                      ]),
                    "("
                  ];
                  var partial_arg$2 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "," */44,
                        /* End_of_format */0
                      ]),
                    ","
                  ];
                  return Curry._6(Format.fprintf(f, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "type",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* " " */32,
                                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                          " =",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@ ",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                            ])
                                                        ])])
                                                ])])
                                        ])
                                    ]),
                                  "type@ %a %a =@ %a"
                                ]), (function (param, param$1) {
                                return list(partial_arg$2, partial_arg$1, partial_arg, (function (param, param$1) {
                                              return core_type(ctxt, param, param$1);
                                            }), param, param$1);
                              }), ls, longident_loc, param[0], (function (param, param$1) {
                                return type_declaration(ctxt, param, param$1);
                              }), td);
              case /* Pwith_module */1 :
                  return Curry._4(Format.fprintf(f, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "module ",
                                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                              " =",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])])
                                    ]),
                                  "module %a =@ %a"
                                ]), longident_loc, param[0], longident_loc, param[1]);
              case /* Pwith_typesubst */2 :
                  var td$1 = param[1];
                  var ls$1 = List.map((function (prim) {
                          return prim[0];
                        }), td$1.ptype_params);
                  var partial_arg$3 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* ")" */41,
                        /* End_of_format */0
                      ]),
                    ")"
                  ];
                  var partial_arg$4 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "(" */40,
                        /* End_of_format */0
                      ]),
                    "("
                  ];
                  var partial_arg$5 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "," */44,
                        /* End_of_format */0
                      ]),
                    ","
                  ];
                  return Curry._6(Format.fprintf(f, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "type",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* " " */32,
                                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                          " :=",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@ ",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                            ])
                                                        ])])
                                                ])])
                                        ])
                                    ]),
                                  "type@ %a %a :=@ %a"
                                ]), (function (param, param$1) {
                                return list(partial_arg$5, partial_arg$4, partial_arg$3, (function (param, param$1) {
                                              return core_type(ctxt, param, param$1);
                                            }), param, param$1);
                              }), ls$1, longident_loc, param[0], (function (param, param$1) {
                                return type_declaration(ctxt, param, param$1);
                              }), td$1);
              case /* Pwith_modsubst */3 :
                  return Curry._4(Format.fprintf(f, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "module ",
                                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                              " :=",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])])
                                    ]),
                                  "module %a :=@ %a"
                                ]), longident_loc, param[0], longident_loc, param[1]);
              
            }
          };
          if (l) {
            var partial_arg = /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@ ",
                      1,
                      0
                    ]),
                  /* String_literal */Block.__(11, [
                      "and",
                      /* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@ ",
                              1,
                              0
                            ]),
                          /* End_of_format */0
                        ])
                    ])
                ]),
              "@ and@ "
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "(" */40,
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "with",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* ")" */41,
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])])
                                                  ])
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<hov2>(%a@ with@ %a)@]"
                          ]), (function (param, param$1) {
                          return module_type(ctxt, param, param$1);
                        }), mt, (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, with_constraint, param, param$1);
                        }), l);
          } else {
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "@[<hov2>%a@]"
                          ]), (function (param, param$1) {
                          return module_type(ctxt, param, param$1);
                        }), mt);
          }
      case /* Pmty_typeof */4 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hov2>",
                                        /* End_of_format */0
                                      ]),
                                    "<hov2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "module",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* String_literal */Block.__(11, [
                                          "type",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* String_literal */Block.__(11, [
                                                  "of",
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "@[<hov2>module@ type@ of@ %a@]"
                        ]), (function (param, param$1) {
                        return module_expr(ctxt, param, param$1);
                      }), match[0]);
      case /* Pmty_extension */5 :
          return extension(ctxt, f, match[0]);
      case /* Pmty_alias */6 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "(module ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* ")" */41,
                                      /* End_of_format */0
                                    ])])
                            ]),
                          "(module %a)"
                        ]), longident_loc, match[0]);
      
    }
  }
}

function class_type_declaration_list(ctxt, f, l) {
  var class_type_declaration = function (kwd, f, x) {
    return Curry.app(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<2>",
                                  /* End_of_format */0
                                ]),
                              "<2>"
                            ]]),
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* Char_literal */Block.__(12, [
                                                    /* "=" */61,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                                              ])])
                                                      ])
                                                  ])
                                              ])
                                          ])])])
                              ])
                          ])
                      ]),
                    "@[<2>%s %a%a%s@ =@ %a@]%a"
                  ]), [
                kwd,
                virtual_flag,
                x.pci_virt,
                (function (param, param$1) {
                    return class_params_def(ctxt, param, param$1);
                  }),
                x.pci_params,
                x.pci_name.txt,
                (function (param, param$1) {
                    return class_type(ctxt, param, param$1);
                  }),
                x.pci_expr,
                (function (param, param$1) {
                    return item_attributes(ctxt, param, param$1);
                  }),
                x.pci_attributes
              ]);
  };
  if (l) {
    var xs = l[1];
    var x = l[0];
    if (xs) {
      var partial_arg = /* Format */[
        /* Formatting_lit */Block.__(17, [
            /* Break */Block.__(0, [
                "@,",
                0,
                0
              ]),
            /* End_of_format */0
          ]),
        "@,"
      ];
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<v>",
                                    /* End_of_format */0
                                  ]),
                                "<v>"
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@,",
                                      0,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* End_of_format */0
                                        ])])
                                ])])
                        ]),
                      "@[<v>%a@,%a@]"
                    ]), (function (param, param$1) {
                    return class_type_declaration("class type", param, param$1);
                  }), x, (function (param, param$1) {
                    return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                  return class_type_declaration("and", param, param$1);
                                }), param, param$1);
                  }), xs);
    } else {
      return class_type_declaration("class type", f, x);
    }
  } else {
    return /* () */0;
  }
}

function item_attributes(ctxt, f, l) {
  return List.iter((function (param) {
                var ctxt$1 = ctxt;
                var f$1 = f;
                var param$1 = param;
                return Curry._3(Format.fprintf(f$1, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "[" */91,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Escaped_at */5,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Escaped_at */5,
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                /* "]" */93,
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ]),
                                "@[<2>[@@@@%s@ %a]@]"
                              ]), param$1[0].txt, (function (param, param$1) {
                              return payload(ctxt$1, param, param$1);
                            }), param$1[1]);
              }), l);
}

function class_type(ctxt, f, x) {
  var match = x.pcty_desc;
  switch (match.tag | 0) {
    case /* Pcty_constr */0 :
        return Curry._6(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* End_of_format */0])])]),
                        "%a%a%a"
                      ]), (function (f, l) {
                      if (l) {
                        var partial_arg = /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "," */44,
                              /* End_of_format */0
                            ]),
                          ","
                        ];
                        return Curry._2(Format.fprintf(f, /* Format */[
                                        /* Char_literal */Block.__(12, [
                                            /* "[" */91,
                                            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                    /* "]" */93,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* End_of_format */0
                                                      ])
                                                  ])])
                                          ]),
                                        "[%a]@ "
                                      ]), (function (param, param$1) {
                                      return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                                    return core_type(ctxt, param, param$1);
                                                  }), param, param$1);
                                    }), l);
                      } else {
                        return /* () */0;
                      }
                    }), match[1], longident_loc, match[0], (function (param, param$1) {
                      return attributes(ctxt, param, param$1);
                    }), x.pcty_attributes);
    case /* Pcty_signature */1 :
        class_signature(ctxt, f, match[0]);
        return attributes(ctxt, f, x.pcty_attributes);
    case /* Pcty_arrow */2 :
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<2>",
                                      /* End_of_format */0
                                    ]),
                                  "<2>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "->",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])
                                      ])
                                  ])])
                          ]),
                        "@[<2>%a@;->@;%a@]"
                      ]), (function (param, param$1) {
                      return type_with_label(ctxt, param, param$1);
                    }), /* tuple */[
                    match[0],
                    match[1]
                  ], (function (param, param$1) {
                      return class_type(ctxt, param, param$1);
                    }), match[2]);
    case /* Pcty_extension */3 :
        extension(ctxt, f, match[0]);
        return attributes(ctxt, f, x.pcty_attributes);
    case /* Pcty_open */4 :
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<2>",
                                      /* End_of_format */0
                                    ]),
                                  "<2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "let open",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* " " */32,
                                        /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                " in",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<2>let open%s %a in@;%a@]"
                      ]), match[0] ? "" : "!", longident_loc, match[1], (function (param, param$1) {
                      return class_type(ctxt, param, param$1);
                    }), match[2]);
    
  }
}

function exception_declaration(ctxt, f, ext) {
  return Curry._2(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<hov2>",
                                /* End_of_format */0
                              ]),
                            "<hov2>"
                          ]]),
                      /* String_literal */Block.__(11, [
                          "exception",
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@ ",
                                  1,
                                  0
                                ]),
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Close_box */0,
                                      /* End_of_format */0
                                    ])])
                            ])
                        ])
                    ]),
                  "@[<hov2>exception@ %a@]"
                ]), (function (param, param$1) {
                return extension_constructor(ctxt, param, param$1);
              }), ext);
}

function value_description(ctxt, f, x) {
  return Curry._4(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<hov2>",
                                /* End_of_format */0
                              ]),
                            "<hov2>"
                          ]]),
                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Close_box */0,
                                  /* End_of_format */0
                                ])])])
                    ]),
                  "@[<hov2>%a%a@]"
                ]), (function (param, param$1) {
                return core_type(ctxt, param, param$1);
              }), x.pval_type, (function (f, x) {
                if (x.pval_prim !== /* [] */0) {
                  return Curry._2(Format.fprintf(f, /* Format */[
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Char_literal */Block.__(12, [
                                          /* "=" */61,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                            ])
                                        ])
                                    ]),
                                  "@ =@ %a"
                                ]), (function (param, param$1) {
                                return list(undefined, undefined, undefined, constant_string, param, param$1);
                              }), x.pval_prim);
                } else {
                  return 0;
                }
              }), x);
}

function extension_constructor(ctxt, f, x) {
  var match = x.pext_kind;
  if (match.tag) {
    return Curry._5(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* Char_literal */Block.__(12, [
                                    /* "=" */61,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])
                                  ])
                              ])])
                      ]),
                    "%s%a@;=@;%a"
                  ]), x.pext_name.txt, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.pext_attributes, longident_loc, match[0]);
  } else {
    return constructor_declaration(ctxt, f, /* tuple */[
                x.pext_name.txt,
                match[0],
                match[1],
                x.pext_attributes
              ]);
  }
}

function payload(ctxt, f, param) {
  switch (param.tag | 0) {
    case /* PStr */0 :
        var x = param[0];
        if (x) {
          var match = x[0].pstr_desc;
          if (match.tag || x[1]) {
            return structure(ctxt, f, x);
          } else {
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])])
                              ]),
                            "@[<2>%a@]%a"
                          ]), (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[0], (function (param, param$1) {
                          return item_attributes(ctxt, param, param$1);
                        }), match[1]);
          }
        } else {
          return structure(ctxt, f, x);
        }
    case /* PSig */1 :
        Format.fprintf(f, /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ":" */58,
                  /* End_of_format */0
                ]),
              ":"
            ]);
        return signature(ctxt, f, param[0]);
    case /* PTyp */2 :
        Format.fprintf(f, /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ":" */58,
                  /* End_of_format */0
                ]),
              ":"
            ]);
        return core_type(ctxt, f, param[0]);
    case /* PPat */3 :
        var match$1 = param[1];
        var x$1 = param[0];
        if (match$1 !== undefined) {
          Format.fprintf(f, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "?" */63,
                    /* End_of_format */0
                  ]),
                "?"
              ]);
          pattern(ctxt, f, x$1);
          Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    " when ",
                    /* End_of_format */0
                  ]),
                " when "
              ]);
          return expression(ctxt, f, match$1);
        } else {
          Format.fprintf(f, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "?" */63,
                    /* End_of_format */0
                  ]),
                "?"
              ]);
          return pattern(ctxt, f, x$1);
        }
    
  }
}

function simple_expr(ctxt, f, x) {
  if (x.pexp_attributes !== /* [] */0) {
    return expression(ctxt, f, x);
  } else {
    var match = x.pexp_desc;
    if (typeof match !== "number") {
      switch (match.tag | 0) {
        case /* Pexp_ident */0 :
            return longident_loc(f, match[0]);
        case /* Pexp_constant */1 :
            return constant(f, match[0]);
        case /* Pexp_tuple */8 :
            var partial_arg = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "," */44,
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ]),
                      /* End_of_format */0
                    ])
                ]),
              ",@;"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "(" */40,
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<hov2>(%a)@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return simple_expr(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[0]);
        case /* Pexp_construct */9 :
            if (is_simple_construct(view_expr(x))) {
              var match$1 = view_expr(x);
              if (typeof match$1 === "number") {
                if (match$1 !== 5493713) {
                  if (match$1 !== 405183496) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "pprintast.ml",
                            705,
                            16
                          ]
                        ];
                  }
                  return Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "()",
                                  /* End_of_format */0
                                ]),
                              "()"
                            ]);
                } else {
                  return Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "[]",
                                  /* End_of_format */0
                                ]),
                              "[]"
                            ]);
                }
              } else {
                var variant = match$1[0];
                if (variant !== -944563106) {
                  if (variant !== 947848242) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "pprintast.ml",
                            705,
                            16
                          ]
                        ];
                  }
                  return longident(f, match$1[1]);
                } else {
                  var partial_arg$1 = under_semi(ctxt);
                  var partial_arg$2 = function (param, param$1) {
                    return expression(partial_arg$1, param, param$1);
                  };
                  var partial_arg$3 = /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* ";" */59,
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* End_of_format */0
                          ])
                      ]),
                    ";@;"
                  ];
                  return Curry._2(Format.fprintf(f, /* Format */[
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<hv0>",
                                                /* End_of_format */0
                                              ]),
                                            "<hv0>"
                                          ]]),
                                      /* Char_literal */Block.__(12, [
                                          /* "[" */91,
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* "]" */93,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])
                                                ])])
                                        ])
                                    ]),
                                  "@[<hv0>[%a]@]"
                                ]), (function (param, param$1) {
                                return list(partial_arg$3, undefined, undefined, partial_arg$2, param, param$1);
                              }), match$1[1]);
                }
              }
            }
            break;
        case /* Pexp_variant */10 :
            if (match[1] === undefined) {
              return Curry._1(Format.fprintf(f, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "`" */96,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "`%s"
                            ]), match[0]);
            }
            break;
        case /* Pexp_record */11 :
            var longident_x_expression = function (f, param) {
              var e = param[1];
              var match = e.pexp_desc;
              var li = param[0];
              if (typeof match !== "number" && !match.tag && !e.pexp_attributes && Caml_obj.caml_equal(li.txt, match[0].txt)) {
                return Curry._2(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hov2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hov2>"
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ]),
                                "@[<hov2>%a@]"
                              ]), longident_loc, li);
              }
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* "=" */61,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "@[<hov2>%a@;=@;%a@]"
                            ]), longident_loc, li, (function (param, param$1) {
                            return simple_expr(ctxt, param, param$1);
                          }), e);
            };
            var partial_arg$4 = /* Format */[
              /* String_literal */Block.__(11, [
                  " with",
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ]),
                      /* End_of_format */0
                    ])
                ]),
              " with@;"
            ];
            var partial_arg$5 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ";" */59,
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ]),
                      /* End_of_format */0
                    ])
                ]),
              ";@;"
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hv0>",
                                          /* End_of_format */0
                                        ]),
                                      "<hv0>"
                                    ]]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hv2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hv2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "{" */123,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@;",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Char_literal */Block.__(12, [
                                                                /* "}" */125,
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])])])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@[<hv0>@[<hv2>{@;%a%a@]@;}@]"
                          ]), (function (param, param$1) {
                          return option(undefined, partial_arg$4, (function (param, param$1) {
                                        return simple_expr(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[1], (function (param, param$1) {
                          return list(partial_arg$5, undefined, undefined, longident_x_expression, param, param$1);
                        }), match[0]);
        case /* Pexp_array */14 :
            var partial_arg$6 = under_semi(ctxt);
            var partial_arg$7 = function (param, param$1) {
              return simple_expr(partial_arg$6, param, param$1);
            };
            var partial_arg$8 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ";" */59,
                  /* End_of_format */0
                ]),
              ";"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<0>",
                                          /* End_of_format */0
                                        ]),
                                      "<0>"
                                    ]]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* String_literal */Block.__(11, [
                                        "[|",
                                        /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                "|]",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<0>@[<2>[|%a|]@]@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg$8, undefined, undefined, partial_arg$7, param, param$1);
                        }), match[0]);
        case /* Pexp_while */17 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "while",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@;",
                                                    1,
                                                    0
                                                  ]),
                                                /* String_literal */Block.__(11, [
                                                    "do",
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@;",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@;",
                                                                    1,
                                                                    0
                                                                  ]),
                                                                /* String_literal */Block.__(11, [
                                                                    "done",
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Close_box */0,
                                                                        /* End_of_format */0
                                                                      ])
                                                                  ])
                                                              ])])
                                                      ])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<2>while@;%a@;do@;%a@;done@]"
                          ]), (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[0], (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[1]);
        case /* Pexp_for */18 :
            var expression$1 = function (param, param$1) {
              return expression(ctxt, param, param$1);
            };
            return Curry.app(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hv0>",
                                          /* End_of_format */0
                                        ]),
                                      "<hv0>"
                                    ]]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hv2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hv2>"
                                        ]]),
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<2>",
                                                  /* End_of_format */0
                                                ]),
                                              "<2>"
                                            ]]),
                                        /* String_literal */Block.__(11, [
                                            "for ",
                                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                    " =",
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@;",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@;",
                                                                    1,
                                                                    0
                                                                  ]),
                                                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                            /* Break */Block.__(0, [
                                                                                "@;",
                                                                                1,
                                                                                0
                                                                              ]),
                                                                            /* String_literal */Block.__(11, [
                                                                                "do",
                                                                                /* Formatting_lit */Block.__(17, [
                                                                                    /* Close_box */0,
                                                                                    /* Formatting_lit */Block.__(17, [
                                                                                        /* Break */Block.__(0, [
                                                                                            "@;",
                                                                                            1,
                                                                                            0
                                                                                          ]),
                                                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                                /* Close_box */0,
                                                                                                /* Formatting_lit */Block.__(17, [
                                                                                                    /* Break */Block.__(0, [
                                                                                                        "@;",
                                                                                                        1,
                                                                                                        0
                                                                                                      ]),
                                                                                                    /* String_literal */Block.__(11, [
                                                                                                        "done",
                                                                                                        /* Formatting_lit */Block.__(17, [
                                                                                                            /* Close_box */0,
                                                                                                            /* End_of_format */0
                                                                                                          ])
                                                                                                      ])
                                                                                                  ])
                                                                                              ])])
                                                                                      ])
                                                                                  ])
                                                                              ])
                                                                          ])])])
                                                              ])])
                                                      ])
                                                  ])])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@[<hv0>@[<hv2>@[<2>for %a =@;%a@;%a%a@;do@]@;%a@]@;done@]"
                          ]), [
                        (function (param, param$1) {
                            return pattern(ctxt, param, param$1);
                          }),
                        match[0],
                        expression$1,
                        match[1],
                        direction_flag,
                        match[3],
                        expression$1,
                        match[2],
                        expression$1,
                        match[4]
                      ]);
        case /* Pexp_constraint */19 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                        " : ",
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* ")" */41,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "(%a : %a)"
                          ]), (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[0], (function (param, param$1) {
                          return core_type(ctxt, param, param$1);
                        }), match[1]);
        case /* Pexp_coerce */20 :
            var partial_arg$9 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* " " */32,
                  /* End_of_format */0
                ]),
              " "
            ];
            var partial_arg$10 = /* Format */[
              /* String_literal */Block.__(11, [
                  " : ",
                  /* End_of_format */0
                ]),
              " : "
            ];
            return Curry._6(Format.fprintf(f, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                            " :> ",
                                            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                    /* ")" */41,
                                                    /* End_of_format */0
                                                  ])])
                                          ])])])
                              ]),
                            "(%a%a :> %a)"
                          ]), (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[0], (function (param, param$1) {
                          return option(partial_arg$10, partial_arg$9, (function (param, param$1) {
                                        return core_type(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[1], (function (param, param$1) {
                          return core_type(ctxt, param, param$1);
                        }), match[2]);
        case /* Pexp_newtype */31 :
            return Curry._3(Format.fprintf(f, /* Format */[
                            /* String_literal */Block.__(11, [
                                "fun",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "(type",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* ")" */41,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@;",
                                                            1,
                                                            0
                                                          ]),
                                                        /* String_literal */Block.__(11, [
                                                            "->",
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@;",
                                                                    1,
                                                                    0
                                                                  ]),
                                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "fun@;(type@;%s)@;->@;%a"
                          ]), match[0].txt, (function (param, param$1) {
                          return expression(ctxt, param, param$1);
                        }), match[1]);
        case /* Pexp_pack */32 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* String_literal */Block.__(11, [
                                "(module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ]),
                            "(module@;%a)"
                          ]), (function (param, param$1) {
                          return module_expr(ctxt, param, param$1);
                        }), match[0]);
        default:
          
      }
    }
    return paren(undefined, undefined, true, (function (param, param$1) {
                  return expression(ctxt, param, param$1);
                }), f, x);
  }
}

function core_type(ctxt, f, _x) {
  while(true) {
    var x = _x;
    if (x.ptyp_attributes !== /* [] */0) {
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* String_literal */Block.__(11, [
                          "((",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* ")" */41,
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])])
                                ])])
                        ]),
                      "((%a)%a)"
                    ]), (function (param, param$1) {
                    return core_type(ctxt, param, param$1);
                  }), {
                  ptyp_desc: x.ptyp_desc,
                  ptyp_loc: x.ptyp_loc,
                  ptyp_attributes: /* [] */0
                }, (function (param, param$1) {
                    return attributes(ctxt, param, param$1);
                  }), x.ptyp_attributes);
    } else {
      var match = x.ptyp_desc;
      if (typeof match !== "number") {
        switch (match.tag | 0) {
          case /* Ptyp_arrow */1 :
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "->",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "@[<2>%a@;->@;%a@]"
                            ]), (function (param, param$1) {
                            return type_with_label(ctxt, param, param$1);
                          }), /* tuple */[
                          match[0],
                          match[1]
                        ], (function (param, param$1) {
                            return core_type(ctxt, param, param$1);
                          }), match[2]);
          case /* Ptyp_alias */6 :
              return Curry._3(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "as",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Char_literal */Block.__(12, [
                                                      /* "'" */39,
                                                      /* String */Block.__(2, [
                                                          /* No_padding */0,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "@[<2>%a@;as@;'%s@]"
                            ]), (function (param, param$1) {
                            return core_type1(ctxt, param, param$1);
                          }), match[0], match[1]);
          case /* Ptyp_poly */8 :
              var sl = match[0];
              if (sl) {
                return Curry._4(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])])
                                  ]),
                                "@[<2>%a%a@]"
                              ]), (function (f, l) {
                              return Curry._2(Format.fprintf(f, /* Format */[
                                              /* Alpha */Block.__(15, [/* End_of_format */0]),
                                              "%a"
                                            ]), (function (f, l) {
                                            if (l) {
                                              var partial_arg = /* Format */[
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* End_of_format */0
                                                  ]),
                                                "@;"
                                              ];
                                              return Curry._2(Format.fprintf(f, /* Format */[
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Break */Block.__(0, [
                                                                          "@;",
                                                                          1,
                                                                          0
                                                                        ]),
                                                                      /* Char_literal */Block.__(12, [
                                                                          /* "." */46,
                                                                          /* Formatting_lit */Block.__(17, [
                                                                              /* Break */Block.__(0, [
                                                                                  "@;",
                                                                                  1,
                                                                                  0
                                                                                ]),
                                                                              /* End_of_format */0
                                                                            ])
                                                                        ])
                                                                    ])]),
                                                              "%a@;.@;"
                                                            ]), (function (param, param$1) {
                                                            return list(partial_arg, undefined, undefined, tyvar_loc, param, param$1);
                                                          }), l);
                                            } else {
                                              return /* () */0;
                                            }
                                          }), l);
                            }), sl, (function (param, param$1) {
                              return core_type(ctxt, param, param$1);
                            }), match[1]);
              } else {
                _x = match[1];
                continue ;
              }
          default:
            
        }
      }
      return Curry._2(Format.fprintf(f, /* Format */[
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<2>",
                                    /* End_of_format */0
                                  ]),
                                "<2>"
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Close_box */0,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "@[<2>%a@]"
                    ]), (function (param, param$1) {
                    return core_type1(ctxt, param, param$1);
                  }), x);
    }
  };
}

function module_expr(ctxt, f, x) {
  if (x.pmod_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "((",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "((%a)%a)"
                  ]), (function (param, param$1) {
                  return module_expr(ctxt, param, param$1);
                }), {
                pmod_desc: x.pmod_desc,
                pmod_loc: x.pmod_loc,
                pmod_attributes: /* [] */0
              }, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.pmod_attributes);
  } else {
    var match = x.pmod_desc;
    switch (match.tag | 0) {
      case /* Pmod_ident */0 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Alpha */Block.__(15, [/* End_of_format */0]),
                          "%a"
                        ]), longident_loc, match[0]);
      case /* Pmod_structure */1 :
          var partial_arg = /* Format */[
            /* Formatting_lit */Block.__(17, [
                /* Force_newline */3,
                /* End_of_format */0
              ]),
            "@\n"
          ];
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hv2>",
                                        /* End_of_format */0
                                      ]),
                                    "<hv2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "struct",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@;",
                                          1,
                                          0
                                        ]),
                                      /* Formatting_gen */Block.__(18, [
                                          /* Open_box */Block.__(1, [/* Format */[
                                                /* String_literal */Block.__(11, [
                                                    "<0>",
                                                    /* End_of_format */0
                                                  ]),
                                                "<0>"
                                              ]]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Close_box */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;<1 -2>",
                                                          1,
                                                          -2
                                                        ]),
                                                      /* String_literal */Block.__(11, [
                                                          "end",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ])
                            ]),
                          "@[<hv2>struct@;@[<0>%a@]@;<1 -2>end@]"
                        ]), (function (param, param$1) {
                        return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                      return structure_item(ctxt, param, param$1);
                                    }), param, param$1);
                      }), match[0]);
      case /* Pmod_functor */2 :
          var match$1 = match[1];
          if (match$1 !== undefined) {
            return Curry._5(Format.fprintf(f, /* Format */[
                            /* String_literal */Block.__(11, [
                                "functor",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "(" */40,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* Char_literal */Block.__(12, [
                                                    /* ":" */58,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                /* ")" */41,
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Break */Block.__(0, [
                                                                        "@;",
                                                                        1,
                                                                        0
                                                                      ]),
                                                                    /* String_literal */Block.__(11, [
                                                                        "->",
                                                                        /* Formatting_lit */Block.__(17, [
                                                                            /* Break */Block.__(0, [
                                                                                "@;",
                                                                                1,
                                                                                0
                                                                              ]),
                                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ])])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "functor@ (%s@ :@ %a)@;->@;%a"
                          ]), match[0].txt, (function (param, param$1) {
                          return module_type(ctxt, param, param$1);
                        }), match$1, (function (param, param$1) {
                          return module_expr(ctxt, param, param$1);
                        }), match[2]);
          } else {
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* String_literal */Block.__(11, [
                                "functor ()",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "->",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                          ])
                                      ])
                                  ])
                              ]),
                            "functor ()@;->@;%a"
                          ]), (function (param, param$1) {
                          return module_expr(ctxt, param, param$1);
                        }), match[2]);
          }
      case /* Pmod_apply */3 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "(" */40,
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      ")(",
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* End_of_format */0
                                            ])])
                                    ])])
                            ]),
                          "(%a)(%a)"
                        ]), (function (param, param$1) {
                        return module_expr(ctxt, param, param$1);
                      }), match[0], (function (param, param$1) {
                        return module_expr(ctxt, param, param$1);
                      }), match[1]);
      case /* Pmod_constraint */4 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hov2>",
                                        /* End_of_format */0
                                      ]),
                                    "<hov2>"
                                  ]]),
                              /* Char_literal */Block.__(12, [
                                  /* "(" */40,
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* ":" */58,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                          /* ")" */41,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ])
                            ]),
                          "@[<hov2>(%a@ :@ %a)@]"
                        ]), (function (param, param$1) {
                        return module_expr(ctxt, param, param$1);
                      }), match[0], (function (param, param$1) {
                        return module_type(ctxt, param, param$1);
                      }), match[1]);
      case /* Pmod_unpack */5 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "(val",
                              /* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@ ",
                                      1,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])])
                                ])
                            ]),
                          "(val@ %a)"
                        ]), (function (param, param$1) {
                        return expression(ctxt, param, param$1);
                      }), match[0]);
      case /* Pmod_extension */6 :
          return extension(ctxt, f, match[0]);
      
    }
  }
}

function type_param(ctxt, f, param) {
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Alpha */Block.__(15, [/* End_of_format */0])
                    ]),
                  "%s%a"
                ]), type_variance(param[1]), (function (param, param$1) {
                return core_type(ctxt, param, param$1);
              }), param[0]);
}

function simple_pattern(ctxt, f, x) {
  if (x.ppat_attributes !== /* [] */0) {
    return pattern(ctxt, f, x);
  } else {
    var match = x.ppat_desc;
    if (typeof match === "number") {
      return Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "_" */95,
                      /* End_of_format */0
                    ]),
                  "_"
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Ppat_var */0 :
            return protect_ident(f, match[0].txt);
        case /* Ppat_constant */2 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Alpha */Block.__(15, [/* End_of_format */0]),
                            "%a"
                          ]), constant, match[0]);
        case /* Ppat_interval */3 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                    "..",
                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                  ])]),
                            "%a..%a"
                          ]), constant, match[0], constant, match[1]);
        case /* Ppat_tuple */4 :
            var partial_arg = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "," */44,
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ]),
                      /* End_of_format */0
                    ])
                ]),
              ",@;"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<1>",
                                          /* End_of_format */0
                                        ]),
                                      "<1>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "(" */40,
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<1>(%a)@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return pattern1(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[0]);
        case /* Ppat_construct */5 :
            var match$1 = match[0].txt;
            switch (match$1.tag | 0) {
              case /* Lident */0 :
                  var x$1 = match$1[0];
                  switch (x$1) {
                    case "()" :
                    case "[]" :
                        return Curry._1(Format.fprintf(f, /* Format */[
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ]),
                                        "%s"
                                      ]), x$1);
                    default:
                      
                  }
                  break;
              case /* Ldot */1 :
              case /* Lapply */2 :
                  break;
              
            }
            break;
        case /* Ppat_variant */6 :
            if (match[1] === undefined) {
              return Curry._1(Format.fprintf(f, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "`" */96,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "`%s"
                            ]), match[0]);
            }
            break;
        case /* Ppat_record */7 :
            var l = match[0];
            var longident_x_pattern = function (f, param) {
              var p = param[1];
              var li = param[0];
              var match = li.txt;
              switch (match.tag | 0) {
                case /* Lident */0 :
                    var match$1 = p.ppat_desc;
                    if (typeof match$1 !== "number" && !match$1.tag && !p.ppat_attributes && match[0] === match$1[0].txt) {
                      return Curry._2(Format.fprintf(f, /* Format */[
                                      /* Formatting_gen */Block.__(18, [
                                          /* Open_box */Block.__(1, [/* Format */[
                                                /* String_literal */Block.__(11, [
                                                    "<2>",
                                                    /* End_of_format */0
                                                  ]),
                                                "<2>"
                                              ]]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Close_box */0,
                                                  /* End_of_format */0
                                                ])])
                                        ]),
                                      "@[<2>%a@]"
                                    ]), longident_loc, li);
                    }
                    break;
                case /* Ldot */1 :
                case /* Lapply */2 :
                    break;
                
              }
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* "=" */61,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "@[<2>%a@;=@;%a@]"
                            ]), longident_loc, li, (function (param, param$1) {
                            return pattern1(ctxt, param, param$1);
                          }), p);
            };
            if (match[1]) {
              var partial_arg$1 = /* Format */[
                /* Char_literal */Block.__(12, [
                    /* ";" */59,
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                ";@;"
              ];
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Char_literal */Block.__(12, [
                                      /* "{" */123,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                  ";_}",
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<2>{@;%a;_}@]"
                            ]), (function (param, param$1) {
                            return list(partial_arg$1, undefined, undefined, longident_x_pattern, param, param$1);
                          }), l);
            } else {
              var partial_arg$2 = /* Format */[
                /* Char_literal */Block.__(12, [
                    /* ";" */59,
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* End_of_format */0
                      ])
                  ]),
                ";@;"
              ];
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Char_literal */Block.__(12, [
                                      /* "{" */123,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Char_literal */Block.__(12, [
                                                      /* "}" */125,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<2>{@;%a@;}@]"
                            ]), (function (param, param$1) {
                            return list(partial_arg$2, undefined, undefined, longident_x_pattern, param, param$1);
                          }), l);
            }
        case /* Ppat_array */8 :
            var partial_arg$3 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ";" */59,
                  /* End_of_format */0
                ]),
              ";"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "[|",
                                    /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                            "|]",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<2>[|%a|]@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg$3, undefined, undefined, (function (param, param$1) {
                                        return pattern1(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[0]);
        case /* Ppat_alias */1 :
        case /* Ppat_or */9 :
            break;
        case /* Ppat_constraint */10 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "(" */40,
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* ")" */41,
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])])
                                                  ])
                                              ])
                                          ])])
                                  ])
                              ]),
                            "@[<2>(%a@;:@;%a)@]"
                          ]), (function (param, param$1) {
                          return pattern1(ctxt, param, param$1);
                        }), match[0], (function (param, param$1) {
                          return core_type(ctxt, param, param$1);
                        }), match[1]);
        case /* Ppat_type */11 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "#" */35,
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ]),
                            "#%a"
                          ]), longident_loc, match[0]);
        case /* Ppat_lazy */12 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "(lazy",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* ")" */41,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<2>(lazy@;%a)@]"
                          ]), (function (param, param$1) {
                          return pattern1(ctxt, param, param$1);
                        }), match[0]);
        case /* Ppat_unpack */13 :
            return Curry._1(Format.fprintf(f, /* Format */[
                            /* String_literal */Block.__(11, [
                                "(module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "(module@ %s)@ "
                          ]), match[0].txt);
        case /* Ppat_exception */14 :
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "exception",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<2>exception@;%a@]"
                          ]), (function (param, param$1) {
                          return pattern1(ctxt, param, param$1);
                        }), match[0]);
        case /* Ppat_extension */15 :
            return extension(ctxt, f, match[0]);
        case /* Ppat_open */16 :
            var p = match[1];
            var match$2 = p.ppat_desc;
            var with_paren;
            if (typeof match$2 === "number") {
              with_paren = true;
            } else {
              switch (match$2.tag | 0) {
                case /* Ppat_construct */5 :
                    var match$3 = match$2[0].txt;
                    switch (match$3.tag | 0) {
                      case /* Lident */0 :
                          switch (match$3[0]) {
                            case "()" :
                            case "[]" :
                                with_paren = false;
                                break;
                            default:
                              with_paren = true;
                          }
                          break;
                      case /* Ldot */1 :
                      case /* Lapply */2 :
                          with_paren = true;
                          break;
                      
                    }
                    break;
                case /* Ppat_record */7 :
                case /* Ppat_array */8 :
                    with_paren = false;
                    break;
                default:
                  with_paren = true;
              }
            }
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "." */46,
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* " " */32,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])])
                              ]),
                            "@[<2>%a.%a @]"
                          ]), longident_loc, match[0], (function (param, param$1) {
                          return paren(undefined, undefined, with_paren, (function (param, param$1) {
                                        return pattern1(ctxt, param, param$1);
                                      }), param, param$1);
                        }), p);
        
      }
    }
    return paren(undefined, undefined, true, (function (param, param$1) {
                  return pattern(ctxt, param, param$1);
                }), f, x);
  }
}

function label_exp(ctxt, f, param) {
  var p = param[2];
  var opt = param[1];
  var l = param[0];
  if (typeof l === "number") {
    return Curry._2(Format.fprintf(f, /* Format */[
                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            /* End_of_format */0
                          ])]),
                    "%a@ "
                  ]), (function (param, param$1) {
                  return simple_pattern(ctxt, param, param$1);
                }), p);
  } else if (l.tag) {
    var match = p.ppat_desc;
    var rest = l[0];
    if (typeof match !== "number" && !match.tag && !p.ppat_attributes && match[0].txt === rest) {
      if (opt !== undefined) {
        return Curry._3(Format.fprintf(f, /* Format */[
                        /* String_literal */Block.__(11, [
                            "?(",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "=" */61,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* ")" */41,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ]),
                        "?(%s=@;%a)@;"
                      ]), rest, (function (param, param$1) {
                      return expression(ctxt, param, param$1);
                    }), opt);
      } else {
        return Curry._1(Format.fprintf(f, /* Format */[
                        /* Char_literal */Block.__(12, [
                            /* "?" */63,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "?%s@ "
                      ]), rest);
      }
    }
    if (opt !== undefined) {
      return Curry._5(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "?" */63,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  ":(",
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* "=" */61,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                      /* ")" */41,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* End_of_format */0
                                                        ])
                                                    ])])
                                            ])
                                        ])])
                                ])
                            ])
                        ]),
                      "?%s:(%a=@;%a)@;"
                    ]), rest, (function (param, param$1) {
                    return pattern1(ctxt, param, param$1);
                  }), p, (function (param, param$1) {
                    return expression(ctxt, param, param$1);
                  }), opt);
    } else {
      return Curry._3(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "?" */63,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* ":" */58,
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* End_of_format */0
                                        ])])
                                ])
                            ])
                        ]),
                      "?%s:%a@;"
                    ]), rest, (function (param, param$1) {
                    return simple_pattern(ctxt, param, param$1);
                  }), p);
    }
  } else {
    var match$1 = p.ppat_desc;
    var l$1 = l[0];
    if (typeof match$1 !== "number" && !match$1.tag && !p.ppat_attributes && match$1[0].txt === l$1) {
      return Curry._1(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "~" */126,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@;",
                                      1,
                                      0
                                    ]),
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "~%s@;"
                    ]), l$1);
    }
    return Curry._3(Format.fprintf(f, /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "~" */126,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* ":" */58,
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* End_of_format */0
                                      ])])
                              ])
                          ])
                      ]),
                    "~%s:%a@;"
                  ]), l$1, (function (param, param$1) {
                  return simple_pattern(ctxt, param, param$1);
                }), p);
  }
}

function extension(ctxt, f, param) {
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<2>",
                                /* End_of_format */0
                              ]),
                            "<2>"
                          ]]),
                      /* Char_literal */Block.__(12, [
                          /* "[" */91,
                          /* Char_literal */Block.__(12, [
                              /* "%" */37,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* "]" */93,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Close_box */0,
                                                  /* End_of_format */0
                                                ])
                                            ])])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "@[<2>[%%%s@ %a]@]"
                ]), param[0].txt, (function (param, param$1) {
                return payload(ctxt, param, param$1);
              }), param[1]);
}

function label_x_expression_param(ctxt, f, param) {
  var e = param[1];
  var l = param[0];
  var match = e.pexp_desc;
  var simple_name;
  if (typeof match === "number" || match.tag) {
    simple_name = undefined;
  } else {
    var match$1 = match[0].txt;
    switch (match$1.tag | 0) {
      case /* Lident */0 :
          simple_name = e.pexp_attributes ? undefined : match$1[0];
          break;
      case /* Ldot */1 :
      case /* Lapply */2 :
          simple_name = undefined;
          break;
      
    }
  }
  if (typeof l === "number") {
    return expression2(ctxt, f, e);
  } else if (l.tag) {
    var str = l[0];
    if (Caml_obj.caml_equal(str, simple_name)) {
      return Curry._1(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "?" */63,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "?%s"
                    ]), str);
    } else {
      return Curry._3(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "?" */63,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* ":" */58,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])
                            ])
                        ]),
                      "?%s:%a"
                    ]), str, (function (param, param$1) {
                    return simple_expr(ctxt, param, param$1);
                  }), e);
    }
  } else {
    var lbl = l[0];
    if (Caml_obj.caml_equal(lbl, simple_name)) {
      return Curry._1(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "~" */126,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "~%s"
                    ]), lbl);
    } else {
      return Curry._3(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "~" */126,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* ":" */58,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])
                            ])
                        ]),
                      "~%s:%a"
                    ]), lbl, (function (param, param$1) {
                    return simple_expr(ctxt, param, param$1);
                  }), e);
    }
  }
}

function class_structure(ctxt, f, param) {
  return Curry._4(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<hv0>",
                                /* End_of_format */0
                              ]),
                            "<hv0>"
                          ]]),
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<hv2>",
                                    /* End_of_format */0
                                  ]),
                                "<hv2>"
                              ]]),
                          /* String_literal */Block.__(11, [
                              "object",
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@;",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* String_literal */Block.__(11, [
                                                      "end",
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])
                                                    ])
                                                ])
                                            ])])
                                    ])])
                            ])
                        ])
                    ]),
                  "@[<hv0>@[<hv2>object%a@;%a@]@;end@]"
                ]), (function (f, p) {
                var match = p.ppat_desc;
                if (typeof match === "number") {
                  return /* () */0;
                } else if (match.tag === /* Ppat_constraint */10) {
                  return Curry._2(Format.fprintf(f, /* Format */[
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                    ]),
                                  " %a"
                                ]), (function (param, param$1) {
                                return pattern(ctxt, param, param$1);
                              }), p);
                } else {
                  return Curry._2(Format.fprintf(f, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      " (",
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* End_of_format */0
                                            ])])
                                    ]),
                                  " (%a)"
                                ]), (function (param, param$1) {
                                return pattern(ctxt, param, param$1);
                              }), p);
                }
              }), param.pcstr_self, (function (param, param$1) {
                return list(undefined, undefined, undefined, (function (param, param$1) {
                              var ctxt$1 = ctxt;
                              var f = param;
                              var x = param$1;
                              var match = x.pcf_desc;
                              switch (match.tag | 0) {
                                case /* Pcf_inherit */0 :
                                    return Curry._7(Format.fprintf(f, /* Format */[
                                                    /* Formatting_gen */Block.__(18, [
                                                        /* Open_box */Block.__(1, [/* Format */[
                                                              /* String_literal */Block.__(11, [
                                                                  "<2>",
                                                                  /* End_of_format */0
                                                                ]),
                                                              "<2>"
                                                            ]]),
                                                        /* String_literal */Block.__(11, [
                                                            "inherit",
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@ ",
                                                                    1,
                                                                    0
                                                                  ]),
                                                                /* String */Block.__(2, [
                                                                    /* No_padding */0,
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Break */Block.__(0, [
                                                                            "@ ",
                                                                            1,
                                                                            0
                                                                          ]),
                                                                        /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                    /* Close_box */0,
                                                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                  ])])])
                                                                      ])
                                                                  ])
                                                              ])
                                                          ])
                                                      ]),
                                                    "@[<2>inherit@ %s@ %a%a@]%a"
                                                  ]), match[0] ? "" : "!", (function (param, param$1) {
                                                  return class_expr(ctxt$1, param, param$1);
                                                }), match[1], (function (f, so) {
                                                  if (so !== undefined) {
                                                    return Curry._1(Format.fprintf(f, /* Format */[
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Break */Block.__(0, [
                                                                            "@ ",
                                                                            1,
                                                                            0
                                                                          ]),
                                                                        /* String_literal */Block.__(11, [
                                                                            "as ",
                                                                            /* String */Block.__(2, [
                                                                                /* No_padding */0,
                                                                                /* End_of_format */0
                                                                              ])
                                                                          ])
                                                                      ]),
                                                                    "@ as %s"
                                                                  ]), so.txt);
                                                  } else {
                                                    return /* () */0;
                                                  }
                                                }), match[2], (function (param, param$1) {
                                                  return item_attributes(ctxt$1, param, param$1);
                                                }), x.pcf_attributes);
                                case /* Pcf_val */1 :
                                    var match$1 = match[0];
                                    var match$2 = match$1[2];
                                    var mf = match$1[1];
                                    var s = match$1[0];
                                    if (match$2.tag) {
                                      return Curry._8(Format.fprintf(f, /* Format */[
                                                      /* Formatting_gen */Block.__(18, [
                                                          /* Open_box */Block.__(1, [/* Format */[
                                                                /* String_literal */Block.__(11, [
                                                                    "<2>",
                                                                    /* End_of_format */0
                                                                  ]),
                                                                "<2>"
                                                              ]]),
                                                          /* String_literal */Block.__(11, [
                                                              "val",
                                                              /* String */Block.__(2, [
                                                                  /* No_padding */0,
                                                                  /* Char_literal */Block.__(12, [
                                                                      /* " " */32,
                                                                      /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                                              /* No_padding */0,
                                                                              /* String_literal */Block.__(11, [
                                                                                  " =",
                                                                                  /* Formatting_lit */Block.__(17, [
                                                                                      /* Break */Block.__(0, [
                                                                                          "@;",
                                                                                          1,
                                                                                          0
                                                                                        ]),
                                                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                              /* Close_box */0,
                                                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                            ])])
                                                                                    ])
                                                                                ])
                                                                            ])])
                                                                    ])
                                                                ])
                                                            ])
                                                        ]),
                                                      "@[<2>val%s %a%s =@;%a@]%a"
                                                    ]), match$2[0] ? "" : "!", mutable_flag, mf, s.txt, (function (param, param$1) {
                                                    return expression(ctxt$1, param, param$1);
                                                  }), match$2[1], (function (param, param$1) {
                                                    return item_attributes(ctxt$1, param, param$1);
                                                  }), x.pcf_attributes);
                                    } else {
                                      return Curry._7(Format.fprintf(f, /* Format */[
                                                      /* Formatting_gen */Block.__(18, [
                                                          /* Open_box */Block.__(1, [/* Format */[
                                                                /* String_literal */Block.__(11, [
                                                                    "<2>",
                                                                    /* End_of_format */0
                                                                  ]),
                                                                "<2>"
                                                              ]]),
                                                          /* String_literal */Block.__(11, [
                                                              "val virtual ",
                                                              /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                                      /* No_padding */0,
                                                                      /* String_literal */Block.__(11, [
                                                                          " :",
                                                                          /* Formatting_lit */Block.__(17, [
                                                                              /* Break */Block.__(0, [
                                                                                  "@ ",
                                                                                  1,
                                                                                  0
                                                                                ]),
                                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                      /* Close_box */0,
                                                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                    ])])
                                                                            ])
                                                                        ])
                                                                    ])])
                                                            ])
                                                        ]),
                                                      "@[<2>val virtual %a%s :@ %a@]%a"
                                                    ]), mutable_flag, mf, s.txt, (function (param, param$1) {
                                                    return core_type(ctxt$1, param, param$1);
                                                  }), match$2[0], (function (param, param$1) {
                                                    return item_attributes(ctxt$1, param, param$1);
                                                  }), x.pcf_attributes);
                                    }
                                case /* Pcf_method */2 :
                                    var match$3 = match[0];
                                    var match$4 = match$3[2];
                                    var pf = match$3[1];
                                    var s$1 = match$3[0];
                                    if (match$4.tag) {
                                      var e = match$4[1];
                                      var bind = function (e) {
                                        return binding(ctxt$1, f, {
                                                    pvb_pat: {
                                                      ppat_desc: /* Ppat_var */Block.__(0, [s$1]),
                                                      ppat_loc: $$Location.none,
                                                      ppat_attributes: /* [] */0
                                                    },
                                                    pvb_expr: e,
                                                    pvb_attributes: /* [] */0,
                                                    pvb_loc: $$Location.none
                                                  });
                                      };
                                      return Curry._7(Format.fprintf(f, /* Format */[
                                                      /* Formatting_gen */Block.__(18, [
                                                          /* Open_box */Block.__(1, [/* Format */[
                                                                /* String_literal */Block.__(11, [
                                                                    "<2>",
                                                                    /* End_of_format */0
                                                                  ]),
                                                                "<2>"
                                                              ]]),
                                                          /* String_literal */Block.__(11, [
                                                              "method",
                                                              /* String */Block.__(2, [
                                                                  /* No_padding */0,
                                                                  /* Char_literal */Block.__(12, [
                                                                      /* " " */32,
                                                                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                  /* Close_box */0,
                                                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                ])])])
                                                                    ])
                                                                ])
                                                            ])
                                                        ]),
                                                      "@[<2>method%s %a%a@]%a"
                                                    ]), match$4[0] ? "" : "!", private_flag, pf, (function (f, param) {
                                                    var match = param.pexp_desc;
                                                    if (typeof match === "number" || match.tag !== /* Pexp_poly */29) {
                                                      return bind(e);
                                                    } else {
                                                      var match$1 = match[1];
                                                      var e$1 = match[0];
                                                      if (match$1 !== undefined) {
                                                        if (param.pexp_attributes) {
                                                          return bind(e);
                                                        } else {
                                                          return Curry._5(Format.fprintf(f, /* Format */[
                                                                          /* String */Block.__(2, [
                                                                              /* No_padding */0,
                                                                              /* String_literal */Block.__(11, [
                                                                                  " :",
                                                                                  /* Formatting_lit */Block.__(17, [
                                                                                      /* Break */Block.__(0, [
                                                                                          "@;",
                                                                                          1,
                                                                                          0
                                                                                        ]),
                                                                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                                              /* "=" */61,
                                                                                              /* Formatting_lit */Block.__(17, [
                                                                                                  /* Break */Block.__(0, [
                                                                                                      "@;",
                                                                                                      1,
                                                                                                      0
                                                                                                    ]),
                                                                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                                ])
                                                                                            ])])
                                                                                    ])
                                                                                ])
                                                                            ]),
                                                                          "%s :@;%a=@;%a"
                                                                        ]), s$1.txt, (function (param, param$1) {
                                                                        return core_type(ctxt$1, param, param$1);
                                                                      }), match$1, (function (param, param$1) {
                                                                        return expression(ctxt$1, param, param$1);
                                                                      }), e$1);
                                                        }
                                                      } else if (param.pexp_attributes) {
                                                        return bind(e);
                                                      } else {
                                                        return bind(e$1);
                                                      }
                                                    }
                                                  }), e, (function (param, param$1) {
                                                    return item_attributes(ctxt$1, param, param$1);
                                                  }), x.pcf_attributes);
                                    } else {
                                      return Curry._7(Format.fprintf(f, /* Format */[
                                                      /* Formatting_gen */Block.__(18, [
                                                          /* Open_box */Block.__(1, [/* Format */[
                                                                /* String_literal */Block.__(11, [
                                                                    "<2>",
                                                                    /* End_of_format */0
                                                                  ]),
                                                                "<2>"
                                                              ]]),
                                                          /* String_literal */Block.__(11, [
                                                              "method virtual ",
                                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                      /* " " */32,
                                                                      /* String */Block.__(2, [
                                                                          /* No_padding */0,
                                                                          /* String_literal */Block.__(11, [
                                                                              " :",
                                                                              /* Formatting_lit */Block.__(17, [
                                                                                  /* Break */Block.__(0, [
                                                                                      "@;",
                                                                                      1,
                                                                                      0
                                                                                    ]),
                                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                          /* Close_box */0,
                                                                                          /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                        ])])
                                                                                ])
                                                                            ])
                                                                        ])
                                                                    ])])
                                                            ])
                                                        ]),
                                                      "@[<2>method virtual %a %s :@;%a@]%a"
                                                    ]), private_flag, pf, s$1.txt, (function (param, param$1) {
                                                    return core_type(ctxt$1, param, param$1);
                                                  }), match$4[0], (function (param, param$1) {
                                                    return item_attributes(ctxt$1, param, param$1);
                                                  }), x.pcf_attributes);
                                    }
                                case /* Pcf_constraint */3 :
                                    var match$5 = match[0];
                                    return Curry._6(Format.fprintf(f, /* Format */[
                                                    /* Formatting_gen */Block.__(18, [
                                                        /* Open_box */Block.__(1, [/* Format */[
                                                              /* String_literal */Block.__(11, [
                                                                  "<2>",
                                                                  /* End_of_format */0
                                                                ]),
                                                              "<2>"
                                                            ]]),
                                                        /* String_literal */Block.__(11, [
                                                            "constraint ",
                                                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                                    " =",
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Break */Block.__(0, [
                                                                            "@;",
                                                                            1,
                                                                            0
                                                                          ]),
                                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                /* Close_box */0,
                                                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                              ])])
                                                                      ])
                                                                  ])])
                                                          ])
                                                      ]),
                                                    "@[<2>constraint %a =@;%a@]%a"
                                                  ]), (function (param, param$1) {
                                                  return core_type(ctxt$1, param, param$1);
                                                }), match$5[0], (function (param, param$1) {
                                                  return core_type(ctxt$1, param, param$1);
                                                }), match$5[1], (function (param, param$1) {
                                                  return item_attributes(ctxt$1, param, param$1);
                                                }), x.pcf_attributes);
                                case /* Pcf_initializer */4 :
                                    return Curry._4(Format.fprintf(f, /* Format */[
                                                    /* Formatting_gen */Block.__(18, [
                                                        /* Open_box */Block.__(1, [/* Format */[
                                                              /* String_literal */Block.__(11, [
                                                                  "<2>",
                                                                  /* End_of_format */0
                                                                ]),
                                                              "<2>"
                                                            ]]),
                                                        /* String_literal */Block.__(11, [
                                                            "initializer",
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@ ",
                                                                    1,
                                                                    0
                                                                  ]),
                                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                        /* Close_box */0,
                                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                      ])])
                                                              ])
                                                          ])
                                                      ]),
                                                    "@[<2>initializer@ %a@]%a"
                                                  ]), (function (param, param$1) {
                                                  return expression(ctxt$1, param, param$1);
                                                }), match[0], (function (param, param$1) {
                                                  return item_attributes(ctxt$1, param, param$1);
                                                }), x.pcf_attributes);
                                case /* Pcf_attribute */5 :
                                    return floating_attribute(ctxt$1, f, match[0]);
                                case /* Pcf_extension */6 :
                                    item_extension(ctxt$1, f, match[0]);
                                    return item_attributes(ctxt$1, f, x.pcf_attributes);
                                
                              }
                            }), param, param$1);
              }), param.pcstr_fields);
}

function bindings(ctxt, f, param) {
  var l = param[1];
  var rf = param[0];
  var binding$1 = function (kwd, rf, f, x) {
    return Curry._7(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<2>",
                                  /* End_of_format */0
                                ]),
                              "<2>"
                            ]]),
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                          ])])])
                              ])
                          ])
                      ]),
                    "@[<2>%s %a%a@]%a"
                  ]), kwd, rec_flag, rf, (function (param, param$1) {
                  return binding(ctxt, param, param$1);
                }), x, (function (param, param$1) {
                  return item_attributes(ctxt, param, param$1);
                }), x.pvb_attributes);
  };
  if (l) {
    var xs = l[1];
    var x = l[0];
    if (xs) {
      var partial_arg = /* Format */[
        /* Formatting_lit */Block.__(17, [
            /* Break */Block.__(0, [
                "@,",
                0,
                0
              ]),
            /* End_of_format */0
          ]),
        "@,"
      ];
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<v>",
                                    /* End_of_format */0
                                  ]),
                                "<v>"
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@,",
                                      0,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* End_of_format */0
                                        ])])
                                ])])
                        ]),
                      "@[<v>%a@,%a@]"
                    ]), (function (param, param$1) {
                    return binding$1("let", rf, param, param$1);
                  }), x, (function (param, param$1) {
                    return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                  return binding$1("and", /* Nonrecursive */0, param, param$1);
                                }), param, param$1);
                  }), xs);
    } else {
      return binding$1("let", rf, f, x);
    }
  } else {
    return /* () */0;
  }
}

function class_expr(ctxt, f, x) {
  if (x.pcl_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "((",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* ")" */41,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "((%a)%a)"
                  ]), (function (param, param$1) {
                  return class_expr(ctxt, param, param$1);
                }), {
                pcl_desc: x.pcl_desc,
                pcl_loc: x.pcl_loc,
                pcl_attributes: /* [] */0
              }, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), x.pcl_attributes);
  } else {
    var match = x.pcl_desc;
    switch (match.tag | 0) {
      case /* Pcl_constr */0 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* End_of_format */0])]),
                          "%a%a"
                        ]), (function (f, l) {
                        if (l !== /* [] */0) {
                          var partial_arg = /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "," */44,
                                /* End_of_format */0
                              ]),
                            ","
                          ];
                          return Curry._2(Format.fprintf(f, /* Format */[
                                          /* Char_literal */Block.__(12, [
                                              /* "[" */91,
                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                      /* "]" */93,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* End_of_format */0
                                                        ])
                                                    ])])
                                            ]),
                                          "[%a]@ "
                                        ]), (function (param, param$1) {
                                        return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                                      return core_type(ctxt, param, param$1);
                                                    }), param, param$1);
                                      }), l);
                        } else {
                          return 0;
                        }
                      }), match[1], longident_loc, match[0]);
      case /* Pcl_structure */1 :
          return class_structure(ctxt, f, match[0]);
      case /* Pcl_fun */2 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "fun",
                              /* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@ ",
                                      1,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "->",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])
                                        ])])
                                ])
                            ]),
                          "fun@ %a@ ->@ %a"
                        ]), (function (param, param$1) {
                        return label_exp(ctxt, param, param$1);
                      }), /* tuple */[
                      match[0],
                      match[1],
                      match[2]
                    ], (function (param, param$1) {
                        return class_expr(ctxt, param, param$1);
                      }), match[3]);
      case /* Pcl_apply */3 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "((",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* ")" */41,
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* ")" */41,
                                                  /* End_of_format */0
                                                ])])
                                        ])
                                    ])])
                            ]),
                          "((%a)@ %a)"
                        ]), (function (param, param$1) {
                        return class_expr(ctxt, param, param$1);
                      }), match[0], (function (param, param$1) {
                        return list(undefined, undefined, undefined, (function (param, param$1) {
                                      return label_x_expression_param(ctxt, param, param$1);
                                    }), param, param$1);
                      }), match[1]);
      case /* Pcl_let */4 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@ ",
                                      1,
                                      0
                                    ]),
                                  /* String_literal */Block.__(11, [
                                      "in",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* End_of_format */0])
                                        ])
                                    ])
                                ])]),
                          "%a@ in@ %a"
                        ]), (function (param, param$1) {
                        return bindings(ctxt, param, param$1);
                      }), /* tuple */[
                      match[0],
                      match[1]
                    ], (function (param, param$1) {
                        return class_expr(ctxt, param, param$1);
                      }), match[2]);
      case /* Pcl_constraint */5 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "(" */40,
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Char_literal */Block.__(12, [
                                          /* ":" */58,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                      /* ")" */41,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])
                                    ])])
                            ]),
                          "(%a@ :@ %a)"
                        ]), (function (param, param$1) {
                        return class_expr(ctxt, param, param$1);
                      }), match[0], (function (param, param$1) {
                        return class_type(ctxt, param, param$1);
                      }), match[1]);
      case /* Pcl_extension */6 :
          return extension(ctxt, f, match[0]);
      case /* Pcl_open */7 :
          return Curry._5(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "let open",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* " " */32,
                                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                  " in",
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ])
                            ]),
                          "@[<2>let open%s %a in@;%a@]"
                        ]), match[0] ? "" : "!", longident_loc, match[1], (function (param, param$1) {
                        return class_expr(ctxt, param, param$1);
                      }), match[2]);
      
    }
  }
}

function attributes(ctxt, f, l) {
  return List.iter((function (param) {
                var ctxt$1 = ctxt;
                var f$1 = f;
                var param$1 = param;
                return Curry._3(Format.fprintf(f$1, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "[" */91,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Escaped_at */5,
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* "]" */93,
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ]),
                                "@[<2>[@@%s@ %a]@]"
                              ]), param$1[0].txt, (function (param, param$1) {
                              return payload(ctxt$1, param, param$1);
                            }), param$1[1]);
              }), l);
}

function constructor_declaration(ctxt, f, param) {
  var attrs = param[3];
  var res = param[2];
  var args = param[1];
  var name = param[0];
  var name$1 = name === "::" ? "(::)" : name;
  if (res !== undefined) {
    var r = res;
    return Curry._5(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* ":" */58,
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])])
                              ])
                          ])
                      ]),
                    "%s:@;%a@;%a"
                  ]), name$1, (function (f, param) {
                  if (param.tag) {
                    return Curry._4(Format.fprintf(f, /* Format */[
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "->",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])
                                              ])
                                          ])]),
                                    "%a@;->@;%a"
                                  ]), (function (param, param$1) {
                                  return record_declaration(ctxt, param, param$1);
                                }), param[0], (function (param, param$1) {
                                  return core_type1(ctxt, param, param$1);
                                }), r);
                  } else {
                    var l = param[0];
                    if (l) {
                      var partial_arg = /* Format */[
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* Char_literal */Block.__(12, [
                                /* "*" */42,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "@;*@;"
                      ];
                      return Curry._4(Format.fprintf(f, /* Format */[
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;",
                                                  1,
                                                  0
                                                ]),
                                              /* String_literal */Block.__(11, [
                                                  "->",
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                    ])
                                                ])
                                            ])]),
                                      "%a@;->@;%a"
                                    ]), (function (param, param$1) {
                                    return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                                  return core_type1(ctxt, param, param$1);
                                                }), param, param$1);
                                  }), l, (function (param, param$1) {
                                    return core_type1(ctxt, param, param$1);
                                  }), r);
                    } else {
                      return core_type1(ctxt, f, r);
                    }
                  }
                }), args, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), attrs);
  } else {
    return Curry._5(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ])])
                      ]),
                    "%s%a@;%a"
                  ]), name$1, (function (f, param) {
                  if (param.tag) {
                    return Curry._2(Format.fprintf(f, /* Format */[
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* String_literal */Block.__(11, [
                                            "of",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@;",
                                                    1,
                                                    0
                                                  ]),
                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                              ])
                                          ])
                                      ]),
                                    "@;of@;%a"
                                  ]), (function (param, param$1) {
                                  return record_declaration(ctxt, param, param$1);
                                }), param[0]);
                  } else {
                    var l = param[0];
                    if (l) {
                      var partial_arg = /* Format */[
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* Char_literal */Block.__(12, [
                                /* "*" */42,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "@;*@;"
                      ];
                      return Curry._2(Format.fprintf(f, /* Format */[
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "of",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])
                                        ]),
                                      "@;of@;%a"
                                    ]), (function (param, param$1) {
                                    return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                                  return core_type1(ctxt, param, param$1);
                                                }), param, param$1);
                                  }), l);
                    } else {
                      return /* () */0;
                    }
                  }
                }), args, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), attrs);
  }
}

function record_declaration(ctxt, f, lbls) {
  var type_record_field = function (f, pld) {
    return Curry._7(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<2>",
                                  /* End_of_format */0
                                ]),
                              "<2>"
                            ]]),
                        /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* ":" */58,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@;",
                                                    1,
                                                    0
                                                  ]),
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])])
                                              ])])
                                      ])
                                  ])
                              ])])
                      ]),
                    "@[<2>%a%s:@;%a@;%a@]"
                  ]), mutable_flag, pld.pld_mutable, pld.pld_name.txt, (function (param, param$1) {
                  return core_type(ctxt, param, param$1);
                }), pld.pld_type, (function (param, param$1) {
                  return attributes(ctxt, param, param$1);
                }), pld.pld_attributes);
  };
  var partial_arg = /* Format */[
    /* Char_literal */Block.__(12, [
        /* ";" */59,
        /* Formatting_lit */Block.__(17, [
            /* Force_newline */3,
            /* End_of_format */0
          ])
      ]),
    ";@\n"
  ];
  return Curry._2(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "{" */123,
                      /* Formatting_lit */Block.__(17, [
                          /* Force_newline */3,
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "}" */125,
                                  /* End_of_format */0
                                ])])
                        ])
                    ]),
                  "{@\n%a}"
                ]), (function (param, param$1) {
                return list(partial_arg, undefined, undefined, type_record_field, param, param$1);
              }), lbls);
}

function type_with_label(ctxt, f, param) {
  var c = param[1];
  var label = param[0];
  if (typeof label === "number") {
    return core_type1(ctxt, f, c);
  } else if (label.tag) {
    return Curry._3(Format.fprintf(f, /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "?" */63,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* ":" */58,
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ])
                          ])
                      ]),
                    "?%s:%a"
                  ]), label[0], (function (param, param$1) {
                  return core_type1(ctxt, param, param$1);
                }), c);
  } else {
    return Curry._3(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* ":" */58,
                            /* Alpha */Block.__(15, [/* End_of_format */0])
                          ])
                      ]),
                    "%s:%a"
                  ]), label[0], (function (param, param$1) {
                  return core_type1(ctxt, param, param$1);
                }), c);
  }
}

function core_type1(ctxt, f, x) {
  if (x.ptyp_attributes !== /* [] */0) {
    return core_type(ctxt, f, x);
  } else {
    var match = x.ptyp_desc;
    if (typeof match === "number") {
      return Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "_" */95,
                      /* End_of_format */0
                    ]),
                  "_"
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Ptyp_var */0 :
            var f$1 = f;
            var str = match[0];
            return Curry._1(Format.fprintf(f$1, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "'" */39,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "'%s"
                          ]), str);
        case /* Ptyp_tuple */2 :
            var partial_arg = /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@;",
                      1,
                      0
                    ]),
                  /* Char_literal */Block.__(12, [
                      /* "*" */42,
                      /* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@;",
                              1,
                              0
                            ]),
                          /* End_of_format */0
                        ])
                    ])
                ]),
              "@;*@;"
            ];
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "(%a)"
                          ]), (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return core_type1(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[0]);
        case /* Ptyp_constr */3 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* End_of_format */0])]),
                            "%a%a"
                          ]), (function (f, l) {
                          if (l) {
                            if (l[1]) {
                              return list(/* Format */[
                                          /* Char_literal */Block.__(12, [
                                              /* "," */44,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* End_of_format */0
                                                ])
                                            ]),
                                          ",@;"
                                        ], /* Format */[
                                          /* Char_literal */Block.__(12, [
                                              /* "(" */40,
                                              /* End_of_format */0
                                            ]),
                                          "("
                                        ], /* Format */[
                                          /* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* End_of_format */0
                                                ])
                                            ]),
                                          ")@;"
                                        ], (function (param, param$1) {
                                            return core_type(ctxt, param, param$1);
                                          }), f, l);
                            } else {
                              return Curry._2(Format.fprintf(f, /* Format */[
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* End_of_format */0
                                                    ])]),
                                              "%a@;"
                                            ]), (function (param, param$1) {
                                            return core_type1(ctxt, param, param$1);
                                          }), l[0]);
                            }
                          } else {
                            return /* () */0;
                          }
                        }), match[1], longident_loc, match[0]);
        case /* Ptyp_object */4 :
            var l = match[0];
            var core_field_type = function (f, param) {
              if (param.tag) {
                return Curry._2(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hov2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hov2>"
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])])
                                  ]),
                                "@[<hov2>%a@ @]"
                              ]), (function (param, param$1) {
                              return core_type(ctxt, param, param$1);
                            }), param[0]);
              } else {
                return Curry._5(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hov2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hov2>"
                                        ]]),
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            ": ",
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@ ",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])])
                                                  ])])
                                          ])
                                      ])
                                  ]),
                                "@[<hov2>%s: %a@ %a@ @]"
                              ]), param[0].txt, (function (param, param$1) {
                              return core_type(ctxt, param, param$1);
                            }), param[2], (function (param, param$1) {
                              return attributes(ctxt, param, param$1);
                            }), param[1]);
              }
            };
            var field_var = function (f, param) {
              if (param) {
                if (l) {
                  return Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  " ;..",
                                  /* End_of_format */0
                                ]),
                              " ;.."
                            ]);
                } else {
                  return Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "..",
                                  /* End_of_format */0
                                ]),
                              ".."
                            ]);
                }
              } else {
                return /* () */0;
              }
            };
            var partial_arg$1 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ";" */59,
                  /* End_of_format */0
                ]),
              ";"
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "<" */60,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* String_literal */Block.__(11, [
                                                        "> ",
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])])])
                                      ])
                                  ])
                              ]),
                            "@[<hov2><@ %a%a@ > @]"
                          ]), (function (param, param$1) {
                          return list(partial_arg$1, undefined, undefined, core_field_type, param, param$1);
                        }), l, field_var, match[1]);
        case /* Ptyp_class */5 :
            var partial_arg$2 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* ")" */41,
                  /* End_of_format */0
                ]),
              ")"
            ];
            var partial_arg$3 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "(" */40,
                  /* End_of_format */0
                ]),
              "("
            ];
            var partial_arg$4 = /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "," */44,
                  /* End_of_format */0
                ]),
              ","
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "#" */35,
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "@[<hov2>%a#%a@]"
                          ]), (function (param, param$1) {
                          return list(partial_arg$4, partial_arg$3, partial_arg$2, (function (param, param$1) {
                                        return core_type(ctxt, param, param$1);
                                      }), param, param$1);
                        }), match[1], longident_loc, match[0]);
        case /* Ptyp_variant */7 :
            var low = match[2];
            var closed = match[1];
            var type_variant_helper = function (f, x) {
              if (x.tag) {
                return core_type(ctxt, f, x[0]);
              } else {
                var ctl = x[3];
                return Curry._6(Format.fprintf(f, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<2>",
                                              /* End_of_format */0
                                            ]),
                                          "<2>"
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@;",
                                                    1,
                                                    0
                                                  ]),
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])])
                                              ])])])
                                  ]),
                                "@[<2>%a%a@;%a@]"
                              ]), string_quot, x[0].txt, (function (f, l) {
                              if (l) {
                                var partial_arg = /* Format */[
                                  /* Char_literal */Block.__(12, [
                                      /* "&" */38,
                                      /* End_of_format */0
                                    ]),
                                  "&"
                                ];
                                return Curry._2(Format.fprintf(f, /* Format */[
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* String_literal */Block.__(11, [
                                                        "of",
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@;",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                          ])
                                                      ])
                                                  ]),
                                                "@;of@;%a"
                                              ]), (function (param, param$1) {
                                              return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                                            return core_type(ctxt, param, param$1);
                                                          }), param, param$1);
                                            }), ctl);
                              } else {
                                return /* () */0;
                              }
                            }), ctl, (function (param, param$1) {
                              return attributes(ctxt, param, param$1);
                            }), x[1]);
              }
            };
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "[" */91,
                                    /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* "]" */93,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])])
                                  ])
                              ]),
                            "@[<2>[%a%a]@]"
                          ]), (function (f, l) {
                          if (l) {
                            var partial_arg = /* Format */[
                              /* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@;<1 -2>",
                                      1,
                                      -2
                                    ]),
                                  /* String_literal */Block.__(11, [
                                      "| ",
                                      /* End_of_format */0
                                    ])
                                ]),
                              "@;<1 -2>| "
                            ];
                            return Curry._3(Format.fprintf(f, /* Format */[
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])
                                              ]),
                                            "%s@;%a"
                                          ]), closed ? ">" : (
                                          low !== undefined ? "<" : ""
                                        ), (function (param, param$1) {
                                          return list(partial_arg, undefined, undefined, type_variant_helper, param, param$1);
                                        }), l);
                          } else if (closed) {
                            return Format.fprintf(f, /* Format */[
                                        /* Char_literal */Block.__(12, [
                                            /* ">" */62,
                                            /* End_of_format */0
                                          ]),
                                        ">"
                                      ]);
                          } else {
                            return /* () */0;
                          }
                        }), match[0], (function (f, low) {
                          if (low !== undefined) {
                            var xs = low;
                            if (xs) {
                              return Curry._2(Format.fprintf(f, /* Format */[
                                              /* Char_literal */Block.__(12, [
                                                  /* ">" */62,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                    ])
                                                ]),
                                              ">@ %a"
                                            ]), (function (param, param$1) {
                                            return list(undefined, undefined, undefined, string_quot, param, param$1);
                                          }), xs);
                            } else {
                              return /* () */0;
                            }
                          } else {
                            return /* () */0;
                          }
                        }), low);
        case /* Ptyp_package */9 :
            var match$1 = match[0];
            var cstrs = match$1[1];
            var lid = match$1[0];
            var aux = function (f, param) {
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "type ",
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* "=" */61,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])
                                        ])])
                                ]),
                              "type %a@ =@ %a"
                            ]), longident_loc, param[0], (function (param, param$1) {
                            return core_type(ctxt, param, param$1);
                          }), param[1]);
            };
            if (cstrs) {
              var partial_arg$5 = /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Break */Block.__(0, [
                        "@ ",
                        1,
                        0
                      ]),
                    /* String_literal */Block.__(11, [
                        "and",
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "@ and@ "
              ];
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "(module",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* String_literal */Block.__(11, [
                                                      "with",
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                  /* ")" */41,
                                                                  /* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])
                                                                ])])
                                                        ])
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>(module@ %a@ with@ %a)@]"
                            ]), longident_loc, lid, (function (param, param$1) {
                            return list(partial_arg$5, undefined, undefined, aux, param, param$1);
                          }), cstrs);
            } else {
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hov2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hov2>"
                                      ]]),
                                  /* String_literal */Block.__(11, [
                                      "(module",
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* ")" */41,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])
                                                ])])
                                        ])
                                    ])
                                ]),
                              "@[<hov2>(module@ %a)@]"
                            ]), longident_loc, lid);
            }
        case /* Ptyp_extension */10 :
            return extension(ctxt, f, match[0]);
        default:
          return paren(undefined, undefined, true, (function (param, param$1) {
                        return core_type(ctxt, param, param$1);
                      }), f, x);
      }
    }
  }
}

function binding(ctxt, f, param) {
  var x = param.pvb_expr;
  var p = param.pvb_pat;
  var pp_print_pexp_function = function (f, x) {
    if (x.pexp_attributes !== /* [] */0) {
      return Curry._2(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "=" */61,
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@;",
                                  1,
                                  0
                                ]),
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])
                        ]),
                      "=@;%a"
                    ]), (function (param, param$1) {
                    return expression(ctxt, param, param$1);
                  }), x);
    } else {
      var match = x.pexp_desc;
      if (typeof match !== "number") {
        switch (match.tag | 0) {
          case /* Pexp_fun */4 :
              var e = match[3];
              var p = match[2];
              var label = match[0];
              if (label === /* Nolabel */0) {
                return Curry._4(Format.fprintf(f, /* Format */[
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])]),
                                "%a@ %a"
                              ]), (function (param, param$1) {
                              return simple_pattern(ctxt, param, param$1);
                            }), p, pp_print_pexp_function, e);
              } else {
                return Curry._4(Format.fprintf(f, /* Format */[
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])]),
                                "%a@ %a"
                              ]), (function (param, param$1) {
                              return label_exp(ctxt, param, param$1);
                            }), /* tuple */[
                            label,
                            match[1],
                            p
                          ], pp_print_pexp_function, e);
              }
          case /* Pexp_newtype */31 :
              return Curry._3(Format.fprintf(f, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "(type",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "(type@ %s)@ %a"
                            ]), match[0].txt, pp_print_pexp_function, match[1]);
          default:
            
        }
      }
      return Curry._2(Format.fprintf(f, /* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "=" */61,
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@;",
                                  1,
                                  0
                                ]),
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])
                        ]),
                      "=@;%a"
                    ]), (function (param, param$1) {
                    return expression(ctxt, param, param$1);
                  }), x);
    }
  };
  var is_desugared_gadt = function (p, e) {
    var match = p.ppat_desc;
    var gadt_pattern;
    if (typeof match === "number" || match.tag !== /* Ppat_constraint */10) {
      gadt_pattern = undefined;
    } else {
      var pat = match[0];
      var tmp = pat.ppat_desc;
      if (typeof tmp === "number" || tmp.tag) {
        gadt_pattern = undefined;
      } else {
        var match$1 = match[1].ptyp_desc;
        gadt_pattern = typeof match$1 === "number" || !(match$1.tag === /* Ptyp_poly */8 && !p.ppat_attributes) ? undefined : /* tuple */[
            pat,
            match$1[0],
            match$1[1]
          ];
      }
    }
    var gadt_exp = function (_tyvars, _e) {
      while(true) {
        var e = _e;
        var tyvars = _tyvars;
        var match = e.pexp_desc;
        if (typeof match === "number") {
          return ;
        } else {
          switch (match.tag | 0) {
            case /* Pexp_constraint */19 :
                if (e.pexp_attributes) {
                  return ;
                } else {
                  return /* tuple */[
                          List.rev(tyvars),
                          match[0],
                          match[1]
                        ];
                }
            case /* Pexp_newtype */31 :
                if (e.pexp_attributes) {
                  return ;
                } else {
                  _e = match[1];
                  _tyvars = /* :: */[
                    match[0],
                    tyvars
                  ];
                  continue ;
                }
            default:
              return ;
          }
        }
      };
    };
    var gadt_exp$1 = gadt_exp(/* [] */0, e);
    if (gadt_pattern !== undefined && gadt_exp$1 !== undefined) {
      var match$2 = gadt_exp$1;
      var e_ct = match$2[2];
      var e_tyvars = match$2[0];
      var match$3 = gadt_pattern;
      var pt_tyvars = match$3[1];
      if (Caml_obj.caml_equal(List.map((function (v) {
                    return v.txt;
                  }), pt_tyvars), List.map((function (v) {
                    return v.txt;
                  }), e_tyvars))) {
        var ety = Ast_helper.Typ.varify_constructors(e_tyvars, e_ct);
        if (Caml_obj.caml_equal(ety, match$3[2])) {
          return /* tuple */[
                  match$3[0],
                  pt_tyvars,
                  e_ct,
                  match$2[1]
                ];
        } else {
          return ;
        }
      } else {
        return ;
      }
    }
    
  };
  if (x.pexp_attributes !== /* [] */0) {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* Char_literal */Block.__(12, [
                                /* "=" */61,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                  ])
                              ])
                          ])]),
                    "%a@;=@;%a"
                  ]), (function (param, param$1) {
                  return pattern(ctxt, param, param$1);
                }), p, (function (param, param$1) {
                  return expression(ctxt, param, param$1);
                }), x);
  } else {
    var match = is_desugared_gadt(p, x);
    if (match !== undefined) {
      var match$1 = match;
      var tyvars = match$1[1];
      var p$1 = match$1[0];
      if (tyvars) {
        var partial_arg = /* Format */[
          /* Formatting_lit */Block.__(17, [
              /* Break */Block.__(0, [
                  "@;",
                  1,
                  0
                ]),
              /* End_of_format */0
            ]),
          "@;"
        ];
        return Curry._8(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    ": type",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* "." */46,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@;",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Char_literal */Block.__(12, [
                                                                /* "=" */61,
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Break */Block.__(0, [
                                                                        "@;",
                                                                        1,
                                                                        0
                                                                      ]),
                                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                  ])
                                                              ])
                                                          ])])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])]),
                        "%a@;: type@;%a.@;%a@;=@;%a"
                      ]), (function (param, param$1) {
                      return simple_pattern(ctxt, param, param$1);
                    }), p$1, (function (param, param$1) {
                      return list(partial_arg, undefined, undefined, Format.pp_print_string, param, param$1);
                    }), List.map((function (v) {
                          return v.txt;
                        }), tyvars), (function (param, param$1) {
                      return core_type(ctxt, param, param$1);
                    }), match$1[2], (function (param, param$1) {
                      return expression(ctxt, param, param$1);
                    }), match$1[3]);
      } else {
        return Curry._6(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    ": ",
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* "=" */61,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])
                                              ])
                                          ])])
                                  ])
                              ])]),
                        "%a@;: %a@;=@;%a"
                      ]), (function (param, param$1) {
                      return simple_pattern(ctxt, param, param$1);
                    }), p$1, (function (param, param$1) {
                      return core_type(ctxt, param, param$1);
                    }), match$1[2], (function (param, param$1) {
                      return expression(ctxt, param, param$1);
                    }), match$1[3]);
      }
    } else {
      var match$2 = p.ppat_desc;
      if (typeof match$2 !== "number") {
        switch (match$2.tag | 0) {
          case /* Ppat_var */0 :
              if (!p.ppat_attributes) {
                return Curry._4(Format.fprintf(f, /* Format */[
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])]),
                                "%a@ %a"
                              ]), (function (param, param$1) {
                              return simple_pattern(ctxt, param, param$1);
                            }), p, pp_print_pexp_function, x);
              }
              break;
          case /* Ppat_constraint */10 :
              if (!p.ppat_attributes) {
                var ty = match$2[1];
                var p$2 = match$2[0];
                var exit = 0;
                var tmp = ty.ptyp_desc;
                if (typeof tmp === "number" || !(tmp.tag === /* Ptyp_poly */8 && !ty.ptyp_attributes)) {
                  exit = 2;
                } else {
                  return Curry._6(Format.fprintf(f, /* Format */[
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@;",
                                              1,
                                              0
                                            ]),
                                          /* Char_literal */Block.__(12, [
                                              /* ":" */58,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Char_literal */Block.__(12, [
                                                              /* "=" */61,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@;",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])]),
                                  "%a@;:@;%a@;=@;%a"
                                ]), (function (param, param$1) {
                                return simple_pattern(ctxt, param, param$1);
                              }), p$2, (function (param, param$1) {
                                return core_type(ctxt, param, param$1);
                              }), ty, (function (param, param$1) {
                                return expression(ctxt, param, param$1);
                              }), x);
                }
                if (exit === 2) {
                  return Curry._6(Format.fprintf(f, /* Format */[
                                  /* Char_literal */Block.__(12, [
                                      /* "(" */40,
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;",
                                                  1,
                                                  0
                                                ]),
                                              /* Char_literal */Block.__(12, [
                                                  /* ":" */58,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                              /* ")" */41,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@;",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Char_literal */Block.__(12, [
                                                                      /* "=" */61,
                                                                      /* Formatting_lit */Block.__(17, [
                                                                          /* Break */Block.__(0, [
                                                                              "@;",
                                                                              1,
                                                                              0
                                                                            ]),
                                                                          /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                        ])
                                                                    ])
                                                                ])
                                                            ])])
                                                    ])
                                                ])
                                            ])])
                                    ]),
                                  "(%a@;:@;%a)@;=@;%a"
                                ]), (function (param, param$1) {
                                return simple_pattern(ctxt, param, param$1);
                              }), p$2, (function (param, param$1) {
                                return core_type(ctxt, param, param$1);
                              }), ty, (function (param, param$1) {
                                return expression(ctxt, param, param$1);
                              }), x);
                }
                
              }
              break;
          default:
            
        }
      }
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@;",
                                  1,
                                  0
                                ]),
                              /* Char_literal */Block.__(12, [
                                  /* "=" */61,
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@;",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                    ])
                                ])
                            ])]),
                      "%a@;=@;%a"
                    ]), (function (param, param$1) {
                    return pattern(ctxt, param, param$1);
                  }), p, (function (param, param$1) {
                    return expression(ctxt, param, param$1);
                  }), x);
    }
  }
}

function structure_item(ctxt, f, x) {
  var match = x.pstr_desc;
  switch (match.tag | 0) {
    case /* Pstr_eval */0 :
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                ";;",
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ])])
                              ])
                          ]),
                        "@[<hov2>;;%a@]%a"
                      ]), (function (param, param$1) {
                      return expression(ctxt, param, param$1);
                    }), match[0], (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), match[1]);
    case /* Pstr_value */1 :
        return Curry._2(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<2>",
                                      /* End_of_format */0
                                    ]),
                                  "<2>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Close_box */0,
                                    /* End_of_format */0
                                  ])])
                          ]),
                        "@[<2>%a@]"
                      ]), (function (param, param$1) {
                      return bindings(ctxt, param, param$1);
                    }), /* tuple */[
                    match[0],
                    match[1]
                  ]);
    case /* Pstr_primitive */2 :
        var vd = match[0];
        return Curry._6(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "external",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                          ])])
                                                  ])
                                              ])
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<hov2>external@ %a@ :@ %a@]%a"
                      ]), protect_ident, vd.pval_name.txt, (function (param, param$1) {
                      return value_description(ctxt, param, param$1);
                    }), vd, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), vd.pval_attributes);
    case /* Pstr_type */3 :
        var l = match[1];
        if (l) {
          return type_def_list(ctxt, f, /* tuple */[
                      match[0],
                      l
                    ]);
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "pprintast.ml",
                  1216,
                  25
                ]
              ];
        }
    case /* Pstr_typext */4 :
        return type_extension(ctxt, f, match[0]);
    case /* Pstr_exception */5 :
        return exception_declaration(ctxt, f, match[0]);
    case /* Pstr_module */6 :
        var x$1 = match[0];
        var module_helper = function (_me) {
          while(true) {
            var me = _me;
            var match = me.pmod_desc;
            if (match.tag === /* Pmod_functor */2 && !me.pmod_attributes) {
              var mt = match[1];
              if (mt === undefined) {
                Format.fprintf(f, /* Format */[
                      /* String_literal */Block.__(11, [
                          "()",
                          /* End_of_format */0
                        ]),
                      "()"
                    ]);
              } else {
                Misc.may(Curry._2(Format.fprintf(f, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "(" */40,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* ":" */58,
                                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                  /* ")" */41,
                                                  /* End_of_format */0
                                                ])])
                                        ])
                                    ])
                                ]),
                              "(%s:%a)"
                            ]), match[0].txt, (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          })), mt);
              }
              _me = match[2];
              continue ;
            } else {
              return me;
            }
          };
        };
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "module ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<hov2>module %s%a@]%a"
                      ]), x$1.pmb_name.txt, (function (f, me) {
                      var me$1 = module_helper(me);
                      var match = me$1.pmod_desc;
                      if (match.tag === /* Pmod_constraint */4) {
                        var mt = match[1];
                        var exit = 0;
                        switch (mt.pmty_desc.tag | 0) {
                          case /* Pmty_ident */0 :
                          case /* Pmty_signature */1 :
                              exit = 2;
                              break;
                          default:
                            
                        }
                        if (exit === 2 && !me$1.pmod_attributes) {
                          return Curry._4(Format.fprintf(f, /* Format */[
                                          /* String_literal */Block.__(11, [
                                              " :",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@;",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Char_literal */Block.__(12, [
                                                              /* "=" */61,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@;",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Break */Block.__(0, [
                                                                              "@;",
                                                                              1,
                                                                              0
                                                                            ]),
                                                                          /* End_of_format */0
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ]),
                                          " :@;%a@;=@;%a@;"
                                        ]), (function (param, param$1) {
                                        return module_type(ctxt, param, param$1);
                                      }), mt, (function (param, param$1) {
                                        return module_expr(ctxt, param, param$1);
                                      }), match[0]);
                        }
                        
                      }
                      return Curry._2(Format.fprintf(f, /* Format */[
                                      /* String_literal */Block.__(11, [
                                          " =",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                            ])
                                        ]),
                                      " =@ %a"
                                    ]), (function (param, param$1) {
                                    return module_expr(ctxt, param, param$1);
                                  }), me$1);
                    }), x$1.pmb_expr, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), x$1.pmb_attributes);
    case /* Pstr_recmodule */7 :
        var decls = match[0];
        if (decls) {
          var pmb = decls[0];
          var match$1 = pmb.pmb_expr.pmod_desc;
          if (match$1.tag === /* Pmod_constraint */4) {
            return Curry.app(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hv>",
                                          /* End_of_format */0
                                        ]),
                                      "<hv>"
                                    ]]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hov2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hov2>"
                                        ]]),
                                    /* String_literal */Block.__(11, [
                                        "module",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "rec",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* ":" */58,
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Break */Block.__(0, [
                                                                        "@ ",
                                                                        1,
                                                                        0
                                                                      ]),
                                                                    /* Char_literal */Block.__(12, [
                                                                        /* "=" */61,
                                                                        /* Formatting_lit */Block.__(17, [
                                                                            /* Break */Block.__(0, [
                                                                                "@ ",
                                                                                1,
                                                                                0
                                                                              ]),
                                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                    /* Close_box */0,
                                                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                            /* Break */Block.__(0, [
                                                                                                "@ ",
                                                                                                1,
                                                                                                0
                                                                                              ]),
                                                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                                    /* Close_box */0,
                                                                                                    /* End_of_format */0
                                                                                                  ])])
                                                                                          ])])
                                                                                  ])])
                                                                          ])
                                                                      ])
                                                                  ])])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@[<hv>@[<hov2>module@ rec@ %s:%a@ =@ %a@]%a@ %a@]"
                          ]), [
                        pmb.pmb_name.txt,
                        (function (param, param$1) {
                            return module_type(ctxt, param, param$1);
                          }),
                        match$1[1],
                        (function (param, param$1) {
                            return module_expr(ctxt, param, param$1);
                          }),
                        match$1[0],
                        (function (param, param$1) {
                            return item_attributes(ctxt, param, param$1);
                          }),
                        pmb.pmb_attributes,
                        (function (f, l2) {
                            return List.iter((function (param) {
                                          var f$1 = f;
                                          var pmb = param;
                                          var match = pmb.pmb_expr.pmod_desc;
                                          if (match.tag === /* Pmod_constraint */4) {
                                            return Curry._7(Format.fprintf(f$1, /* Format */[
                                                            /* Formatting_gen */Block.__(18, [
                                                                /* Open_box */Block.__(1, [/* Format */[
                                                                      /* String_literal */Block.__(11, [
                                                                          "<hov2>",
                                                                          /* End_of_format */0
                                                                        ]),
                                                                      "<hov2>"
                                                                    ]]),
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Break */Block.__(0, [
                                                                        "@ ",
                                                                        1,
                                                                        0
                                                                      ]),
                                                                    /* String_literal */Block.__(11, [
                                                                        "and",
                                                                        /* Formatting_lit */Block.__(17, [
                                                                            /* Break */Block.__(0, [
                                                                                "@ ",
                                                                                1,
                                                                                0
                                                                              ]),
                                                                            /* String */Block.__(2, [
                                                                                /* No_padding */0,
                                                                                /* Char_literal */Block.__(12, [
                                                                                    /* ":" */58,
                                                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                            /* Break */Block.__(0, [
                                                                                                "@ ",
                                                                                                1,
                                                                                                0
                                                                                              ]),
                                                                                            /* Char_literal */Block.__(12, [
                                                                                                /* "=" */61,
                                                                                                /* Formatting_lit */Block.__(17, [
                                                                                                    /* Break */Block.__(0, [
                                                                                                        "@ ",
                                                                                                        1,
                                                                                                        0
                                                                                                      ]),
                                                                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                                            /* Close_box */0,
                                                                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                                                          ])])
                                                                                                  ])
                                                                                              ])
                                                                                          ])])
                                                                                  ])
                                                                              ])
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ]),
                                                            "@[<hov2>@ and@ %s:%a@ =@ %a@]%a"
                                                          ]), pmb.pmb_name.txt, (function (param, param$1) {
                                                          return module_type(ctxt, param, param$1);
                                                        }), match[1], (function (param, param$1) {
                                                          return module_expr(ctxt, param, param$1);
                                                        }), match[0], (function (param, param$1) {
                                                          return item_attributes(ctxt, param, param$1);
                                                        }), pmb.pmb_attributes);
                                          } else {
                                            throw [
                                                  Caml_builtin_exceptions.assert_failure,
                                                  /* tuple */[
                                                    "pprintast.ml",
                                                    1315,
                                                    15
                                                  ]
                                                ];
                                          }
                                        }), l2);
                          }),
                        decls[1]
                      ]);
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "pprintast.ml",
                    1325,
                    13
                  ]
                ];
          }
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "pprintast.ml",
                  1325,
                  13
                ]
              ];
        }
    case /* Pstr_modtype */8 :
        var match$2 = match[0];
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "type",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hov2>module@ type@ %s%a@]%a"
                      ]), match$2.pmtd_name.txt, (function (f, md) {
                      if (md !== undefined) {
                        Format.pp_print_space(f, /* () */0);
                        return Curry._2(Format.fprintf(f, /* Format */[
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* "=" */61,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])
                                              ])
                                          ]),
                                        "@ =@ %a"
                                      ]), (function (param, param$1) {
                                      return module_type(ctxt, param, param$1);
                                    }), md);
                      } else {
                        return /* () */0;
                      }
                    }), match$2.pmtd_type, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), match$2.pmtd_attributes);
    case /* Pstr_open */9 :
        var od = match[0];
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<2>",
                                      /* End_of_format */0
                                    ]),
                                  "<2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "open",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@;",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                              ])])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<2>open%s@;%a@]%a"
                      ]), od.popen_override ? "" : "!", longident_loc, od.popen_lid, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), od.popen_attributes);
    case /* Pstr_class */10 :
        var l$1 = match[0];
        var extract_class_args = function (cl) {
          var loop = function (_acc, _cl) {
            while(true) {
              var cl = _cl;
              var acc = _acc;
              var match = cl.pcl_desc;
              if (match.tag === /* Pcl_fun */2 && !cl.pcl_attributes) {
                _cl = match[3];
                _acc = /* :: */[
                  /* tuple */[
                    match[0],
                    match[1],
                    match[2]
                  ],
                  acc
                ];
                continue ;
              } else {
                return /* tuple */[
                        List.rev(acc),
                        cl
                      ];
              }
            };
          };
          var match = loop(/* [] */0, cl);
          var cl$1 = match[1];
          var match$1 = cl$1.pcl_desc;
          var match$2;
          match$2 = match$1.tag === /* Pcl_constraint */5 && !cl$1.pcl_attributes ? /* tuple */[
              match$1[1],
              match$1[0]
            ] : /* tuple */[
              undefined,
              cl$1
            ];
          return /* tuple */[
                  match[0],
                  match$2[0],
                  match$2[1]
                ];
        };
        var class_constraint = function (f, ct) {
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              ": ",
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* End_of_format */0,
                                        ""
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* Char_literal */Block.__(12, [
                                              /* " " */32,
                                              /* End_of_format */0
                                            ])
                                        ])])
                                ])
                            ]),
                          ": @[%a@] "
                        ]), (function (param, param$1) {
                        return class_type(ctxt, param, param$1);
                      }), ct);
        };
        var class_declaration = function (kwd, f, x) {
          var match = extract_class_args(x.pci_expr);
          return Curry.app(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Char_literal */Block.__(12, [
                                                      /* " " */32,
                                                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                                  /* "=" */61,
                                                                  /* Formatting_lit */Block.__(17, [
                                                                      /* Break */Block.__(0, [
                                                                          "@;",
                                                                          1,
                                                                          0
                                                                        ]),
                                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                              /* Close_box */0,
                                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                            ])])
                                                                    ])
                                                                ])])])
                                                    ])
                                                ])])])
                                    ])
                                ])
                            ]),
                          "@[<2>%s %a%a%s %a%a=@;%a@]%a"
                        ]), [
                      kwd,
                      virtual_flag,
                      x.pci_virt,
                      (function (param, param$1) {
                          return class_params_def(ctxt, param, param$1);
                        }),
                      x.pci_params,
                      x.pci_name.txt,
                      (function (param, param$1) {
                          return list(undefined, undefined, undefined, (function (param, param$1) {
                                        return label_exp(ctxt, param, param$1);
                                      }), param, param$1);
                        }),
                      match[0],
                      (function (param, param$1) {
                          return option(undefined, undefined, class_constraint, param, param$1);
                        }),
                      match[1],
                      (function (param, param$1) {
                          return class_expr(ctxt, param, param$1);
                        }),
                      match[2],
                      (function (param, param$1) {
                          return item_attributes(ctxt, param, param$1);
                        }),
                      x.pci_attributes
                    ]);
        };
        if (l$1) {
          var xs = l$1[1];
          var x$2 = l$1[0];
          if (xs) {
            var partial_arg = /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@,",
                      0,
                      0
                    ]),
                  /* End_of_format */0
                ]),
              "@,"
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<v>",
                                          /* End_of_format */0
                                        ]),
                                      "<v>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@,",
                                            0,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "@[<v>%a@,%a@]"
                          ]), (function (param, param$1) {
                          return class_declaration("class", param, param$1);
                        }), x$2, (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return class_declaration("and", param, param$1);
                                      }), param, param$1);
                        }), xs);
          } else {
            return class_declaration("class", f, x$2);
          }
        } else {
          return /* () */0;
        }
    case /* Pstr_class_type */11 :
        return class_type_declaration_list(ctxt, f, match[0]);
    case /* Pstr_include */12 :
        var incl = match[0];
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "include",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<hov2>include@ %a@]%a"
                      ]), (function (param, param$1) {
                      return module_expr(ctxt, param, param$1);
                    }), incl.pincl_mod, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), incl.pincl_attributes);
    case /* Pstr_attribute */13 :
        return floating_attribute(ctxt, f, match[0]);
    case /* Pstr_extension */14 :
        item_extension(ctxt, f, match[0]);
        return item_attributes(ctxt, f, match[1]);
    
  }
}

function expression2(ctxt, f, x) {
  if (x.pexp_attributes !== /* [] */0) {
    return expression(ctxt, f, x);
  } else {
    var match = x.pexp_desc;
    if (typeof match === "number") {
      return simple_expr(ctxt, f, x);
    } else {
      switch (match.tag | 0) {
        case /* Pexp_field */12 :
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "." */46,
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "@[<hov2>%a.%a@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[0], longident_loc, match[1]);
        case /* Pexp_send */21 :
            return Curry._3(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "#" */35,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])])
                              ]),
                            "@[<hov2>%a#%s@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match[0], match[1].txt);
        default:
          return simple_expr(ctxt, f, x);
      }
    }
  }
}

function signature(ctxt, f, x) {
  return list(/* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Force_newline */3,
                  /* End_of_format */0
                ]),
              "@\n"
            ], undefined, undefined, (function (param, param$1) {
                return signature_item(ctxt, param, param$1);
              }), f, x);
}

function structure(ctxt, f, x) {
  return list(/* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Force_newline */3,
                  /* End_of_format */0
                ]),
              "@\n"
            ], undefined, undefined, (function (param, param$1) {
                return structure_item(ctxt, param, param$1);
              }), f, x);
}

function pattern1(ctxt, f, x) {
  var pattern_list_helper = function (f, p) {
    var match = p.ppat_desc;
    if (typeof match === "number" || match.tag !== /* Ppat_construct */5) {
      return pattern1(ctxt, f, p);
    } else {
      var match$1 = match[0].txt;
      switch (match$1.tag | 0) {
        case /* Lident */0 :
            if (match$1[0] === "::") {
              var match$2 = match[1];
              if (match$2 !== undefined) {
                var match$3 = match$2.ppat_desc;
                if (typeof match$3 === "number" || match$3.tag !== /* Ppat_tuple */4) {
                  return pattern1(ctxt, f, p);
                } else {
                  var match$4 = match$3[0];
                  if (match$4) {
                    var match$5 = match$4[1];
                    if (match$5 && !(match$5[1] || p.ppat_attributes)) {
                      return Curry._4(Format.fprintf(f, /* Format */[
                                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                              "::",
                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                            ])]),
                                      "%a::%a"
                                    ]), (function (param, param$1) {
                                    return simple_pattern(ctxt, param, param$1);
                                  }), match$4[0], pattern_list_helper, match$5[0]);
                    } else {
                      return pattern1(ctxt, f, p);
                    }
                  } else {
                    return pattern1(ctxt, f, p);
                  }
                }
              } else {
                return pattern1(ctxt, f, p);
              }
            } else {
              return pattern1(ctxt, f, p);
            }
        case /* Ldot */1 :
        case /* Lapply */2 :
            return pattern1(ctxt, f, p);
        
      }
    }
  };
  if (x.ppat_attributes !== /* [] */0) {
    return pattern(ctxt, f, x);
  } else {
    var match = x.ppat_desc;
    if (typeof match === "number") {
      return simple_pattern(ctxt, f, x);
    } else {
      switch (match.tag | 0) {
        case /* Ppat_construct */5 :
            var li = match[0];
            var txt = li.txt;
            switch (txt.tag | 0) {
              case /* Lident */0 :
                  switch (txt[0]) {
                    case "()" :
                    case "[]" :
                        return simple_pattern(ctxt, f, x);
                    default:
                      
                  }
                  break;
              case /* Ldot */1 :
              case /* Lapply */2 :
                  break;
              
            }
            var po = match[1];
            if (Caml_obj.caml_equal(txt, /* Lident */Block.__(0, ["::"]))) {
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Alpha */Block.__(15, [/* End_of_format */0]),
                              "%a"
                            ]), pattern_list_helper, x);
            } else if (po !== undefined) {
              return Curry._4(Format.fprintf(f, /* Format */[
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@;",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                    ])]),
                              "%a@;%a"
                            ]), longident_loc, li, (function (param, param$1) {
                            return simple_pattern(ctxt, param, param$1);
                          }), po);
            } else {
              return Curry._2(Format.fprintf(f, /* Format */[
                              /* Alpha */Block.__(15, [/* End_of_format */0]),
                              "%a"
                            ]), longident_loc, li);
            }
        case /* Ppat_variant */6 :
            var match$1 = match[1];
            if (match$1 !== undefined) {
              return Curry._3(Format.fprintf(f, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<2>",
                                            /* End_of_format */0
                                          ]),
                                        "<2>"
                                      ]]),
                                  /* Char_literal */Block.__(12, [
                                      /* "`" */96,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<2>`%s@;%a@]"
                            ]), match[0], (function (param, param$1) {
                            return simple_pattern(ctxt, param, param$1);
                          }), match$1);
            } else {
              return simple_pattern(ctxt, f, x);
            }
        default:
          return simple_pattern(ctxt, f, x);
      }
    }
  }
}

function signature_item(ctxt, f, x) {
  var match = x.psig_desc;
  switch (match.tag | 0) {
    case /* Psig_value */0 :
        var vd = match[0];
        var intro = vd.pval_prim === /* [] */0 ? "val" : "external";
        return Curry._7(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<2>",
                                      /* End_of_format */0
                                    ]),
                                  "<2>"
                                ]]),
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                          ])])
                                                  ])
                                              ])
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<2>%s@ %a@ :@ %a@]%a"
                      ]), intro, protect_ident, vd.pval_name.txt, (function (param, param$1) {
                      return value_description(ctxt, param, param$1);
                    }), vd, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), vd.pval_attributes);
    case /* Psig_type */1 :
        return type_def_list(ctxt, f, /* tuple */[
                    match[0],
                    match[1]
                  ]);
    case /* Psig_typext */2 :
        return type_extension(ctxt, f, match[0]);
    case /* Psig_exception */3 :
        return exception_declaration(ctxt, f, match[0]);
    case /* Psig_module */4 :
        var pmd = match[0];
        var match$1 = pmd.pmd_type;
        var match$2 = match$1.pmty_desc;
        if (match$2.tag === /* Pmty_alias */6 && !match$1.pmty_attributes) {
          return Curry._5(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hov>",
                                        /* End_of_format */0
                                      ]),
                                    "<hov>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "module",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Char_literal */Block.__(12, [
                                                  /* "=" */61,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                            ])])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "@[<hov>module@ %s@ =@ %a@]%a"
                        ]), pmd.pmd_name.txt, longident_loc, match$2[0], (function (param, param$1) {
                        return item_attributes(ctxt, param, param$1);
                      }), pmd.pmd_attributes);
        }
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hov>module@ %s@ :@ %a@]%a"
                      ]), pmd.pmd_name.txt, (function (param, param$1) {
                      return module_type(ctxt, param, param$1);
                    }), pmd.pmd_type, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), pmd.pmd_attributes);
    case /* Psig_recmodule */5 :
        var f$1 = f;
        var _$staropt$star = undefined;
        var _l = match[0];
        while(true) {
          var l = _l;
          var $staropt$star = _$staropt$star;
          var first = $staropt$star !== undefined ? $staropt$star : true;
          if (l) {
            var pmd$1 = l[0];
            if (first) {
              Curry._5(Format.fprintf(f$1, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "rec",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* ":" */58,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@ ",
                                                            1,
                                                            0
                                                          ]),
                                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                /* Close_box */0,
                                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                                              ])])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hov2>module@ rec@ %s:@ %a@]%a"
                      ]), pmd$1.pmd_name.txt, (function (param, param$1) {
                      return module_type(ctxt, param, param$1);
                    }), pmd$1.pmd_type, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), pmd$1.pmd_attributes);
            } else {
              Curry._5(Format.fprintf(f$1, /* Format */[
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov2>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov2>"
                                    ]]),
                                /* String_literal */Block.__(11, [
                                    "and",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@ @[<hov2>and@ %s:@ %a@]%a"
                      ]), pmd$1.pmd_name.txt, (function (param, param$1) {
                      return module_type(ctxt, param, param$1);
                    }), pmd$1.pmd_type, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), pmd$1.pmd_attributes);
            }
            _l = l[1];
            _$staropt$star = false;
            continue ;
          } else {
            return /* () */0;
          }
        };
    case /* Psig_modtype */6 :
        var match$3 = match[0];
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "module",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "type",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hov2>module@ type@ %s%a@]%a"
                      ]), match$3.pmtd_name.txt, (function (f, md) {
                      if (md !== undefined) {
                        Format.pp_print_space(f, /* () */0);
                        return Curry._2(Format.fprintf(f, /* Format */[
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Char_literal */Block.__(12, [
                                                /* "=" */61,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                                  ])
                                              ])
                                          ]),
                                        "@ =@ %a"
                                      ]), (function (param, param$1) {
                                      return module_type(ctxt, param, param$1);
                                    }), md);
                      } else {
                        return /* () */0;
                      }
                    }), match$3.pmtd_type, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), match$3.pmtd_attributes);
    case /* Psig_open */7 :
        var od = match[0];
        return Curry._5(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "open",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* Alpha */Block.__(15, [/* End_of_format */0])
                                              ])])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hov2>open%s@ %a@]%a"
                      ]), od.popen_override ? "" : "!", longident_loc, od.popen_lid, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), od.popen_attributes);
    case /* Psig_include */8 :
        var incl = match[0];
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "include",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* Alpha */Block.__(15, [/* End_of_format */0])
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<hov2>include@ %a@]%a"
                      ]), (function (param, param$1) {
                      return module_type(ctxt, param, param$1);
                    }), incl.pincl_mod, (function (param, param$1) {
                      return item_attributes(ctxt, param, param$1);
                    }), incl.pincl_attributes);
    case /* Psig_class */9 :
        var l$1 = match[0];
        var class_description = function (kwd, f, x) {
          return Curry.app(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@;",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Char_literal */Block.__(12, [
                                                          /* ":" */58,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@;",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])
                                                ])])])
                                    ])
                                ])
                            ]),
                          "@[<2>%s %a%a%s@;:@;%a@]%a"
                        ]), [
                      kwd,
                      virtual_flag,
                      x.pci_virt,
                      (function (param, param$1) {
                          return class_params_def(ctxt, param, param$1);
                        }),
                      x.pci_params,
                      x.pci_name.txt,
                      (function (param, param$1) {
                          return class_type(ctxt, param, param$1);
                        }),
                      x.pci_expr,
                      (function (param, param$1) {
                          return item_attributes(ctxt, param, param$1);
                        }),
                      x.pci_attributes
                    ]);
        };
        if (l$1) {
          var xs = l$1[1];
          var x$1 = l$1[0];
          if (xs) {
            var partial_arg = /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@,",
                      0,
                      0
                    ]),
                  /* End_of_format */0
                ]),
              "@,"
            ];
            return Curry._4(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<v>",
                                          /* End_of_format */0
                                        ]),
                                      "<v>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@,",
                                            0,
                                            0
                                          ]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "@[<v>%a@,%a@]"
                          ]), (function (param, param$1) {
                          return class_description("class", param, param$1);
                        }), x$1, (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, (function (param, param$1) {
                                        return class_description("and", param, param$1);
                                      }), param, param$1);
                        }), xs);
          } else {
            return class_description("class", f, x$1);
          }
        } else {
          return /* () */0;
        }
    case /* Psig_class_type */10 :
        return class_type_declaration_list(ctxt, f, match[0]);
    case /* Psig_attribute */11 :
        return floating_attribute(ctxt, f, match[0]);
    case /* Psig_extension */12 :
        item_extension(ctxt, f, match[0]);
        return item_attributes(ctxt, f, match[1]);
    
  }
}

function type_declaration(ctxt, f, x) {
  var priv = function (f) {
    var match = x.ptype_private;
    if (match) {
      return /* () */0;
    } else {
      return Format.fprintf(f, /* Format */[
                  /* Formatting_lit */Block.__(17, [
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ]),
                      /* String_literal */Block.__(11, [
                          "private",
                          /* End_of_format */0
                        ])
                    ]),
                  "@;private"
                ]);
    }
  };
  var manifest = function (f) {
    var match = x.ptype_manifest;
    if (match !== undefined) {
      var y = match;
      if (x.ptype_kind === /* Ptype_abstract */0) {
        return Curry._3(Format.fprintf(f, /* Format */[
                        /* Theta */Block.__(16, [/* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@;",
                                    1,
                                    0
                                  ]),
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ])]),
                        "%t@;%a"
                      ]), priv, (function (param, param$1) {
                      return core_type(ctxt, param, param$1);
                    }), y);
      } else {
        return Curry._2(Format.fprintf(f, /* Format */[
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@;",
                                1,
                                0
                              ]),
                            /* Alpha */Block.__(15, [/* End_of_format */0])
                          ]),
                        "@;%a"
                      ]), (function (param, param$1) {
                      return core_type(ctxt, param, param$1);
                    }), y);
      }
    } else {
      return /* () */0;
    }
  };
  var constructor_declaration$1 = function (f, pcd) {
    Format.fprintf(f, /* Format */[
          /* Char_literal */Block.__(12, [
              /* "|" */124,
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@;",
                      1,
                      0
                    ]),
                  /* End_of_format */0
                ])
            ]),
          "|@;"
        ]);
    return constructor_declaration(ctxt, f, /* tuple */[
                pcd.pcd_name.txt,
                pcd.pcd_args,
                pcd.pcd_res,
                pcd.pcd_attributes
              ]);
  };
  var repr = function (f) {
    var intro = function (f) {
      if (x.ptype_manifest === undefined) {
        return /* () */0;
      } else {
        return Format.fprintf(f, /* Format */[
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* Char_literal */Block.__(12, [
                            /* "=" */61,
                            /* End_of_format */0
                          ])
                      ]),
                    "@;="
                  ]);
      }
    };
    var match = x.ptype_kind;
    if (typeof match === "number") {
      if (match === /* Ptype_abstract */0) {
        return /* () */0;
      } else {
        return Curry._2(Format.fprintf(f, /* Format */[
                        /* Theta */Block.__(16, [/* Theta */Block.__(16, [/* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;",
                                        1,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "..",
                                        /* End_of_format */0
                                      ])
                                  ])])]),
                        "%t%t@;.."
                      ]), intro, priv);
      }
    } else if (match.tag) {
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Theta */Block.__(16, [/* Theta */Block.__(16, [/* Formatting_lit */Block.__(17, [
                                  /* Break */Block.__(0, [
                                      "@;",
                                      1,
                                      0
                                    ]),
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])])]),
                      "%t%t@;%a"
                    ]), intro, priv, (function (param, param$1) {
                    return record_declaration(ctxt, param, param$1);
                  }), match[0]);
    } else {
      var partial_arg = /* Format */[
        /* Formatting_lit */Block.__(17, [
            /* Force_newline */3,
            /* End_of_format */0
          ]),
        "@\n"
      ];
      return Curry._4(Format.fprintf(f, /* Format */[
                      /* Theta */Block.__(16, [/* Theta */Block.__(16, [/* Formatting_lit */Block.__(17, [
                                  /* Force_newline */3,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])])]),
                      "%t%t@\n%a"
                    ]), intro, priv, (function (param, param$1) {
                    return list(partial_arg, undefined, undefined, constructor_declaration$1, param, param$1);
                  }), match[0]);
    }
  };
  var constraints = function (f) {
    return List.iter((function (param) {
                  return Curry._4(Format.fprintf(f, /* Format */[
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<hov2>",
                                                /* End_of_format */0
                                              ]),
                                            "<hov2>"
                                          ]]),
                                      /* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@ ",
                                              1,
                                              0
                                            ]),
                                          /* String_literal */Block.__(11, [
                                              "constraint",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Char_literal */Block.__(12, [
                                                              /* "=" */61,
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Break */Block.__(0, [
                                                                      "@ ",
                                                                      1,
                                                                      0
                                                                    ]),
                                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                          /* Close_box */0,
                                                                          /* End_of_format */0
                                                                        ])])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ]),
                                  "@[<hov2>@ constraint@ %a@ =@ %a@]"
                                ]), (function (param, param$1) {
                                return core_type(ctxt, param, param$1);
                              }), param[0], (function (param, param$1) {
                                return core_type(ctxt, param, param$1);
                              }), param[1]);
                }), x.ptype_cstrs);
  };
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* Theta */Block.__(16, [/* Theta */Block.__(16, [/* Theta */Block.__(16, [/* End_of_format */0])])]),
                  "%t%t%t"
                ]), manifest, repr, constraints);
}

function class_signature(ctxt, f, param) {
  var class_type_field = function (f, x) {
    var match = x.pctf_desc;
    switch (match.tag | 0) {
      case /* Pctf_inherit */0 :
          return Curry._4(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "inherit",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                            ])])
                                    ])
                                ])
                            ]),
                          "@[<2>inherit@ %a@]%a"
                        ]), (function (param, param$1) {
                        return class_type(ctxt, param, param$1);
                      }), match[0], (function (param, param$1) {
                        return item_attributes(ctxt, param, param$1);
                      }), x.pctf_attributes);
      case /* Pctf_val */1 :
          var match$1 = match[0];
          return Curry.app(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "val ",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Char_literal */Block.__(12, [
                                                          /* ":" */58,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@ ",
                                                                  1,
                                                                  0
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])
                                                ])])])
                                    ])
                                ])
                            ]),
                          "@[<2>val @ %a%a%s@ :@ %a@]%a"
                        ]), [
                      mutable_flag,
                      match$1[1],
                      virtual_flag,
                      match$1[2],
                      match$1[0].txt,
                      (function (param, param$1) {
                          return core_type(ctxt, param, param$1);
                        }),
                      match$1[3],
                      (function (param, param$1) {
                          return item_attributes(ctxt, param, param$1);
                        }),
                      x.pctf_attributes
                    ]);
      case /* Pctf_method */2 :
          var match$2 = match[0];
          return Curry.app(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "method ",
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* " " */32,
                                          /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* String_literal */Block.__(11, [
                                                      " :",
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@;",
                                                              1,
                                                              0
                                                            ]),
                                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                  /* Close_box */0,
                                                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                                                ])])
                                                        ])
                                                    ])
                                                ])])
                                        ])])
                                ])
                            ]),
                          "@[<2>method %a %a%s :@;%a@]%a"
                        ]), [
                      private_flag,
                      match$2[1],
                      virtual_flag,
                      match$2[2],
                      match$2[0].txt,
                      (function (param, param$1) {
                          return core_type(ctxt, param, param$1);
                        }),
                      match$2[3],
                      (function (param, param$1) {
                          return item_attributes(ctxt, param, param$1);
                        }),
                      x.pctf_attributes
                    ]);
      case /* Pctf_constraint */3 :
          var match$3 = match[0];
          return Curry._6(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<2>",
                                        /* End_of_format */0
                                      ]),
                                    "<2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "constraint",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Char_literal */Block.__(12, [
                                                  /* "=" */61,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                                            ])])
                                                    ])
                                                ])
                                            ])])
                                    ])
                                ])
                            ]),
                          "@[<2>constraint@ %a@ =@ %a@]%a"
                        ]), (function (param, param$1) {
                        return core_type(ctxt, param, param$1);
                      }), match$3[0], (function (param, param$1) {
                        return core_type(ctxt, param, param$1);
                      }), match$3[1], (function (param, param$1) {
                        return item_attributes(ctxt, param, param$1);
                      }), x.pctf_attributes);
      case /* Pctf_attribute */4 :
          return floating_attribute(ctxt, f, match[0]);
      case /* Pctf_extension */5 :
          item_extension(ctxt, f, match[0]);
          return item_attributes(ctxt, f, x.pctf_attributes);
      
    }
  };
  var partial_arg = /* Format */[
    /* Formatting_lit */Block.__(17, [
        /* Break */Block.__(0, [
            "@;",
            1,
            0
          ]),
        /* End_of_format */0
      ]),
    "@;"
  ];
  return Curry._4(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<hv0>",
                                /* End_of_format */0
                              ]),
                            "<hv0>"
                          ]]),
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<hv2>",
                                    /* End_of_format */0
                                  ]),
                                "<hv2>"
                              ]]),
                          /* String_literal */Block.__(11, [
                              "object",
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<1>",
                                            /* End_of_format */0
                                          ]),
                                        "<1>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Close_box */0,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Break */Block.__(0, [
                                                              "@ ",
                                                              1,
                                                              0
                                                            ]),
                                                          /* String_literal */Block.__(11, [
                                                              "end",
                                                              /* Formatting_lit */Block.__(17, [
                                                                  /* Close_box */0,
                                                                  /* End_of_format */0
                                                                ])
                                                            ])
                                                        ])
                                                    ])])
                                            ])
                                        ])])
                                ])
                            ])
                        ])
                    ]),
                  "@[<hv0>@[<hv2>object@[<1>%a@]@ %a@]@ end@]"
                ]), (function (f, ct) {
                if (typeof ct.ptyp_desc === "number" && !ct.ptyp_attributes) {
                  return /* () */0;
                }
                return Curry._2(Format.fprintf(f, /* Format */[
                                /* String_literal */Block.__(11, [
                                    " (",
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])])
                                  ]),
                                " (%a)"
                              ]), (function (param, param$1) {
                              return core_type(ctxt, param, param$1);
                            }), ct);
              }), param.pcsig_self, (function (param, param$1) {
                return list(partial_arg, undefined, undefined, class_type_field, param, param$1);
              }), param.pcsig_fields);
}

function expression1(ctxt, f, x) {
  if (x.pexp_attributes !== /* [] */0) {
    return expression(ctxt, f, x);
  } else {
    var match = x.pexp_desc;
    if (typeof match === "number" || match.tag !== /* Pexp_object */30) {
      return expression2(ctxt, f, x);
    } else {
      return Curry._2(Format.fprintf(f, /* Format */[
                      /* Alpha */Block.__(15, [/* End_of_format */0]),
                      "%a"
                    ]), (function (param, param$1) {
                    return class_structure(ctxt, param, param$1);
                  }), match[0]);
    }
  }
}

function case_list(ctxt, f, l) {
  var aux = function (f, param) {
    var partial_arg = /* Format */[
      /* Formatting_lit */Block.__(17, [
          /* Break */Block.__(0, [
              "@;",
              1,
              0
            ]),
          /* String_literal */Block.__(11, [
              "when",
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@;",
                      1,
                      0
                    ]),
                  /* End_of_format */0
                ])
            ])
        ]),
      "@;when@;"
    ];
    var partial_arg$1 = under_pipe(ctxt);
    return Curry._6(Format.fprintf(f, /* Format */[
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@;",
                            1,
                            0
                          ]),
                        /* String_literal */Block.__(11, [
                            "| ",
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<2>",
                                          /* End_of_format */0
                                        ]),
                                      "<2>"
                                    ]]),
                                /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "->",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@;",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])
                                              ])
                                          ])])])
                              ])
                          ])
                      ]),
                    "@;| @[<2>%a%a@;->@;%a@]"
                  ]), (function (param, param$1) {
                  return pattern(ctxt, param, param$1);
                }), param.pc_lhs, (function (param, param$1) {
                  return option(partial_arg, undefined, (function (param, param$1) {
                                return expression(ctxt, param, param$1);
                              }), param, param$1);
                }), param.pc_guard, (function (param, param$1) {
                  return expression(partial_arg$1, param, param$1);
                }), param.pc_rhs);
  };
  return list(/* Format */[
              /* End_of_format */0,
              ""
            ], undefined, undefined, aux, f, l);
}

function sugar_expr(ctxt, f, e) {
  if (e.pexp_attributes !== /* [] */0) {
    return false;
  } else {
    var match = e.pexp_desc;
    if (typeof match === "number" || match.tag !== /* Pexp_apply */5) {
      return false;
    } else {
      var match$1 = match[0];
      var match$2 = match$1.pexp_desc;
      if (typeof match$2 === "number" || match$2.tag || match$1.pexp_attributes) {
        return false;
      } else {
        var args = match[1];
        var id = match$2[0].txt;
        if (List.for_all((function (param) {
                  return param[0] === /* Nolabel */0;
                }), args)) {
          var print_indexop = function (a, path_prefix, assign, left, right, print_index, indices, rem_args) {
            var print_path = function (ppf, param) {
              if (param !== undefined) {
                return Curry._2(Format.fprintf(ppf, /* Format */[
                                /* Char_literal */Block.__(12, [
                                    /* "." */46,
                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                  ]),
                                ".%a"
                              ]), longident, param);
              } else {
                return /* () */0;
              }
            };
            if (assign) {
              if (rem_args && !rem_args[1]) {
                var partial_arg = /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "," */44,
                      /* End_of_format */0
                    ]),
                  ","
                ];
                Curry.app(Format.fprintf(f, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* End_of_format */0,
                                    ""
                                  ]]),
                              /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Formatting_lit */Block.__(17, [
                                                      /* Break */Block.__(0, [
                                                          "@ ",
                                                          1,
                                                          0
                                                        ]),
                                                      /* String_literal */Block.__(11, [
                                                          "<-",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@;<1 2>",
                                                                  1,
                                                                  2
                                                                ]),
                                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])])
                                                            ])
                                                        ])
                                                    ])
                                                ])])
                                        ])])])
                            ]),
                          "@[%a%a%s%a%s@ <-@;<1 2>%a@]"
                        ]), [
                      (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }),
                      a,
                      print_path,
                      path_prefix,
                      left,
                      (function (param, param$1) {
                          return list(partial_arg, undefined, undefined, print_index, param, param$1);
                        }),
                      indices,
                      right,
                      (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }),
                      rem_args[0]
                    ]);
                return true;
              } else {
                return false;
              }
            } else if (rem_args) {
              return false;
            } else {
              var partial_arg$1 = /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "," */44,
                    /* End_of_format */0
                  ]),
                ","
              ];
              Curry._8(Format.fprintf(f, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])])])
                          ]),
                        "@[%a%a%s%a%s@]"
                      ]), (function (param, param$1) {
                      return simple_expr(ctxt, param, param$1);
                    }), a, print_path, path_prefix, left, (function (param, param$1) {
                      return list(partial_arg$1, undefined, undefined, print_index, param, param$1);
                    }), indices, right);
              return true;
            }
          };
          var match$3 = List.map((function (prim) {
                  return prim[1];
                }), args);
          var s;
          switch (id.tag | 0) {
            case /* Lident */0 :
                var s$1 = id[0];
                if (s$1 === "!" && match$3 && !match$3[1]) {
                  Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov>"
                                    ]]),
                                /* Char_literal */Block.__(12, [
                                    /* "!" */33,
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ]),
                            "@[<hov>!%a@]"
                          ]), (function (param, param$1) {
                          return simple_expr(ctxt, param, param$1);
                        }), match$3[0]);
                  return true;
                } else {
                  s = s$1;
                }
                break;
            case /* Ldot */1 :
                var func = id[1];
                var path = id[0];
                var exit = 0;
                switch (func) {
                  case "get" :
                  case "set" :
                      exit = 2;
                      break;
                  default:
                    s = func;
                }
                if (exit === 2) {
                  if (match$3) {
                    var other_args = match$3[1];
                    var a = match$3[0];
                    var assign = func === "set";
                    var print = function (param, param$1, param$2, param$3, param$4) {
                      return print_indexop(a, undefined, assign, param, param$1, param$2, param$3, param$4);
                    };
                    switch (path.tag | 0) {
                      case /* Lident */0 :
                          switch (path[0]) {
                            case "Array" :
                                if (other_args) {
                                  return print(".(", ")", (function (param, param$1) {
                                                return expression(ctxt, param, param$1);
                                              }), /* :: */[
                                              other_args[0],
                                              /* [] */0
                                            ], other_args[1]);
                                } else {
                                  return false;
                                }
                            case "String" :
                                if (other_args) {
                                  return print(".[", "]", (function (param, param$1) {
                                                return expression(ctxt, param, param$1);
                                              }), /* :: */[
                                              other_args[0],
                                              /* [] */0
                                            ], other_args[1]);
                                } else {
                                  return false;
                                }
                            default:
                              return false;
                          }
                      case /* Ldot */1 :
                          var match$4 = path[0];
                          switch (match$4.tag | 0) {
                            case /* Lident */0 :
                                if (match$4[0] === "Bigarray") {
                                  switch (path[1]) {
                                    case "Array1" :
                                        if (other_args) {
                                          return print(".{", "}", (function (param, param$1) {
                                                        return simple_expr(ctxt, param, param$1);
                                                      }), /* :: */[
                                                      other_args[0],
                                                      /* [] */0
                                                    ], other_args[1]);
                                        } else {
                                          return false;
                                        }
                                    case "Array2" :
                                        if (other_args) {
                                          var match$5 = other_args[1];
                                          if (match$5) {
                                            return print(".{", "}", (function (param, param$1) {
                                                          return simple_expr(ctxt, param, param$1);
                                                        }), /* :: */[
                                                        other_args[0],
                                                        /* :: */[
                                                          match$5[0],
                                                          /* [] */0
                                                        ]
                                                      ], match$5[1]);
                                          } else {
                                            return false;
                                          }
                                        } else {
                                          return false;
                                        }
                                    case "Array3" :
                                        if (other_args) {
                                          var match$6 = other_args[1];
                                          if (match$6) {
                                            var match$7 = match$6[1];
                                            if (match$7) {
                                              return print(".{", "}", (function (param, param$1) {
                                                            return simple_expr(ctxt, param, param$1);
                                                          }), /* :: */[
                                                          other_args[0],
                                                          /* :: */[
                                                            match$6[0],
                                                            /* :: */[
                                                              match$7[0],
                                                              /* [] */0
                                                            ]
                                                          ]
                                                        ], match$7[1]);
                                            } else {
                                              return false;
                                            }
                                          } else {
                                            return false;
                                          }
                                        } else {
                                          return false;
                                        }
                                    case "Genarray" :
                                        if (other_args) {
                                          var match$8 = other_args[0];
                                          var match$9 = match$8.pexp_desc;
                                          if (typeof match$9 === "number" || !(match$9.tag === /* Pexp_array */14 && !match$8.pexp_attributes)) {
                                            return false;
                                          } else {
                                            return print(".{", "}", (function (param, param$1) {
                                                          return simple_expr(ctxt, param, param$1);
                                                        }), match$9[0], other_args[1]);
                                          }
                                        } else {
                                          return false;
                                        }
                                    default:
                                      return false;
                                  }
                                } else {
                                  return false;
                                }
                            case /* Ldot */1 :
                            case /* Lapply */2 :
                                return false;
                            
                          }
                      case /* Lapply */2 :
                          return false;
                      
                    }
                  } else {
                    s = func;
                  }
                }
                break;
            case /* Lapply */2 :
                return false;
            
          }
          if (match$3) {
            var match$10 = match$3[1];
            if (match$10 && Caml_string.get(s, 0) === /* "." */46) {
              var n = s.length;
              var assign$1 = Caml_string.get(s, n - 1 | 0) === /* "-" */45;
              var kind = assign$1 ? Caml_string.get(s, n - 3 | 0) : Caml_string.get(s, n - 1 | 0);
              var match$11;
              if (kind !== 41) {
                if (kind !== 93) {
                  if (kind !== 125) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "pprintast.ml",
                            528,
                            19
                          ]
                        ];
                  } else {
                    match$11 = /* tuple */[
                      /* "{" */123,
                      "}"
                    ];
                  }
                } else {
                  match$11 = /* tuple */[
                    /* "[" */91,
                    "]"
                  ];
                }
              } else {
                match$11 = /* tuple */[
                  /* "(" */40,
                  ")"
                ];
              }
              var path_prefix;
              switch (id.tag | 0) {
                case /* Ldot */1 :
                    path_prefix = id[0];
                    break;
                case /* Lident */0 :
                case /* Lapply */2 :
                    path_prefix = undefined;
                    break;
                
              }
              var left = $$String.sub(s, 0, 1 + $$String.index(s, match$11[0]) | 0);
              return print_indexop(match$3[0], path_prefix, assign$1, left, match$11[1], (function (param, param$1) {
                            return expression(ctxt, param, param$1);
                          }), /* :: */[
                          match$10[0],
                          /* [] */0
                        ], match$10[1]);
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  }
}

function directive_argument(f, x) {
  if (typeof x === "number") {
    return /* () */0;
  } else {
    switch (x.tag | 0) {
      case /* Pdir_string */0 :
          return Curry._1(Format.fprintf(f, /* Format */[
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@ ",
                                  1,
                                  0
                                ]),
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "@ %S"
                        ]), x[0]);
      case /* Pdir_int */1 :
          var match = x[1];
          var n = x[0];
          if (match !== undefined) {
            return Curry._2(Format.fprintf(f, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char */Block.__(0, [/* End_of_format */0])
                                  ])
                              ]),
                            "@ %s%c"
                          ]), n, match);
          } else {
            return Curry._1(Format.fprintf(f, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "@ %s"
                          ]), n);
          }
      case /* Pdir_ident */2 :
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@ ",
                                  1,
                                  0
                                ]),
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ]),
                          "@ %a"
                        ]), longident, x[0]);
      case /* Pdir_bool */3 :
          return Curry._1(Format.fprintf(f, /* Format */[
                          /* Formatting_lit */Block.__(17, [
                              /* Break */Block.__(0, [
                                  "@ ",
                                  1,
                                  0
                                ]),
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "@ %s"
                        ]), Pervasives.string_of_bool(x[0]));
      
    }
  }
}

function toplevel_phrase(f, x) {
  if (x.tag) {
    return Curry._3(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<hov2>",
                                  /* End_of_format */0
                                ]),
                              "<hov2>"
                            ]]),
                        /* Char_literal */Block.__(12, [
                            /* "#" */35,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ])
                      ]),
                    "@[<hov2>#%s@ %a@]"
                  ]), x[0], directive_argument, x[1]);
  } else {
    return Curry._2(Format.fprintf(f, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<hov0>",
                                  /* End_of_format */0
                                ]),
                              "<hov0>"
                            ]]),
                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                /* Close_box */0,
                                /* End_of_format */0
                              ])])
                      ]),
                    "@[<hov0>%a@]"
                  ]), (function (param, param$1) {
                  return list(undefined, undefined, undefined, (function (param, param$1) {
                                return structure_item(reset_ctxt, param, param$1);
                              }), param, param$1);
                }), x[0]);
  }
}

function expression$1(f, x) {
  return Curry._2(Format.fprintf(f, /* Format */[
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* End_of_format */0,
                            ""
                          ]]),
                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                              /* Close_box */0,
                              /* End_of_format */0
                            ])])
                    ]),
                  "@[%a@]"
                ]), (function (param, param$1) {
                return expression(reset_ctxt, param, param$1);
              }), x);
}

function string_of_expression(x) {
  Format.flush_str_formatter(/* () */0);
  expression$1(Format.str_formatter, x);
  return Format.flush_str_formatter(/* () */0);
}

function string_of_structure(x) {
  Format.flush_str_formatter(/* () */0);
  structure(reset_ctxt, Format.str_formatter, x);
  return Format.flush_str_formatter(/* () */0);
}

function top_phrase(f, x) {
  Format.pp_print_newline(f, /* () */0);
  toplevel_phrase(f, x);
  Format.fprintf(f, /* Format */[
        /* String_literal */Block.__(11, [
            ";;",
            /* End_of_format */0
          ]),
        ";;"
      ]);
  return Format.pp_print_newline(f, /* () */0);
}

function core_type$1(param, param$1) {
  return core_type(reset_ctxt, param, param$1);
}

function pattern$1(param, param$1) {
  return pattern(reset_ctxt, param, param$1);
}

function signature$1(param, param$1) {
  return signature(reset_ctxt, param, param$1);
}

function structure$1(param, param$1) {
  return structure(reset_ctxt, param, param$1);
}

export {
  toplevel_phrase ,
  expression$1 as expression,
  string_of_expression ,
  top_phrase ,
  core_type$1 as core_type,
  pattern$1 as pattern,
  signature$1 as signature,
  structure$1 as structure,
  string_of_structure ,
  
}
/* Misc Not a pure module */
