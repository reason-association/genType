// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Clflags from "./clflags.bs.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function fmt_position(with_name, f, l) {
  var fname = with_name ? l[/* pos_fname */0] : "";
  if (l[/* pos_lnum */1] === -1) {
    return Curry._2(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* "[" */91,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "]" */93,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "%s[%d]"
                  ]), fname, l[/* pos_cnum */3]);
  } else {
    return Curry._4(Format.fprintf(f, /* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* "[" */91,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "," */44,
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* Char_literal */Block.__(12, [
                                            /* "+" */43,
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* "]" */93,
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s[%d,%d+%d]"
                  ]), fname, l[/* pos_lnum */1], l[/* pos_bol */2], l[/* pos_cnum */3] - l[/* pos_bol */2] | 0);
  }
}

function fmt_location(f, loc) {
  if (Clflags.dump_location[0]) {
    var p_2nd_name = loc[/* loc_start */0][/* pos_fname */0] !== loc[/* loc_end */1][/* pos_fname */0];
    Curry._4(Format.fprintf(f, /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "(" */40,
                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                          "..",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* ")" */41,
                                  /* End_of_format */0
                                ])])
                        ])])
                ]),
              "(%a..%a)"
            ]), (function (param, param$1) {
            return fmt_position(true, param, param$1);
          }), loc[/* loc_start */0], (function (param, param$1) {
            return fmt_position(p_2nd_name, param, param$1);
          }), loc[/* loc_end */1]);
    if (loc[/* loc_ghost */2]) {
      return Format.fprintf(f, /* Format */[
                  /* String_literal */Block.__(11, [
                      " ghost",
                      /* End_of_format */0
                    ]),
                  " ghost"
                ]);
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function fmt_longident_aux(f, x) {
  switch (x.tag | 0) {
    case /* Lident */0 :
        return Curry._1(Format.fprintf(f, /* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ]),
                        "%s"
                      ]), x[0]);
    case /* Ldot */1 :
        return Curry._3(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "." */46,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])]),
                        "%a.%s"
                      ]), fmt_longident_aux, x[0], x[1]);
    case /* Lapply */2 :
        return Curry._4(Format.fprintf(f, /* Format */[
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* End_of_format */0
                                      ])])
                              ])]),
                        "%a(%a)"
                      ]), fmt_longident_aux, x[0], fmt_longident_aux, x[1]);
    
  }
}

function fmt_longident(f, x) {
  return Curry._2(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "\"" */34,
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\"" */34,
                              /* End_of_format */0
                            ])])
                    ]),
                  "\"%a\""
                ]), fmt_longident_aux, x);
}

function fmt_longident_loc(f, x) {
  return Curry._4(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "\"" */34,
                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                              "\" ",
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])])
                    ]),
                  "\"%a\" %a"
                ]), fmt_longident_aux, x[/* txt */0], fmt_location, x[/* loc */1]);
}

function fmt_string_loc(f, x) {
  return Curry._3(Format.fprintf(f, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "\"" */34,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\" ",
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])
                        ])
                    ]),
                  "\"%s\" %a"
                ]), x[/* txt */0], fmt_location, x[/* loc */1]);
}

function fmt_char_option(f, param) {
  if (param !== undefined) {
    return Curry._1(Format.fprintf(f, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Some ",
                        /* Char */Block.__(0, [/* End_of_format */0])
                      ]),
                    "Some %c"
                  ]), param);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "None",
                    /* End_of_format */0
                  ]),
                "None"
              ]);
  }
}

function fmt_constant(f, x) {
  switch (x.tag | 0) {
    case /* Pconst_integer */0 :
        return Curry._3(Format.fprintf(f, /* Format */[
                        /* String_literal */Block.__(11, [
                            "PConst_int (",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "," */44,
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "PConst_int (%s,%a)"
                      ]), x[0], fmt_char_option, x[1]);
    case /* Pconst_char */1 :
        return Curry._1(Format.fprintf(f, /* Format */[
                        /* String_literal */Block.__(11, [
                            "PConst_char ",
                            /* Int */Block.__(4, [
                                /* Int_x */6,
                                /* Lit_padding */Block.__(0, [
                                    /* Zeros */2,
                                    2
                                  ]),
                                /* No_precision */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "PConst_char %02x"
                      ]), x[0]);
    case /* Pconst_string */2 :
        var match = x[1];
        var s = x[0];
        if (match !== undefined) {
          return Curry._2(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "PConst_string (",
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ",Some ",
                                      /* Caml_string */Block.__(3, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "PConst_string (%S,Some %S)"
                        ]), s, match);
        } else {
          return Curry._1(Format.fprintf(f, /* Format */[
                          /* String_literal */Block.__(11, [
                              "PConst_string(",
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ",None)",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "PConst_string(%S,None)"
                        ]), s);
        }
    case /* Pconst_float */3 :
        return Curry._3(Format.fprintf(f, /* Format */[
                        /* String_literal */Block.__(11, [
                            "PConst_float (",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "," */44,
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "PConst_float (%s,%a)"
                      ]), x[0], fmt_char_option, x[1]);
    
  }
}

function fmt_mutable_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Mutable",
                    /* End_of_format */0
                  ]),
                "Mutable"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Immutable",
                    /* End_of_format */0
                  ]),
                "Immutable"
              ]);
  }
}

function fmt_virtual_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Concrete",
                    /* End_of_format */0
                  ]),
                "Concrete"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Virtual",
                    /* End_of_format */0
                  ]),
                "Virtual"
              ]);
  }
}

function fmt_override_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Fresh",
                    /* End_of_format */0
                  ]),
                "Fresh"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Override",
                    /* End_of_format */0
                  ]),
                "Override"
              ]);
  }
}

function fmt_closed_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Open",
                    /* End_of_format */0
                  ]),
                "Open"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Closed",
                    /* End_of_format */0
                  ]),
                "Closed"
              ]);
  }
}

function fmt_rec_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Rec",
                    /* End_of_format */0
                  ]),
                "Rec"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Nonrec",
                    /* End_of_format */0
                  ]),
                "Nonrec"
              ]);
  }
}

function fmt_direction_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Down",
                    /* End_of_format */0
                  ]),
                "Down"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Up",
                    /* End_of_format */0
                  ]),
                "Up"
              ]);
  }
}

function fmt_private_flag(f, x) {
  if (x) {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Public",
                    /* End_of_format */0
                  ]),
                "Public"
              ]);
  } else {
    return Format.fprintf(f, /* Format */[
                /* String_literal */Block.__(11, [
                    "Private",
                    /* End_of_format */0
                  ]),
                "Private"
              ]);
  }
}

function line(i, f, s) {
  Curry._1(Format.fprintf(f, /* Format */[
            /* String */Block.__(2, [
                /* No_padding */0,
                /* End_of_format */0
              ]),
            "%s"
          ]), $$String.make((i << 1) % 72, /* " " */32));
  return Format.fprintf(f, s);
}

function list(i, f, ppf, l) {
  if (l) {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "[\n",
              /* End_of_format */0
            ]),
          "[\n"
        ]);
    List.iter(Curry._2(f, i + 1 | 0, ppf), l);
    return line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "]\n",
                    /* End_of_format */0
                  ]),
                "]\n"
              ]);
  } else {
    return line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "[]\n",
                    /* End_of_format */0
                  ]),
                "[]\n"
              ]);
  }
}

function option(i, f, ppf, x) {
  if (x !== undefined) {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "Some\n",
              /* End_of_format */0
            ]),
          "Some\n"
        ]);
    return Curry._3(f, i + 1 | 0, ppf, Caml_option.valFromOption(x));
  } else {
    return line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "None\n",
                    /* End_of_format */0
                  ]),
                "None\n"
              ]);
  }
}

function longident_loc(i, ppf, li) {
  return Curry._2(line(i, ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])]),
                  "%a\n"
                ]), fmt_longident_loc, li);
}

function string(i, ppf, s) {
  return Curry._1(line(i, ppf, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "\"" */34,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "\"%s\"\n"
                ]), s);
}

function string_loc(i, ppf, s) {
  return Curry._2(line(i, ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])]),
                  "%a\n"
                ]), fmt_string_loc, s);
}

function arg_label(i, ppf, param) {
  if (typeof param === "number") {
    return line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Nolabel\n",
                    /* End_of_format */0
                  ]),
                "Nolabel\n"
              ]);
  } else if (param.tag) {
    return Curry._1(line(i, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Optional \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Optional \"%s\"\n"
                  ]), param[0]);
  } else {
    return Curry._1(line(i, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Labelled \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Labelled \"%s\"\n"
                  ]), param[0]);
  }
}

function core_type(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "core_type ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "core_type %a\n"
            ]), fmt_location, x[/* ptyp_loc */1]);
    attributes(i, ppf, x[/* ptyp_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* ptyp_desc */0];
    if (typeof match === "number") {
      return line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ptyp_any\n",
                      /* End_of_format */0
                    ]),
                  "Ptyp_any\n"
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Ptyp_var */0 :
            return Curry._1(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Ptyp_var ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Ptyp_var %s\n"
                          ]), match[0]);
        case /* Ptyp_arrow */1 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ptyp_arrow\n",
                      /* End_of_format */0
                    ]),
                  "Ptyp_arrow\n"
                ]);
            arg_label(i$1, ppf, match[0]);
            core_type(i$1, ppf, match[1]);
            _x = match[2];
            _i = i$1;
            continue ;
        case /* Ptyp_tuple */2 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ptyp_tuple\n",
                      /* End_of_format */0
                    ]),
                  "Ptyp_tuple\n"
                ]);
            return list(i$1, core_type, ppf, match[0]);
        case /* Ptyp_constr */3 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_constr ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_constr %a\n"
                    ]), fmt_longident_loc, match[0]);
            return list(i$1, core_type, ppf, match[1]);
        case /* Ptyp_object */4 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_object ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_object %a\n"
                    ]), fmt_closed_flag, match[1]);
            var i$2 = i$1 + 1 | 0;
            return List.iter((function(i$2){
                      return function (param) {
                        if (param.tag) {
                          line(i$2, ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "Oinherit\n",
                                    /* End_of_format */0
                                  ]),
                                "Oinherit\n"
                              ]);
                          return core_type(i$2 + 1 | 0, ppf, param[0]);
                        } else {
                          Curry._1(line(i$2, ppf, /* Format */[
                                    /* String_literal */Block.__(11, [
                                        "method ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* "\n" */10,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ]),
                                    "method %s\n"
                                  ]), param[0][/* txt */0]);
                          attributes(i$2, ppf, param[1]);
                          return core_type(i$2 + 1 | 0, ppf, param[2]);
                        }
                      }
                      }(i$2)), match[0]);
        case /* Ptyp_class */5 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_class ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_class %a\n"
                    ]), fmt_longident_loc, match[0]);
            return list(i$1, core_type, ppf, match[1]);
        case /* Ptyp_alias */6 :
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_alias \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Ptyp_alias \"%s\"\n"
                    ]), match[1]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Ptyp_variant */7 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_variant closed=",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_variant closed=%a\n"
                    ]), fmt_closed_flag, match[1]);
            list(i$1, label_x_bool_x_core_type_list, ppf, match[0]);
            return option(i$1, (function (i) {
                          return (function (param, param$1) {
                              return list(i, string, param, param$1);
                            });
                        }), ppf, match[2]);
        case /* Ptyp_poly */8 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_poly",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_poly%a\n"
                    ]), (function (ppf) {
                    return (function (param) {
                        return List.iter((function (x) {
                                      return Curry._1(Format.fprintf(ppf, /* Format */[
                                                      /* String_literal */Block.__(11, [
                                                          " '",
                                                          /* String */Block.__(2, [
                                                              /* No_padding */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ]),
                                                      " '%s"
                                                    ]), x[/* txt */0]);
                                    }), param);
                      });
                  }), match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Ptyp_package */9 :
            var match$1 = match[0];
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_package ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ptyp_package %a\n"
                    ]), fmt_longident_loc, match$1[0]);
            return list(i$1, package_with, ppf, match$1[1]);
        case /* Ptyp_extension */10 :
            var match$2 = match[0];
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ptyp_extension \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Ptyp_extension \"%s\"\n"
                    ]), match$2[0][/* txt */0]);
            return payload(i$1, ppf, match$2[1]);
        
      }
    }
  };
}

function package_with(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "with type ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "with type %a\n"
          ]), fmt_longident_loc, param[0]);
  return core_type(i, ppf, param[1]);
}

function pattern(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "pattern ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "pattern %a\n"
            ]), fmt_location, x[/* ppat_loc */1]);
    attributes(i, ppf, x[/* ppat_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* ppat_desc */0];
    if (typeof match === "number") {
      return line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_any\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_any\n"
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Ppat_var */0 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Ppat_var ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Ppat_var %a\n"
                          ]), fmt_string_loc, match[0]);
        case /* Ppat_alias */1 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_alias ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ppat_alias %a\n"
                    ]), fmt_string_loc, match[1]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Ppat_constant */2 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Ppat_constant ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Ppat_constant %a\n"
                          ]), fmt_constant, match[0]);
        case /* Ppat_interval */3 :
            return Curry._4(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Ppat_interval ",
                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                        "..",
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* "\n" */10,
                                                /* End_of_format */0
                                              ])])
                                      ])])
                              ]),
                            "Ppat_interval %a..%a\n"
                          ]), fmt_constant, match[0], fmt_constant, match[1]);
        case /* Ppat_tuple */4 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_tuple\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_tuple\n"
                ]);
            return list(i$1, pattern, ppf, match[0]);
        case /* Ppat_construct */5 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_construct ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ppat_construct %a\n"
                    ]), fmt_longident_loc, match[0]);
            return option(i$1, pattern, ppf, match[1]);
        case /* Ppat_variant */6 :
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_variant \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Ppat_variant \"%s\"\n"
                    ]), match[0]);
            return option(i$1, pattern, ppf, match[1]);
        case /* Ppat_record */7 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_record ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ppat_record %a\n"
                    ]), fmt_closed_flag, match[1]);
            return list(i$1, longident_x_pattern, ppf, match[0]);
        case /* Ppat_array */8 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_array\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_array\n"
                ]);
            return list(i$1, pattern, ppf, match[0]);
        case /* Ppat_or */9 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_or\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_or\n"
                ]);
            pattern(i$1, ppf, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Ppat_constraint */10 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_constraint\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_constraint\n"
                ]);
            pattern(i$1, ppf, match[0]);
            return core_type(i$1, ppf, match[1]);
        case /* Ppat_type */11 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_type\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_type\n"
                ]);
            return longident_loc(i$1, ppf, match[0]);
        case /* Ppat_lazy */12 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_lazy\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_lazy\n"
                ]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Ppat_unpack */13 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Ppat_unpack ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Ppat_unpack %a\n"
                          ]), fmt_string_loc, match[0]);
        case /* Ppat_exception */14 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ppat_exception\n",
                      /* End_of_format */0
                    ]),
                  "Ppat_exception\n"
                ]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Ppat_extension */15 :
            var match$1 = match[0];
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_extension \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Ppat_extension \"%s\"\n"
                    ]), match$1[0][/* txt */0]);
            return payload(i$1, ppf, match$1[1]);
        case /* Ppat_open */16 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Ppat_open \"",
                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Ppat_open \"%a\"\n"
                    ]), fmt_longident_loc, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        
      }
    }
  };
}

function expression(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "expression ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "expression %a\n"
            ]), fmt_location, x[/* pexp_loc */1]);
    attributes(i, ppf, x[/* pexp_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* pexp_desc */0];
    if (typeof match === "number") {
      return line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_unreachable",
                      /* End_of_format */0
                    ]),
                  "Pexp_unreachable"
                ]);
    } else {
      switch (match.tag | 0) {
        case /* Pexp_ident */0 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pexp_ident ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Pexp_ident %a\n"
                          ]), fmt_longident_loc, match[0]);
        case /* Pexp_constant */1 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pexp_constant ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Pexp_constant %a\n"
                          ]), fmt_constant, match[0]);
        case /* Pexp_let */2 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_let ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Pexp_let %a\n"
                    ]), fmt_rec_flag, match[0]);
            list(i$1, value_binding, ppf, match[1]);
            _x = match[2];
            _i = i$1;
            continue ;
        case /* Pexp_function */3 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_function\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_function\n"
                ]);
            return list(i$1, $$case, ppf, match[0]);
        case /* Pexp_fun */4 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_fun\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_fun\n"
                ]);
            arg_label(i$1, ppf, match[0]);
            option(i$1, expression, ppf, match[1]);
            pattern(i$1, ppf, match[2]);
            _x = match[3];
            _i = i$1;
            continue ;
        case /* Pexp_apply */5 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_apply\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_apply\n"
                ]);
            expression(i$1, ppf, match[0]);
            return list(i$1, label_x_expression, ppf, match[1]);
        case /* Pexp_match */6 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_match\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_match\n"
                ]);
            expression(i$1, ppf, match[0]);
            return list(i$1, $$case, ppf, match[1]);
        case /* Pexp_try */7 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_try\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_try\n"
                ]);
            expression(i$1, ppf, match[0]);
            return list(i$1, $$case, ppf, match[1]);
        case /* Pexp_tuple */8 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_tuple\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_tuple\n"
                ]);
            return list(i$1, expression, ppf, match[0]);
        case /* Pexp_construct */9 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_construct ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Pexp_construct %a\n"
                    ]), fmt_longident_loc, match[0]);
            return option(i$1, expression, ppf, match[1]);
        case /* Pexp_variant */10 :
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_variant \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Pexp_variant \"%s\"\n"
                    ]), match[0]);
            return option(i$1, expression, ppf, match[1]);
        case /* Pexp_record */11 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_record\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_record\n"
                ]);
            list(i$1, longident_x_expression, ppf, match[0]);
            return option(i$1, expression, ppf, match[1]);
        case /* Pexp_field */12 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_field\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_field\n"
                ]);
            expression(i$1, ppf, match[0]);
            return longident_loc(i$1, ppf, match[1]);
        case /* Pexp_setfield */13 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_setfield\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_setfield\n"
                ]);
            expression(i$1, ppf, match[0]);
            longident_loc(i$1, ppf, match[1]);
            _x = match[2];
            _i = i$1;
            continue ;
        case /* Pexp_array */14 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_array\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_array\n"
                ]);
            return list(i$1, expression, ppf, match[0]);
        case /* Pexp_ifthenelse */15 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_ifthenelse\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_ifthenelse\n"
                ]);
            expression(i$1, ppf, match[0]);
            expression(i$1, ppf, match[1]);
            return option(i$1, expression, ppf, match[2]);
        case /* Pexp_sequence */16 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_sequence\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_sequence\n"
                ]);
            expression(i$1, ppf, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Pexp_while */17 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_while\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_while\n"
                ]);
            expression(i$1, ppf, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Pexp_for */18 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_for ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Pexp_for %a\n"
                    ]), fmt_direction_flag, match[3]);
            pattern(i$1, ppf, match[0]);
            expression(i$1, ppf, match[1]);
            expression(i$1, ppf, match[2]);
            _x = match[4];
            _i = i$1;
            continue ;
        case /* Pexp_constraint */19 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_constraint\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_constraint\n"
                ]);
            expression(i$1, ppf, match[0]);
            return core_type(i$1, ppf, match[1]);
        case /* Pexp_coerce */20 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_coerce\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_coerce\n"
                ]);
            expression(i$1, ppf, match[0]);
            option(i$1, core_type, ppf, match[1]);
            return core_type(i$1, ppf, match[2]);
        case /* Pexp_send */21 :
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_send \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Pexp_send \"%s\"\n"
                    ]), match[1][/* txt */0]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Pexp_new */22 :
            return Curry._2(line(i$1, ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pexp_new ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Pexp_new %a\n"
                          ]), fmt_longident_loc, match[0]);
        case /* Pexp_setinstvar */23 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_setinstvar ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Pexp_setinstvar %a\n"
                    ]), fmt_string_loc, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Pexp_override */24 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_override\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_override\n"
                ]);
            return list(i$1, string_x_expression, ppf, match[0]);
        case /* Pexp_letmodule */25 :
            Curry._2(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_letmodule ",
                          /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])])
                        ]),
                      "Pexp_letmodule %a\n"
                    ]), fmt_string_loc, match[0]);
            module_expr(i$1, ppf, match[1]);
            _x = match[2];
            _i = i$1;
            continue ;
        case /* Pexp_letexception */26 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_letexception\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_letexception\n"
                ]);
            extension_constructor(i$1, ppf, match[0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Pexp_assert */27 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_assert\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_assert\n"
                ]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Pexp_lazy */28 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_lazy\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_lazy\n"
                ]);
            _x = match[0];
            _i = i$1;
            continue ;
        case /* Pexp_poly */29 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_poly\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_poly\n"
                ]);
            expression(i$1, ppf, match[0]);
            return option(i$1, core_type, ppf, match[1]);
        case /* Pexp_object */30 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_object\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_object\n"
                ]);
            return class_structure(i$1, ppf, match[0]);
        case /* Pexp_newtype */31 :
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_newtype \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Pexp_newtype \"%s\"\n"
                    ]), match[0][/* txt */0]);
            _x = match[1];
            _i = i$1;
            continue ;
        case /* Pexp_pack */32 :
            line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pexp_pack\n",
                      /* End_of_format */0
                    ]),
                  "Pexp_pack\n"
                ]);
            return module_expr(i$1, ppf, match[0]);
        case /* Pexp_open */33 :
            Curry._4(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_open ",
                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                  " \"",
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          "\"\n",
                                          /* End_of_format */0
                                        ])])
                                ])])
                        ]),
                      "Pexp_open %a \"%a\"\n"
                    ]), fmt_override_flag, match[0], fmt_longident_loc, match[1]);
            _x = match[2];
            _i = i$1;
            continue ;
        case /* Pexp_extension */34 :
            var match$1 = match[0];
            Curry._1(line(i$1, ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Pexp_extension \"",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "\"\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Pexp_extension \"%s\"\n"
                    ]), match$1[0][/* txt */0]);
            return payload(i$1, ppf, match$1[1]);
        
      }
    }
  };
}

function value_description(i, ppf, x) {
  Curry._4(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "value_description ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ])])
              ]),
            "value_description %a %a\n"
          ]), fmt_string_loc, x[/* pval_name */0], fmt_location, x[/* pval_loc */4]);
  attributes(i, ppf, x[/* pval_attributes */3]);
  core_type(i + 1 | 0, ppf, x[/* pval_type */1]);
  return list(i + 1 | 0, string, ppf, x[/* pval_prim */2]);
}

function type_parameter(i, ppf, param) {
  return core_type(i, ppf, param[0]);
}

function type_declaration(i, ppf, x) {
  Curry._4(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "type_declaration ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ])])
              ]),
            "type_declaration %a %a\n"
          ]), fmt_string_loc, x[/* ptype_name */0], fmt_location, x[/* ptype_loc */7]);
  attributes(i, ppf, x[/* ptype_attributes */6]);
  var i$1 = i + 1 | 0;
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptype_params =\n",
            /* End_of_format */0
          ]),
        "ptype_params =\n"
      ]);
  list(i$1 + 1 | 0, type_parameter, ppf, x[/* ptype_params */1]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptype_cstrs =\n",
            /* End_of_format */0
          ]),
        "ptype_cstrs =\n"
      ]);
  list(i$1 + 1 | 0, core_type_x_core_type_x_location, ppf, x[/* ptype_cstrs */2]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptype_kind =\n",
            /* End_of_format */0
          ]),
        "ptype_kind =\n"
      ]);
  type_kind(i$1 + 1 | 0, ppf, x[/* ptype_kind */3]);
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "ptype_private = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "ptype_private = %a\n"
          ]), fmt_private_flag, x[/* ptype_private */4]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptype_manifest =\n",
            /* End_of_format */0
          ]),
        "ptype_manifest =\n"
      ]);
  return option(i$1 + 1 | 0, core_type, ppf, x[/* ptype_manifest */5]);
}

function attributes(i, ppf, l) {
  var i$1 = i + 1 | 0;
  return List.iter((function (param) {
                var s = param[0];
                Curry._3(line(i$1, ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "attribute ",
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      " \"",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "\"\n",
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])])
                            ]),
                          "attribute %a \"%s\"\n"
                        ]), fmt_location, s[/* loc */1], s[/* txt */0]);
                return payload(i$1 + 1 | 0, ppf, param[1]);
              }), l);
}

function payload(i, ppf, param) {
  switch (param.tag | 0) {
    case /* PStr */0 :
        return structure(i, ppf, param[0]);
    case /* PSig */1 :
        return signature(i, ppf, param[0]);
    case /* PTyp */2 :
        return core_type(i, ppf, param[0]);
    case /* PPat */3 :
        var match = param[1];
        var x = param[0];
        if (match !== undefined) {
          pattern(i, ppf, x);
          line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "<when>\n",
                    /* End_of_format */0
                  ]),
                "<when>\n"
              ]);
          return expression(i + 1 | 0, ppf, match);
        } else {
          return pattern(i, ppf, x);
        }
    
  }
}

function type_kind(i, ppf, x) {
  if (typeof x === "number") {
    if (x === /* Ptype_abstract */0) {
      return line(i, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ptype_abstract\n",
                      /* End_of_format */0
                    ]),
                  "Ptype_abstract\n"
                ]);
    } else {
      return line(i, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Ptype_open\n",
                      /* End_of_format */0
                    ]),
                  "Ptype_open\n"
                ]);
    }
  } else if (x.tag) {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "Ptype_record\n",
              /* End_of_format */0
            ]),
          "Ptype_record\n"
        ]);
    return list(i + 1 | 0, label_decl, ppf, x[0]);
  } else {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "Ptype_variant\n",
              /* End_of_format */0
            ]),
          "Ptype_variant\n"
        ]);
    return list(i + 1 | 0, constructor_decl, ppf, x[0]);
  }
}

function type_extension(i, ppf, x) {
  line(i, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "type_extension\n",
            /* End_of_format */0
          ]),
        "type_extension\n"
      ]);
  attributes(i, ppf, x[/* ptyext_attributes */4]);
  var i$1 = i + 1 | 0;
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "ptyext_path = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "ptyext_path = %a\n"
          ]), fmt_longident_loc, x[/* ptyext_path */0]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptyext_params =\n",
            /* End_of_format */0
          ]),
        "ptyext_params =\n"
      ]);
  list(i$1 + 1 | 0, type_parameter, ppf, x[/* ptyext_params */1]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "ptyext_constructors =\n",
            /* End_of_format */0
          ]),
        "ptyext_constructors =\n"
      ]);
  list(i$1 + 1 | 0, extension_constructor, ppf, x[/* ptyext_constructors */2]);
  return Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "ptyext_private = ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "ptyext_private = %a\n"
                ]), fmt_private_flag, x[/* ptyext_private */3]);
}

function extension_constructor(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "extension_constructor ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "extension_constructor %a\n"
          ]), fmt_location, x[/* pext_loc */2]);
  attributes(i, ppf, x[/* pext_attributes */3]);
  var i$1 = i + 1 | 0;
  Curry._1(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pext_name = \"",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        "\"\n",
                        /* End_of_format */0
                      ])
                  ])
              ]),
            "pext_name = \"%s\"\n"
          ]), x[/* pext_name */0][/* txt */0]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pext_kind =\n",
            /* End_of_format */0
          ]),
        "pext_kind =\n"
      ]);
  var i$2 = i$1 + 1 | 0;
  var ppf$1 = ppf;
  var x$1 = x[/* pext_kind */1];
  if (x$1.tag) {
    line(i$2, ppf$1, /* Format */[
          /* String_literal */Block.__(11, [
              "Pext_rebind\n",
              /* End_of_format */0
            ]),
          "Pext_rebind\n"
        ]);
    return Curry._2(line(i$2 + 1 | 0, ppf$1, /* Format */[
                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                            /* "\n" */10,
                            /* End_of_format */0
                          ])]),
                    "%a\n"
                  ]), fmt_longident_loc, x$1[0]);
  } else {
    line(i$2, ppf$1, /* Format */[
          /* String_literal */Block.__(11, [
              "Pext_decl\n",
              /* End_of_format */0
            ]),
          "Pext_decl\n"
        ]);
    constructor_arguments(i$2 + 1 | 0, ppf$1, x$1[0]);
    return option(i$2 + 1 | 0, core_type, ppf$1, x$1[1]);
  }
}

function class_type(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "class_type ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "class_type %a\n"
            ]), fmt_location, x[/* pcty_loc */1]);
    attributes(i, ppf, x[/* pcty_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* pcty_desc */0];
    switch (match.tag | 0) {
      case /* Pcty_constr */0 :
          Curry._2(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcty_constr ",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ]),
                    "Pcty_constr %a\n"
                  ]), fmt_longident_loc, match[0]);
          return list(i$1, core_type, ppf, match[1]);
      case /* Pcty_signature */1 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcty_signature\n",
                    /* End_of_format */0
                  ]),
                "Pcty_signature\n"
              ]);
          var i$2 = i$1;
          var ppf$1 = ppf;
          var cs = match[0];
          line(i$2, ppf$1, /* Format */[
                /* String_literal */Block.__(11, [
                    "class_signature\n",
                    /* End_of_format */0
                  ]),
                "class_signature\n"
              ]);
          core_type(i$2 + 1 | 0, ppf$1, cs[/* pcsig_self */0]);
          return list(i$2 + 1 | 0, class_type_field, ppf$1, cs[/* pcsig_fields */1]);
      case /* Pcty_arrow */2 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcty_arrow\n",
                    /* End_of_format */0
                  ]),
                "Pcty_arrow\n"
              ]);
          arg_label(i$1, ppf, match[0]);
          core_type(i$1, ppf, match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      case /* Pcty_extension */3 :
          var match$1 = match[0];
          Curry._1(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcty_extension \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Pcty_extension \"%s\"\n"
                  ]), match$1[0][/* txt */0]);
          return payload(i$1, ppf, match$1[1]);
      case /* Pcty_open */4 :
          Curry._4(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcty_open ",
                        /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                " \"",
                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                        "\"\n",
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "Pcty_open %a \"%a\"\n"
                  ]), fmt_override_flag, match[0], fmt_longident_loc, match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      
    }
  };
}

function class_type_field(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "class_type_field ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "class_type_field %a\n"
          ]), fmt_location, x[/* pctf_loc */1]);
  var i$1 = i + 1 | 0;
  attributes(i$1, ppf, x[/* pctf_attributes */2]);
  var match = x[/* pctf_desc */0];
  switch (match.tag | 0) {
    case /* Pctf_inherit */0 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pctf_inherit\n",
                  /* End_of_format */0
                ]),
              "Pctf_inherit\n"
            ]);
        return class_type(i$1, ppf, match[0]);
    case /* Pctf_val */1 :
        var match$1 = match[0];
        Curry._5(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pctf_val \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\" ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* "\n" */10,
                                              /* End_of_format */0
                                            ])])
                                    ])])
                            ])
                        ])
                    ]),
                  "Pctf_val \"%s\" %a %a\n"
                ]), match$1[0][/* txt */0], fmt_mutable_flag, match$1[1], fmt_virtual_flag, match$1[2]);
        return core_type(i$1 + 1 | 0, ppf, match$1[3]);
    case /* Pctf_method */2 :
        var match$2 = match[0];
        Curry._5(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pctf_method \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\" ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                              /* "\n" */10,
                                              /* End_of_format */0
                                            ])])
                                    ])])
                            ])
                        ])
                    ]),
                  "Pctf_method \"%s\" %a %a\n"
                ]), match$2[0][/* txt */0], fmt_private_flag, match$2[1], fmt_virtual_flag, match$2[2]);
        return core_type(i$1 + 1 | 0, ppf, match$2[3]);
    case /* Pctf_constraint */3 :
        var match$3 = match[0];
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pctf_constraint\n",
                  /* End_of_format */0
                ]),
              "Pctf_constraint\n"
            ]);
        core_type(i$1 + 1 | 0, ppf, match$3[0]);
        return core_type(i$1 + 1 | 0, ppf, match$3[1]);
    case /* Pctf_attribute */4 :
        var match$4 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pctf_attribute \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pctf_attribute \"%s\"\n"
                ]), match$4[0][/* txt */0]);
        return payload(i$1, ppf, match$4[1]);
    case /* Pctf_extension */5 :
        var match$5 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pctf_extension \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pctf_extension \"%s\"\n"
                ]), match$5[0][/* txt */0]);
        return payload(i$1, ppf, match$5[1]);
    
  }
}

function class_description(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "class_description ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "class_description %a\n"
          ]), fmt_location, x[/* pci_loc */4]);
  attributes(i, ppf, x[/* pci_attributes */5]);
  var i$1 = i + 1 | 0;
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_virt = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_virt = %a\n"
          ]), fmt_virtual_flag, x[/* pci_virt */0]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_params =\n",
            /* End_of_format */0
          ]),
        "pci_params =\n"
      ]);
  list(i$1 + 1 | 0, type_parameter, ppf, x[/* pci_params */1]);
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_name = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_name = %a\n"
          ]), fmt_string_loc, x[/* pci_name */2]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_expr =\n",
            /* End_of_format */0
          ]),
        "pci_expr =\n"
      ]);
  return class_type(i$1 + 1 | 0, ppf, x[/* pci_expr */3]);
}

function class_type_declaration(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "class_type_declaration ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "class_type_declaration %a\n"
          ]), fmt_location, x[/* pci_loc */4]);
  attributes(i, ppf, x[/* pci_attributes */5]);
  var i$1 = i + 1 | 0;
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_virt = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_virt = %a\n"
          ]), fmt_virtual_flag, x[/* pci_virt */0]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_params =\n",
            /* End_of_format */0
          ]),
        "pci_params =\n"
      ]);
  list(i$1 + 1 | 0, type_parameter, ppf, x[/* pci_params */1]);
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_name = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_name = %a\n"
          ]), fmt_string_loc, x[/* pci_name */2]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_expr =\n",
            /* End_of_format */0
          ]),
        "pci_expr =\n"
      ]);
  return class_type(i$1 + 1 | 0, ppf, x[/* pci_expr */3]);
}

function class_expr(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "class_expr ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "class_expr %a\n"
            ]), fmt_location, x[/* pcl_loc */1]);
    attributes(i, ppf, x[/* pcl_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* pcl_desc */0];
    switch (match.tag | 0) {
      case /* Pcl_constr */0 :
          Curry._2(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcl_constr ",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ]),
                    "Pcl_constr %a\n"
                  ]), fmt_longident_loc, match[0]);
          return list(i$1, core_type, ppf, match[1]);
      case /* Pcl_structure */1 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcl_structure\n",
                    /* End_of_format */0
                  ]),
                "Pcl_structure\n"
              ]);
          return class_structure(i$1, ppf, match[0]);
      case /* Pcl_fun */2 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcl_fun\n",
                    /* End_of_format */0
                  ]),
                "Pcl_fun\n"
              ]);
          arg_label(i$1, ppf, match[0]);
          option(i$1, expression, ppf, match[1]);
          pattern(i$1, ppf, match[2]);
          _x = match[3];
          _i = i$1;
          continue ;
      case /* Pcl_apply */3 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcl_apply\n",
                    /* End_of_format */0
                  ]),
                "Pcl_apply\n"
              ]);
          class_expr(i$1, ppf, match[0]);
          return list(i$1, label_x_expression, ppf, match[1]);
      case /* Pcl_let */4 :
          Curry._2(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcl_let ",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ]),
                    "Pcl_let %a\n"
                  ]), fmt_rec_flag, match[0]);
          list(i$1, value_binding, ppf, match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      case /* Pcl_constraint */5 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pcl_constraint\n",
                    /* End_of_format */0
                  ]),
                "Pcl_constraint\n"
              ]);
          class_expr(i$1, ppf, match[0]);
          return class_type(i$1, ppf, match[1]);
      case /* Pcl_extension */6 :
          var match$1 = match[0];
          Curry._1(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcl_extension \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Pcl_extension \"%s\"\n"
                  ]), match$1[0][/* txt */0]);
          return payload(i$1, ppf, match$1[1]);
      case /* Pcl_open */7 :
          Curry._4(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pcl_open ",
                        /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                " \"",
                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                        "\"\n",
                                        /* End_of_format */0
                                      ])])
                              ])])
                      ]),
                    "Pcl_open %a \"%a\"\n"
                  ]), fmt_override_flag, match[0], fmt_longident_loc, match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      
    }
  };
}

function class_structure(i, ppf, param) {
  line(i, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "class_structure\n",
            /* End_of_format */0
          ]),
        "class_structure\n"
      ]);
  pattern(i + 1 | 0, ppf, param[/* pcstr_self */0]);
  return list(i + 1 | 0, class_field, ppf, param[/* pcstr_fields */1]);
}

function class_field(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "class_field ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "class_field %a\n"
          ]), fmt_location, x[/* pcf_loc */1]);
  var i$1 = i + 1 | 0;
  attributes(i$1, ppf, x[/* pcf_attributes */2]);
  var match = x[/* pcf_desc */0];
  switch (match.tag | 0) {
    case /* Pcf_inherit */0 :
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pcf_inherit ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pcf_inherit %a\n"
                ]), fmt_override_flag, match[0]);
        class_expr(i$1 + 1 | 0, ppf, match[1]);
        return option(i$1 + 1 | 0, string_loc, ppf, match[2]);
    case /* Pcf_val */1 :
        var match$1 = match[0];
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pcf_val ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pcf_val %a\n"
                ]), fmt_mutable_flag, match$1[1]);
        Curry._2(line(i$1 + 1 | 0, ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])]),
                  "%a\n"
                ]), fmt_string_loc, match$1[0]);
        return class_field_kind(i$1 + 1 | 0, ppf, match$1[2]);
    case /* Pcf_method */2 :
        var match$2 = match[0];
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pcf_method ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pcf_method %a\n"
                ]), fmt_private_flag, match$2[1]);
        Curry._2(line(i$1 + 1 | 0, ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])]),
                  "%a\n"
                ]), fmt_string_loc, match$2[0]);
        return class_field_kind(i$1 + 1 | 0, ppf, match$2[2]);
    case /* Pcf_constraint */3 :
        var match$3 = match[0];
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pcf_constraint\n",
                  /* End_of_format */0
                ]),
              "Pcf_constraint\n"
            ]);
        core_type(i$1 + 1 | 0, ppf, match$3[0]);
        return core_type(i$1 + 1 | 0, ppf, match$3[1]);
    case /* Pcf_initializer */4 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pcf_initializer\n",
                  /* End_of_format */0
                ]),
              "Pcf_initializer\n"
            ]);
        return expression(i$1 + 1 | 0, ppf, match[0]);
    case /* Pcf_attribute */5 :
        var match$4 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pcf_attribute \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pcf_attribute \"%s\"\n"
                ]), match$4[0][/* txt */0]);
        return payload(i$1, ppf, match$4[1]);
    case /* Pcf_extension */6 :
        var match$5 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pcf_extension \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pcf_extension \"%s\"\n"
                ]), match$5[0][/* txt */0]);
        return payload(i$1, ppf, match$5[1]);
    
  }
}

function class_field_kind(i, ppf, param) {
  if (param.tag) {
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Concrete ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "Concrete %a\n"
            ]), fmt_override_flag, param[0]);
    return expression(i, ppf, param[1]);
  } else {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "Virtual\n",
              /* End_of_format */0
            ]),
          "Virtual\n"
        ]);
    return core_type(i, ppf, param[0]);
  }
}

function class_declaration(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "class_declaration ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "class_declaration %a\n"
          ]), fmt_location, x[/* pci_loc */4]);
  attributes(i, ppf, x[/* pci_attributes */5]);
  var i$1 = i + 1 | 0;
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_virt = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_virt = %a\n"
          ]), fmt_virtual_flag, x[/* pci_virt */0]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_params =\n",
            /* End_of_format */0
          ]),
        "pci_params =\n"
      ]);
  list(i$1 + 1 | 0, type_parameter, ppf, x[/* pci_params */1]);
  Curry._2(line(i$1, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "pci_name = ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "pci_name = %a\n"
          ]), fmt_string_loc, x[/* pci_name */2]);
  line(i$1, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "pci_expr =\n",
            /* End_of_format */0
          ]),
        "pci_expr =\n"
      ]);
  return class_expr(i$1 + 1 | 0, ppf, x[/* pci_expr */3]);
}

function module_type(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "module_type ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "module_type %a\n"
            ]), fmt_location, x[/* pmty_loc */1]);
    attributes(i, ppf, x[/* pmty_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* pmty_desc */0];
    switch (match.tag | 0) {
      case /* Pmty_ident */0 :
          return Curry._2(line(i$1, ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Pmty_ident ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])])
                            ]),
                          "Pmty_ident %a\n"
                        ]), fmt_longident_loc, match[0]);
      case /* Pmty_signature */1 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmty_signature\n",
                    /* End_of_format */0
                  ]),
                "Pmty_signature\n"
              ]);
          return signature(i$1, ppf, match[0]);
      case /* Pmty_functor */2 :
          Curry._2(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pmty_functor ",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ]),
                    "Pmty_functor %a\n"
                  ]), fmt_string_loc, match[0]);
          Misc.may((function(i$1){
              return function (param) {
                return module_type(i$1, ppf, param);
              }
              }(i$1)), match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      case /* Pmty_with */3 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmty_with\n",
                    /* End_of_format */0
                  ]),
                "Pmty_with\n"
              ]);
          module_type(i$1, ppf, match[0]);
          return list(i$1, with_constraint, ppf, match[1]);
      case /* Pmty_typeof */4 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmty_typeof\n",
                    /* End_of_format */0
                  ]),
                "Pmty_typeof\n"
              ]);
          return module_expr(i$1, ppf, match[0]);
      case /* Pmty_extension */5 :
          var match$1 = match[0];
          Curry._1(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pmod_extension \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Pmod_extension \"%s\"\n"
                  ]), match$1[0][/* txt */0]);
          return payload(i$1, ppf, match$1[1]);
      case /* Pmty_alias */6 :
          return Curry._2(line(i$1, ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Pmty_alias ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])])
                            ]),
                          "Pmty_alias %a\n"
                        ]), fmt_longident_loc, match[0]);
      
    }
  };
}

function signature(i, ppf, x) {
  return list(i, signature_item, ppf, x);
}

function signature_item(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "signature_item ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "signature_item %a\n"
          ]), fmt_location, x[/* psig_loc */1]);
  var i$1 = i + 1 | 0;
  var match = x[/* psig_desc */0];
  switch (match.tag | 0) {
    case /* Psig_value */0 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_value\n",
                  /* End_of_format */0
                ]),
              "Psig_value\n"
            ]);
        return value_description(i$1, ppf, match[0]);
    case /* Psig_type */1 :
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_type ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Psig_type %a\n"
                ]), fmt_rec_flag, match[0]);
        return list(i$1, type_declaration, ppf, match[1]);
    case /* Psig_typext */2 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_typext\n",
                  /* End_of_format */0
                ]),
              "Psig_typext\n"
            ]);
        return type_extension(i$1, ppf, match[0]);
    case /* Psig_exception */3 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_exception\n",
                  /* End_of_format */0
                ]),
              "Psig_exception\n"
            ]);
        return extension_constructor(i$1, ppf, match[0]);
    case /* Psig_module */4 :
        var pmd = match[0];
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_module ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Psig_module %a\n"
                ]), fmt_string_loc, pmd[/* pmd_name */0]);
        attributes(i$1, ppf, pmd[/* pmd_attributes */2]);
        return module_type(i$1, ppf, pmd[/* pmd_type */1]);
    case /* Psig_recmodule */5 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_recmodule\n",
                  /* End_of_format */0
                ]),
              "Psig_recmodule\n"
            ]);
        return list(i$1, module_declaration, ppf, match[0]);
    case /* Psig_modtype */6 :
        var x$1 = match[0];
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_modtype ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Psig_modtype %a\n"
                ]), fmt_string_loc, x$1[/* pmtd_name */0]);
        attributes(i$1, ppf, x$1[/* pmtd_attributes */2]);
        return modtype_declaration(i$1, ppf, x$1[/* pmtd_type */1]);
    case /* Psig_open */7 :
        var od = match[0];
        Curry._4(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_open ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* " " */32,
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])])
                            ])])
                    ]),
                  "Psig_open %a %a\n"
                ]), fmt_override_flag, od[/* popen_override */1], fmt_longident_loc, od[/* popen_lid */0]);
        return attributes(i$1, ppf, od[/* popen_attributes */3]);
    case /* Psig_include */8 :
        var incl = match[0];
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_include\n",
                  /* End_of_format */0
                ]),
              "Psig_include\n"
            ]);
        module_type(i$1, ppf, incl[/* pincl_mod */0]);
        return attributes(i$1, ppf, incl[/* pincl_attributes */2]);
    case /* Psig_class */9 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_class\n",
                  /* End_of_format */0
                ]),
              "Psig_class\n"
            ]);
        return list(i$1, class_description, ppf, match[0]);
    case /* Psig_class_type */10 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Psig_class_type\n",
                  /* End_of_format */0
                ]),
              "Psig_class_type\n"
            ]);
        return list(i$1, class_type_declaration, ppf, match[0]);
    case /* Psig_attribute */11 :
        var match$1 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_attribute \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Psig_attribute \"%s\"\n"
                ]), match$1[0][/* txt */0]);
        return payload(i$1, ppf, match$1[1]);
    case /* Psig_extension */12 :
        var match$2 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Psig_extension \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Psig_extension \"%s\"\n"
                ]), match$2[0][/* txt */0]);
        attributes(i$1, ppf, match[1]);
        return payload(i$1, ppf, match$2[1]);
    
  }
}

function modtype_declaration(i, ppf, param) {
  if (param !== undefined) {
    return module_type(i + 1 | 0, ppf, param);
  } else {
    return line(i, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "#abstract",
                    /* End_of_format */0
                  ]),
                "#abstract"
              ]);
  }
}

function with_constraint(i, ppf, x) {
  switch (x.tag | 0) {
    case /* Pwith_type */0 :
        Curry._2(line(i, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pwith_type ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pwith_type %a\n"
                ]), fmt_longident_loc, x[0]);
        return type_declaration(i + 1 | 0, ppf, x[1]);
    case /* Pwith_module */1 :
        return Curry._4(line(i, ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Pwith_module ",
                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                    " = ",
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* "\n" */10,
                                            /* End_of_format */0
                                          ])])
                                  ])])
                          ]),
                        "Pwith_module %a = %a\n"
                      ]), fmt_longident_loc, x[0], fmt_longident_loc, x[1]);
    case /* Pwith_typesubst */2 :
        Curry._2(line(i, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pwith_typesubst ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pwith_typesubst %a\n"
                ]), fmt_longident_loc, x[0]);
        return type_declaration(i + 1 | 0, ppf, x[1]);
    case /* Pwith_modsubst */3 :
        return Curry._4(line(i, ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Pwith_modsubst ",
                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                    " = ",
                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                            /* "\n" */10,
                                            /* End_of_format */0
                                          ])])
                                  ])])
                          ]),
                        "Pwith_modsubst %a = %a\n"
                      ]), fmt_longident_loc, x[0], fmt_longident_loc, x[1]);
    
  }
}

function module_expr(_i, ppf, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "module_expr ",
                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])])
                ]),
              "module_expr %a\n"
            ]), fmt_location, x[/* pmod_loc */1]);
    attributes(i, ppf, x[/* pmod_attributes */2]);
    var i$1 = i + 1 | 0;
    var match = x[/* pmod_desc */0];
    switch (match.tag | 0) {
      case /* Pmod_ident */0 :
          return Curry._2(line(i$1, ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Pmod_ident ",
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])])
                            ]),
                          "Pmod_ident %a\n"
                        ]), fmt_longident_loc, match[0]);
      case /* Pmod_structure */1 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmod_structure\n",
                    /* End_of_format */0
                  ]),
                "Pmod_structure\n"
              ]);
          return structure(i$1, ppf, match[0]);
      case /* Pmod_functor */2 :
          Curry._2(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pmod_functor ",
                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])])
                      ]),
                    "Pmod_functor %a\n"
                  ]), fmt_string_loc, match[0]);
          Misc.may((function(i$1){
              return function (param) {
                return module_type(i$1, ppf, param);
              }
              }(i$1)), match[1]);
          _x = match[2];
          _i = i$1;
          continue ;
      case /* Pmod_apply */3 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmod_apply\n",
                    /* End_of_format */0
                  ]),
                "Pmod_apply\n"
              ]);
          module_expr(i$1, ppf, match[0]);
          _x = match[1];
          _i = i$1;
          continue ;
      case /* Pmod_constraint */4 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmod_constraint\n",
                    /* End_of_format */0
                  ]),
                "Pmod_constraint\n"
              ]);
          module_expr(i$1, ppf, match[0]);
          return module_type(i$1, ppf, match[1]);
      case /* Pmod_unpack */5 :
          line(i$1, ppf, /* Format */[
                /* String_literal */Block.__(11, [
                    "Pmod_unpack\n",
                    /* End_of_format */0
                  ]),
                "Pmod_unpack\n"
              ]);
          return expression(i$1, ppf, match[0]);
      case /* Pmod_extension */6 :
          var match$1 = match[0];
          Curry._1(line(i$1, ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Pmod_extension \"",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\"\n",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Pmod_extension \"%s\"\n"
                  ]), match$1[0][/* txt */0]);
          return payload(i$1, ppf, match$1[1]);
      
    }
  };
}

function structure(i, ppf, x) {
  return list(i, structure_item, ppf, x);
}

function structure_item(i, ppf, x) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "structure_item ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "structure_item %a\n"
          ]), fmt_location, x[/* pstr_loc */1]);
  var i$1 = i + 1 | 0;
  var match = x[/* pstr_desc */0];
  switch (match.tag | 0) {
    case /* Pstr_eval */0 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_eval\n",
                  /* End_of_format */0
                ]),
              "Pstr_eval\n"
            ]);
        attributes(i$1, ppf, match[1]);
        return expression(i$1, ppf, match[0]);
    case /* Pstr_value */1 :
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_value ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pstr_value %a\n"
                ]), fmt_rec_flag, match[0]);
        return list(i$1, value_binding, ppf, match[1]);
    case /* Pstr_primitive */2 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_primitive\n",
                  /* End_of_format */0
                ]),
              "Pstr_primitive\n"
            ]);
        return value_description(i$1, ppf, match[0]);
    case /* Pstr_type */3 :
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_type ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pstr_type %a\n"
                ]), fmt_rec_flag, match[0]);
        return list(i$1, type_declaration, ppf, match[1]);
    case /* Pstr_typext */4 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_typext\n",
                  /* End_of_format */0
                ]),
              "Pstr_typext\n"
            ]);
        return type_extension(i$1, ppf, match[0]);
    case /* Pstr_exception */5 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_exception\n",
                  /* End_of_format */0
                ]),
              "Pstr_exception\n"
            ]);
        return extension_constructor(i$1, ppf, match[0]);
    case /* Pstr_module */6 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_module\n",
                  /* End_of_format */0
                ]),
              "Pstr_module\n"
            ]);
        return module_binding(i$1, ppf, match[0]);
    case /* Pstr_recmodule */7 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_recmodule\n",
                  /* End_of_format */0
                ]),
              "Pstr_recmodule\n"
            ]);
        return list(i$1, module_binding, ppf, match[0]);
    case /* Pstr_modtype */8 :
        var x$1 = match[0];
        Curry._2(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_modtype ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])])
                    ]),
                  "Pstr_modtype %a\n"
                ]), fmt_string_loc, x$1[/* pmtd_name */0]);
        attributes(i$1, ppf, x$1[/* pmtd_attributes */2]);
        return modtype_declaration(i$1, ppf, x$1[/* pmtd_type */1]);
    case /* Pstr_open */9 :
        var od = match[0];
        Curry._4(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_open ",
                      /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                              /* " " */32,
                              /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])])
                            ])])
                    ]),
                  "Pstr_open %a %a\n"
                ]), fmt_override_flag, od[/* popen_override */1], fmt_longident_loc, od[/* popen_lid */0]);
        return attributes(i$1, ppf, od[/* popen_attributes */3]);
    case /* Pstr_class */10 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_class\n",
                  /* End_of_format */0
                ]),
              "Pstr_class\n"
            ]);
        return list(i$1, class_declaration, ppf, match[0]);
    case /* Pstr_class_type */11 :
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_class_type\n",
                  /* End_of_format */0
                ]),
              "Pstr_class_type\n"
            ]);
        return list(i$1, class_type_declaration, ppf, match[0]);
    case /* Pstr_include */12 :
        var incl = match[0];
        line(i$1, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Pstr_include",
                  /* End_of_format */0
                ]),
              "Pstr_include"
            ]);
        attributes(i$1, ppf, incl[/* pincl_attributes */2]);
        return module_expr(i$1, ppf, incl[/* pincl_mod */0]);
    case /* Pstr_attribute */13 :
        var match$1 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_attribute \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pstr_attribute \"%s\"\n"
                ]), match$1[0][/* txt */0]);
        return payload(i$1, ppf, match$1[1]);
    case /* Pstr_extension */14 :
        var match$2 = match[0];
        Curry._1(line(i$1, ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pstr_extension \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "\"\n",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "Pstr_extension \"%s\"\n"
                ]), match$2[0][/* txt */0]);
        attributes(i$1, ppf, match[1]);
        return payload(i$1, ppf, match$2[1]);
    
  }
}

function module_declaration(i, ppf, pmd) {
  string_loc(i, ppf, pmd[/* pmd_name */0]);
  attributes(i, ppf, pmd[/* pmd_attributes */2]);
  return module_type(i + 1 | 0, ppf, pmd[/* pmd_type */1]);
}

function module_binding(i, ppf, x) {
  string_loc(i, ppf, x[/* pmb_name */0]);
  attributes(i, ppf, x[/* pmb_attributes */2]);
  return module_expr(i + 1 | 0, ppf, x[/* pmb_expr */1]);
}

function core_type_x_core_type_x_location(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "<constraint> ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "<constraint> %a\n"
          ]), fmt_location, param[2]);
  core_type(i + 1 | 0, ppf, param[0]);
  return core_type(i + 1 | 0, ppf, param[1]);
}

function constructor_decl(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_location, param[/* pcd_loc */3]);
  Curry._2(line(i + 1 | 0, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_string_loc, param[/* pcd_name */0]);
  attributes(i, ppf, param[/* pcd_attributes */4]);
  constructor_arguments(i + 1 | 0, ppf, param[/* pcd_args */1]);
  return option(i + 1 | 0, core_type, ppf, param[/* pcd_res */2]);
}

function constructor_arguments(i, ppf, param) {
  if (param.tag) {
    return list(i, label_decl, ppf, param[0]);
  } else {
    return list(i, core_type, ppf, param[0]);
  }
}

function label_decl(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_location, param[/* pld_loc */3]);
  attributes(i, ppf, param[/* pld_attributes */4]);
  Curry._2(line(i + 1 | 0, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_mutable_flag, param[/* pld_mutable */1]);
  Curry._2(line(i + 1 | 0, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* End_of_format */0]),
            "%a"
          ]), fmt_string_loc, param[/* pld_name */0]);
  return core_type(i + 1 | 0, ppf, param[/* pld_type */2]);
}

function longident_x_pattern(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_longident_loc, param[0]);
  return pattern(i + 1 | 0, ppf, param[1]);
}

function $$case(i, ppf, param) {
  var pc_guard = param[/* pc_guard */1];
  line(i, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "<case>\n",
            /* End_of_format */0
          ]),
        "<case>\n"
      ]);
  pattern(i + 1 | 0, ppf, param[/* pc_lhs */0]);
  if (pc_guard !== undefined) {
    line(i + 1 | 0, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "<when>\n",
              /* End_of_format */0
            ]),
          "<when>\n"
        ]);
    expression(i + 2 | 0, ppf, pc_guard);
  }
  return expression(i + 1 | 0, ppf, param[/* pc_rhs */2]);
}

function value_binding(i, ppf, x) {
  line(i, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "<def>\n",
            /* End_of_format */0
          ]),
        "<def>\n"
      ]);
  attributes(i + 1 | 0, ppf, x[/* pvb_attributes */2]);
  pattern(i + 1 | 0, ppf, x[/* pvb_pat */0]);
  return expression(i + 1 | 0, ppf, x[/* pvb_expr */1]);
}

function string_x_expression(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* String_literal */Block.__(11, [
                "<override> ",
                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])])
              ]),
            "<override> %a\n"
          ]), fmt_string_loc, param[0]);
  return expression(i + 1 | 0, ppf, param[1]);
}

function longident_x_expression(i, ppf, param) {
  Curry._2(line(i, ppf, /* Format */[
            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                    /* "\n" */10,
                    /* End_of_format */0
                  ])]),
            "%a\n"
          ]), fmt_longident_loc, param[0]);
  return expression(i + 1 | 0, ppf, param[1]);
}

function label_x_expression(i, ppf, param) {
  line(i, ppf, /* Format */[
        /* String_literal */Block.__(11, [
            "<arg>\n",
            /* End_of_format */0
          ]),
        "<arg>\n"
      ]);
  arg_label(i, ppf, param[0]);
  return expression(i + 1 | 0, ppf, param[1]);
}

function label_x_bool_x_core_type_list(i, ppf, x) {
  if (x.tag) {
    line(i, ppf, /* Format */[
          /* String_literal */Block.__(11, [
              "Rinherit\n",
              /* End_of_format */0
            ]),
          "Rinherit\n"
        ]);
    return core_type(i + 1 | 0, ppf, x[0]);
  } else {
    Curry._2(line(i, ppf, /* Format */[
              /* String_literal */Block.__(11, [
                  "Rtag \"",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          "\" ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "Rtag \"%s\" %s\n"
            ]), x[0][/* txt */0], Pervasives.string_of_bool(x[2]));
    attributes(i + 1 | 0, ppf, x[1]);
    return list(i + 1 | 0, core_type, ppf, x[3]);
  }
}

function $$interface(ppf, x) {
  return list(0, signature_item, ppf, x);
}

function implementation(ppf, x) {
  return list(0, structure_item, ppf, x);
}

function top_phrase(ppf, x) {
  var i = 0;
  var ppf$1 = ppf;
  var x$1 = x;
  if (x$1.tag) {
    Curry._1(line(i, ppf$1, /* Format */[
              /* String_literal */Block.__(11, [
                  "Ptop_dir \"",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          "\"\n",
                          /* End_of_format */0
                        ])
                    ])
                ]),
              "Ptop_dir \"%s\"\n"
            ]), x$1[0]);
    var i$1 = i;
    var ppf$2 = ppf$1;
    var x$2 = x$1[1];
    if (typeof x$2 === "number") {
      return line(i$1, ppf$2, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Pdir_none\n",
                      /* End_of_format */0
                    ]),
                  "Pdir_none\n"
                ]);
    } else {
      switch (x$2.tag | 0) {
        case /* Pdir_string */0 :
            return Curry._1(line(i$1, ppf$2, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pdir_string \"",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "\"\n",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Pdir_string \"%s\"\n"
                          ]), x$2[0]);
        case /* Pdir_int */1 :
            var match = x$2[1];
            var n = x$2[0];
            if (match !== undefined) {
              return Curry._2(line(i$1, ppf$2, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "Pdir_int ",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char */Block.__(0, [/* Char_literal */Block.__(12, [
                                              /* "\n" */10,
                                              /* End_of_format */0
                                            ])])
                                    ])
                                ]),
                              "Pdir_int %s%c\n"
                            ]), n, match);
            } else {
              return Curry._1(line(i$1, ppf$2, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "Pdir_int ",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "\n" */10,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ]),
                              "Pdir_int %s\n"
                            ]), n);
            }
        case /* Pdir_ident */2 :
            return Curry._2(line(i$1, ppf$2, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pdir_ident ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])])
                              ]),
                            "Pdir_ident %a\n"
                          ]), fmt_longident, x$2[0]);
        case /* Pdir_bool */3 :
            return Curry._1(line(i$1, ppf$2, /* Format */[
                            /* String_literal */Block.__(11, [
                                "Pdir_bool ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Pdir_bool %s\n"
                          ]), Pervasives.string_of_bool(x$2[0]));
        
      }
    }
  } else {
    line(i, ppf$1, /* Format */[
          /* String_literal */Block.__(11, [
              "Ptop_def\n",
              /* End_of_format */0
            ]),
          "Ptop_def\n"
        ]);
    return structure(i + 1 | 0, ppf$1, x$1[0]);
  }
}

export {
  $$interface ,
  implementation ,
  top_phrase ,
  expression ,
  structure ,
  payload ,
  
}
/* Misc Not a pure module */
