// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Sys from "bs-platform/lib/es6/sys.js";
import * as Char from "bs-platform/lib/es6/char.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Uchar from "bs-platform/lib/es6/uchar.js";
import * as $$Buffer from "bs-platform/lib/es6/buffer.js";
import * as Config from "./config.bs.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as Lexing from "./lexing.bs.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_sys from "bs-platform/lib/es6/caml_sys.js";
import * as $$Location from "./location.bs.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Docstrings from "./docstrings.bs.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function type_of_directive(x) {
  if (typeof x === "number") {
    return /* Dir_type_null */4;
  } else {
    switch (x.tag | 0) {
      case /* Dir_bool */0 :
          return /* Dir_type_bool */0;
      case /* Dir_float */1 :
          return /* Dir_type_float */1;
      case /* Dir_int */2 :
          return /* Dir_type_int */2;
      case /* Dir_string */3 :
          return /* Dir_type_string */3;
      
    }
  }
}

function string_of_type_directive(x) {
  switch (x) {
    case /* Dir_type_bool */0 :
        return "bool";
    case /* Dir_type_float */1 :
        return "float";
    case /* Dir_type_int */2 :
        return "int";
    case /* Dir_type_string */3 :
        return "string";
    case /* Dir_type_null */4 :
        return "null";
    
  }
}

var $$Error = Caml_exceptions.create("Lexer.Error");

function assert_same_type(lexbuf, x, y) {
  var lhs = type_of_directive(x);
  var rhs = type_of_directive(y);
  if (lhs !== rhs) {
    throw [
          $$Error,
          /* Conditional_expr_expected_type */Block.__(8, [
              lhs,
              rhs
            ]),
          $$Location.curr(lexbuf)
        ];
  }
  return y;
}

var directive_built_in_values = Hashtbl.create(undefined, 51);

function remove_directive_built_in_value(k) {
  return Hashtbl.replace(directive_built_in_values, k, /* Dir_null */0);
}

function replace_directive_int(k, v) {
  return Hashtbl.replace(directive_built_in_values, k, /* Dir_int */Block.__(2, [v]));
}

function replace_directive_bool(k, v) {
  return Hashtbl.replace(directive_built_in_values, k, /* Dir_bool */Block.__(0, [v]));
}

function replace_directive_string(k, v) {
  return Hashtbl.replace(directive_built_in_values, k, /* Dir_string */Block.__(3, [v]));
}

Hashtbl.replace(directive_built_in_values, "OCAML_VERSION", /* Dir_string */Block.__(3, [Config.version]));

var tmp;

var exit = 0;

var i;

try {
  i = $$String.rindex(Config.version, /* "+" */43);
  exit = 1;
}
catch (exn){
  if (exn === Caml_builtin_exceptions.not_found) {
    tmp = "";
  } else {
    throw exn;
  }
}

if (exit === 1) {
  tmp = $$String.sub(Config.version, i + 1 | 0, (Config.version.length - i | 0) - 1 | 0);
}

var v = /* Dir_string */Block.__(3, [tmp]);

Hashtbl.replace(directive_built_in_values, "OCAML_PATCH", v);

Hashtbl.replace(directive_built_in_values, "OS_TYPE", /* Dir_string */Block.__(3, ["Unix"]));

Hashtbl.replace(directive_built_in_values, "BIG_ENDIAN", /* Dir_bool */Block.__(0, [Sys.big_endian]));

Hashtbl.replace(directive_built_in_values, "WORD_SIZE", /* Dir_int */Block.__(2, [Sys.word_size]));

function semantic_version_parse(str, start, last_index) {
  var aux = function (_start, _acc, last_index) {
    while(true) {
      var acc = _acc;
      var start = _start;
      if (start <= last_index) {
        var c = str.charCodeAt(start);
        if (c === /* "." */46) {
          return /* tuple */[
                  acc,
                  start + 1 | 0
                ];
        } else {
          var v = c - /* "0" */48 | 0;
          if (v >= 0 && v <= 9) {
            _acc = Caml_int32.imul(acc, 10) + v | 0;
            _start = start + 1 | 0;
            continue ;
          } else {
            return /* tuple */[
                    acc,
                    start
                  ];
          }
        }
      } else {
        return /* tuple */[
                acc,
                start
              ];
      }
    };
  };
  var match = aux(start, 0, last_index);
  var match$1 = aux(match[1], 0, last_index);
  var match$2 = aux(match$1[1], 0, last_index);
  var patch_end = match$2[1];
  var additional = $$String.sub(str, patch_end, (last_index - patch_end | 0) + 1 | 0);
  return /* tuple */[
          /* tuple */[
            match[0],
            match$1[0],
            match$2[0]
          ],
          additional
        ];
}

function semver(loc, lhs, str) {
  var last_index = str.length - 1 | 0;
  if (last_index < 0) {
    throw [
          $$Error,
          /* Illegal_semver */Block.__(7, [str]),
          loc
        ];
  }
  var v = str.charCodeAt(0);
  var match;
  var exit = 0;
  if (v !== 94) {
    if (v >= 63) {
      if (v !== 126) {
        exit = 1;
      } else {
        match = /* tuple */[
          /* Approximate */-617782220,
          semantic_version_parse(str, 1, last_index)
        ];
      }
    } else if (v >= 60) {
      switch (v - 60 | 0) {
        case 0 :
            if (last_index === 0) {
              throw [
                    $$Error,
                    /* Illegal_semver */Block.__(7, [str]),
                    loc
                  ];
            }
            match = str[1] === "=" ? /* tuple */[
                /* Le */17049,
                semantic_version_parse(str, 2, last_index)
              ] : /* tuple */[
                /* Lt */17064,
                semantic_version_parse(str, 1, last_index)
              ];
            break;
        case 1 :
            exit = 1;
            break;
        case 2 :
            if (last_index === 0) {
              throw [
                    $$Error,
                    /* Illegal_semver */Block.__(7, [str]),
                    loc
                  ];
            }
            match = str[1] === "=" ? /* tuple */[
                /* Ge */15934,
                semantic_version_parse(str, 2, last_index)
              ] : /* tuple */[
                /* Gt */15949,
                semantic_version_parse(str, 1, last_index)
              ];
            break;
        
      }
    } else {
      exit = 1;
    }
  } else {
    match = /* tuple */[
      /* Compatible */785637236,
      semantic_version_parse(str, 1, last_index)
    ];
  }
  if (exit === 1) {
    match = /* tuple */[
      /* Exact */172069535,
      semantic_version_parse(str, 0, last_index)
    ];
  }
  var version = match[1][0];
  var major = version[0];
  var pred = match[0];
  var match$1 = semantic_version_parse(lhs, 0, lhs.length - 1 | 0);
  var lversion = match$1[0];
  var l_major = lversion[0];
  if (pred >= 17049) {
    if (pred >= 172069535) {
      if (pred >= 785637236) {
        return major === l_major;
      } else {
        return Caml_obj.caml_equal(lversion, version);
      }
    } else if (pred >= 17064) {
      return Caml_obj.caml_lessthan(lversion, version);
    } else {
      return Caml_obj.caml_lessequal(lversion, version);
    }
  } else if (pred !== 15934) {
    if (pred >= 15949) {
      return Caml_obj.caml_greaterthan(lversion, version);
    } else if (major === l_major) {
      return version[1] === lversion[1];
    } else {
      return false;
    }
  } else {
    return Caml_obj.caml_greaterequal(lversion, version);
  }
}

function pp_directive_value(fmt, x) {
  if (typeof x === "number") {
    return Format.pp_print_string(fmt, "null");
  } else {
    switch (x.tag | 0) {
      case /* Dir_bool */0 :
          return Format.pp_print_bool(fmt, x[0]);
      case /* Dir_float */1 :
          return Format.pp_print_float(fmt, x[0]);
      case /* Dir_int */2 :
          return Format.pp_print_int(fmt, x[0]);
      case /* Dir_string */3 :
          return Curry._1(Format.fprintf(fmt, /* Format */[
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ]),
                          "%S"
                        ]), x[0]);
      
    }
  }
}

function list_variables(fmt) {
  return Hashtbl.iter((function (s, dir_value) {
                return Curry._3(Format.fprintf(fmt, /* Format */[
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* End_of_format */0,
                                          ""
                                        ]]),
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Flush_newline */4,
                                                        /* End_of_format */0
                                                      ])
                                                  ])])
                                          ])
                                      ])
                                  ]),
                                "@[%s@ %a@]@."
                              ]), s, pp_directive_value, dir_value);
              }), directive_built_in_values);
}

function defined(str) {
  var val;
  try {
    val = Hashtbl.find(directive_built_in_values, str);
  }
  catch (exn){
    try {
      Caml_sys.caml_sys_getenv(str);
      return true;
    }
    catch (exn$1){
      return false;
    }
  }
  if (typeof val === "number") {
    return false;
  } else {
    return true;
  }
}

function query(_loc, str) {
  var v;
  try {
    v = Hashtbl.find(directive_built_in_values, str);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var exit = 0;
      var v$1;
      try {
        v$1 = Caml_sys.caml_sys_getenv(str);
        exit = 2;
      }
      catch (exn$1){
        if (exn$1 === Caml_builtin_exceptions.not_found) {
          return /* Dir_bool */Block.__(0, [false]);
        } else {
          throw exn$1;
        }
      }
      if (exit === 2) {
        try {
          return /* Dir_bool */Block.__(0, [Pervasives.bool_of_string(v$1)]);
        }
        catch (exn$2){
          try {
            return /* Dir_int */Block.__(2, [Caml_format.caml_int_of_string(v$1)]);
          }
          catch (exn$3){
            try {
              return /* Dir_float */Block.__(1, [Caml_format.caml_float_of_string(v$1)]);
            }
            catch (exn$4){
              return /* Dir_string */Block.__(3, [v$1]);
            }
          }
        }
      }
      
    } else {
      throw exn;
    }
  }
  if (typeof v === "number") {
    return /* Dir_bool */Block.__(0, [false]);
  } else {
    return v;
  }
}

function define_key_value(key, v) {
  if (key.length !== 0 && Char.uppercase_ascii(Caml_string.get(key, 0)) === Caml_string.get(key, 0)) {
    var v$1;
    try {
      v$1 = /* Dir_bool */Block.__(0, [Pervasives.bool_of_string(v)]);
    }
    catch (exn){
      try {
        v$1 = /* Dir_int */Block.__(2, [Caml_format.caml_int_of_string(v)]);
      }
      catch (exn$1){
        try {
          v$1 = /* Dir_float */Block.__(1, [Caml_format.caml_float_of_string(v)]);
        }
        catch (exn$2){
          v$1 = /* Dir_string */Block.__(3, [v]);
        }
      }
    }
    Hashtbl.replace(directive_built_in_values, key, v$1);
    return true;
  } else {
    return false;
  }
}

function cvt_int_literal(s) {
  return -Caml_format.caml_int_of_string("-" + s) | 0;
}

function value_of_token(loc, t) {
  if (typeof t === "number") {
    switch (t) {
      case /* FALSE */29 :
          return /* Dir_bool */Block.__(0, [false]);
      case /* TRUE */91 :
          return /* Dir_bool */Block.__(0, [true]);
      default:
        throw [
              $$Error,
              /* Unexpected_token_in_conditional */4,
              loc
            ];
    }
  } else {
    switch (t.tag | 0) {
      case /* FLOAT */1 :
          var match = t[0];
          if (match[1] !== undefined) {
            throw [
                  $$Error,
                  /* Unexpected_token_in_conditional */4,
                  loc
                ];
          }
          return /* Dir_float */Block.__(1, [Caml_format.caml_float_of_string(match[0])]);
      case /* INT */8 :
          var match$1 = t[0];
          if (match$1[1] !== undefined) {
            throw [
                  $$Error,
                  /* Unexpected_token_in_conditional */4,
                  loc
                ];
          }
          return /* Dir_int */Block.__(2, [cvt_int_literal(match$1[0])]);
      case /* STRING */14 :
          return /* Dir_string */Block.__(3, [t[0][0]]);
      case /* UIDENT */15 :
          return query(loc, t[0]);
      default:
        throw [
              $$Error,
              /* Unexpected_token_in_conditional */4,
              loc
            ];
    }
  }
}

function directive_parse(token_with_comments, lexbuf) {
  var look_ahead = /* record */[/* contents */undefined];
  var token = function (param) {
    var v = look_ahead[0];
    if (v !== undefined) {
      look_ahead[0] = undefined;
      return v;
    } else {
      var _param = /* () */0;
      while(true) {
        var t = Curry._1(token_with_comments, lexbuf);
        if (typeof t === "number") {
          switch (t) {
            case /* EOF */25 :
                throw [
                      $$Error,
                      /* Unterminated_if */2,
                      $$Location.curr(lexbuf)
                    ];
            case /* EOL */100 :
                _param = /* () */0;
                continue ;
            default:
              return t;
          }
        } else {
          switch (t.tag | 0) {
            case /* COMMENT */16 :
            case /* DOCSTRING */17 :
                _param = /* () */0;
                continue ;
            default:
              return t;
          }
        }
      };
    }
  };
  var push = function (e) {
    if (look_ahead[0] !== undefined) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "lexer.mll",
              314,
              4
            ]
          ];
    }
    look_ahead[0] = e;
    return /* () */0;
  };
  var token_op = function (calc, no, lhs) {
    var op = token(/* () */0);
    var exit = 0;
    if (typeof op === "number") {
      switch (op) {
        case /* EQUAL */26 :
        case /* GREATER */34 :
        case /* LESS */51 :
            exit = 1;
            break;
        default:
          return Curry._1(no, op);
      }
    } else if (op.tag === /* INFIXOP0 */2) {
      switch (op[0]) {
        case "=~" :
            if (calc) {
              if (typeof lhs !== "number" && lhs.tag === /* Dir_string */3) {
                var curr_loc = $$Location.curr(lexbuf);
                var rhs = value_of_token(curr_loc, token(/* () */0));
                var exit$1 = 0;
                if (typeof rhs === "number" || rhs.tag !== /* Dir_string */3) {
                  exit$1 = 3;
                } else {
                  return semver(curr_loc, lhs[0], rhs[0]);
                }
                if (exit$1 === 3) {
                  throw [
                        $$Error,
                        /* Conditional_expr_expected_type */Block.__(8, [
                            /* Dir_type_string */3,
                            type_of_directive(lhs)
                          ]),
                        $$Location.curr(lexbuf)
                      ];
                }
                
              }
              throw [
                    $$Error,
                    /* Conditional_expr_expected_type */Block.__(8, [
                        /* Dir_type_string */3,
                        type_of_directive(lhs)
                      ]),
                    $$Location.curr(lexbuf)
                  ];
            } else {
              return true;
            }
            break;
        case "<=" :
        case "<>" :
        case ">=" :
            exit = 1;
            break;
        default:
          return Curry._1(no, op);
      }
    } else {
      return Curry._1(no, op);
    }
    if (exit === 1) {
      var f;
      var exit$2 = 0;
      if (typeof op === "number") {
        switch (op) {
          case /* EQUAL */26 :
              f = Caml_obj.caml_equal;
              break;
          case /* GREATER */34 :
              f = Caml_obj.caml_greaterthan;
              break;
          case /* LESS */51 :
              f = Caml_obj.caml_lessthan;
              break;
          default:
            exit$2 = 2;
        }
      } else if (op.tag === /* INFIXOP0 */2) {
        switch (op[0]) {
          case "<=" :
              f = Caml_obj.caml_lessequal;
              break;
          case "<>" :
              f = Caml_obj.caml_notequal;
              break;
          default:
            exit$2 = 2;
        }
      } else {
        exit$2 = 2;
      }
      if (exit$2 === 2) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "lexer.mll",
                333,
                17
              ]
            ];
      }
      var curr_loc$1 = $$Location.curr(lexbuf);
      var rhs$1 = value_of_token(curr_loc$1, token(/* () */0));
      if (calc) {
        return Curry._2(f, lhs, assert_same_type(lexbuf, lhs, rhs$1));
      } else {
        return true;
      }
    }
    
  };
  var parse_relation = function (calc) {
    var curr_token = token(/* () */0);
    var curr_loc = $$Location.curr(lexbuf);
    if (typeof curr_token === "number") {
      switch (curr_token) {
        case /* FALSE */29 :
            return false;
        case /* LPAREN */54 :
            var v = parse_or_aux(calc, parse_and_aux(calc, parse_relation(calc)));
            var match = token(/* () */0);
            if (typeof match === "number") {
              if (match !== 81) {
                throw [
                      $$Error,
                      /* Unterminated_paren_in_conditional */1,
                      $$Location.curr(lexbuf)
                    ];
              }
              return v;
            } else {
              throw [
                    $$Error,
                    /* Unterminated_paren_in_conditional */1,
                    $$Location.curr(lexbuf)
                  ];
            }
        case /* TRUE */91 :
            return true;
        default:
          throw [
                $$Error,
                /* Unexpected_token_in_conditional */4,
                curr_loc
              ];
      }
    } else {
      switch (curr_token.tag | 0) {
        case /* FLOAT */1 :
            var match$1 = curr_token[0];
            if (match$1[1] !== undefined) {
              throw [
                    $$Error,
                    /* Unexpected_token_in_conditional */4,
                    curr_loc
                  ];
            }
            return token_op(calc, (function (_e) {
                          throw [
                                $$Error,
                                /* Conditional_expr_expected_type */Block.__(8, [
                                    /* Dir_type_bool */0,
                                    /* Dir_type_float */1
                                  ]),
                                curr_loc
                              ];
                        }), /* Dir_float */Block.__(1, [Caml_format.caml_float_of_string(match$1[0])]));
        case /* INT */8 :
            var match$2 = curr_token[0];
            if (match$2[1] !== undefined) {
              throw [
                    $$Error,
                    /* Unexpected_token_in_conditional */4,
                    curr_loc
                  ];
            }
            var num_v = cvt_int_literal(match$2[0]);
            return token_op(calc, (function (e) {
                          push(e);
                          return num_v !== 0;
                        }), /* Dir_int */Block.__(2, [num_v]));
        case /* LIDENT */10 :
            var r = curr_token[0];
            switch (r) {
              case "defined" :
              case "undefined" :
                  break;
              default:
                throw [
                      $$Error,
                      /* Unexpected_token_in_conditional */4,
                      curr_loc
                    ];
            }
            var t = token(/* () */0);
            var loc = $$Location.curr(lexbuf);
            if (typeof t === "number") {
              throw [
                    $$Error,
                    /* Unexpected_token_in_conditional */4,
                    loc
                  ];
            } else if (t.tag === /* UIDENT */15) {
              var s = t[0];
              if (calc) {
                if (Caml_string.get(r, 0) === /* "u" */117) {
                  return !defined(s);
                } else {
                  return defined(s);
                }
              } else {
                return true;
              }
            } else {
              throw [
                    $$Error,
                    /* Unexpected_token_in_conditional */4,
                    loc
                  ];
            }
            break;
        case /* STRING */14 :
            return token_op(calc, (function (_e) {
                          throw [
                                $$Error,
                                /* Conditional_expr_expected_type */Block.__(8, [
                                    /* Dir_type_bool */0,
                                    /* Dir_type_string */3
                                  ]),
                                curr_loc
                              ];
                        }), /* Dir_string */Block.__(3, [curr_token[0][0]]));
        case /* UIDENT */15 :
            var value_v = query(curr_loc, curr_token[0]);
            return token_op(calc, (function (e) {
                          push(e);
                          if (typeof value_v !== "number" && !value_v.tag) {
                            return value_v[0];
                          }
                          var ty = type_of_directive(value_v);
                          throw [
                                $$Error,
                                /* Conditional_expr_expected_type */Block.__(8, [
                                    /* Dir_type_bool */0,
                                    ty
                                  ]),
                                curr_loc
                              ];
                        }), value_v);
        default:
          throw [
                $$Error,
                /* Unexpected_token_in_conditional */4,
                curr_loc
              ];
      }
    }
  };
  var parse_and_aux = function (calc, v) {
    var e = token(/* () */0);
    if (typeof e === "number" && e === 0) {
      var calc$1 = calc && v;
      var b = parse_and_aux(calc$1, parse_relation(calc$1));
      if (v) {
        return b;
      } else {
        return false;
      }
    } else {
      push(e);
      return v;
    }
  };
  var parse_or_aux = function (calc, v) {
    var e = token(/* () */0);
    if (typeof e === "number" && e === 8) {
      var calc$1 = calc && !v;
      var b = parse_or_aux(calc$1, parse_and_aux(calc$1, parse_relation(calc$1)));
      if (v) {
        return true;
      } else {
        return b;
      }
    } else {
      push(e);
      return v;
    }
  };
  var v = parse_or_aux(true, parse_and_aux(true, parse_relation(true)));
  var match = token(/* () */0);
  if (typeof match === "number") {
    if (match !== 88) {
      throw [
            $$Error,
            /* Expect_hash_then_in_conditional */5,
            $$Location.curr(lexbuf)
          ];
    }
    return v;
  } else {
    throw [
          $$Error,
          /* Expect_hash_then_in_conditional */5,
          $$Location.curr(lexbuf)
        ];
  }
}

function is_elif(i) {
  if (typeof i === "number" || !(i.tag === /* LIDENT */10 && i[0] === "elif")) {
    return false;
  } else {
    return true;
  }
}

var keyword_table = Misc.create_hashtable(149, /* :: */[
      /* tuple */[
        "and",
        /* AND */2
      ],
      /* :: */[
        /* tuple */[
          "as",
          /* AS */3
        ],
        /* :: */[
          /* tuple */[
            "assert",
            /* ASSERT */4
          ],
          /* :: */[
            /* tuple */[
              "begin",
              /* BEGIN */10
            ],
            /* :: */[
              /* tuple */[
                "class",
                /* CLASS */11
              ],
              /* :: */[
                /* tuple */[
                  "constraint",
                  /* CONSTRAINT */17
                ],
                /* :: */[
                  /* tuple */[
                    "do",
                    /* DO */18
                  ],
                  /* :: */[
                    /* tuple */[
                      "done",
                      /* DONE */19
                    ],
                    /* :: */[
                      /* tuple */[
                        "downto",
                        /* DOWNTO */22
                      ],
                      /* :: */[
                        /* tuple */[
                          "else",
                          /* ELSE */23
                        ],
                        /* :: */[
                          /* tuple */[
                            "end",
                            /* END */24
                          ],
                          /* :: */[
                            /* tuple */[
                              "exception",
                              /* EXCEPTION */27
                            ],
                            /* :: */[
                              /* tuple */[
                                "external",
                                /* EXTERNAL */28
                              ],
                              /* :: */[
                                /* tuple */[
                                  "false",
                                  /* FALSE */29
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "for",
                                    /* FOR */30
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "fun",
                                      /* FUN */31
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "function",
                                        /* FUNCTION */32
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "functor",
                                          /* FUNCTOR */33
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "if",
                                            /* IF */37
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "in",
                                              /* IN */38
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "include",
                                                /* INCLUDE */39
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "inherit",
                                                  /* INHERIT */40
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "initializer",
                                                    /* INITIALIZER */41
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "lazy",
                                                      /* LAZY */42
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "let",
                                                        /* LET */53
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "match",
                                                          /* MATCH */58
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            "method",
                                                            /* METHOD */59
                                                          ],
                                                          /* :: */[
                                                            /* tuple */[
                                                              "module",
                                                              /* MODULE */63
                                                            ],
                                                            /* :: */[
                                                              /* tuple */[
                                                                "mutable",
                                                                /* MUTABLE */64
                                                              ],
                                                              /* :: */[
                                                                /* tuple */[
                                                                  "new",
                                                                  /* NEW */65
                                                                ],
                                                                /* :: */[
                                                                  /* tuple */[
                                                                    "nonrec",
                                                                    /* NONREC */66
                                                                  ],
                                                                  /* :: */[
                                                                    /* tuple */[
                                                                      "object",
                                                                      /* OBJECT */67
                                                                    ],
                                                                    /* :: */[
                                                                      /* tuple */[
                                                                        "of",
                                                                        /* OF */68
                                                                      ],
                                                                      /* :: */[
                                                                        /* tuple */[
                                                                          "open",
                                                                          /* OPEN */69
                                                                        ],
                                                                        /* :: */[
                                                                          /* tuple */[
                                                                            "or",
                                                                            /* OR */70
                                                                          ],
                                                                          /* :: */[
                                                                            /* tuple */[
                                                                              "private",
                                                                              /* PRIVATE */75
                                                                            ],
                                                                            /* :: */[
                                                                              /* tuple */[
                                                                                "rec",
                                                                                /* REC */80
                                                                              ],
                                                                              /* :: */[
                                                                                /* tuple */[
                                                                                  "sig",
                                                                                  /* SIG */85
                                                                                ],
                                                                                /* :: */[
                                                                                  /* tuple */[
                                                                                    "struct",
                                                                                    /* STRUCT */87
                                                                                  ],
                                                                                  /* :: */[
                                                                                    /* tuple */[
                                                                                      "then",
                                                                                      /* THEN */88
                                                                                    ],
                                                                                    /* :: */[
                                                                                      /* tuple */[
                                                                                        "to",
                                                                                        /* TO */90
                                                                                      ],
                                                                                      /* :: */[
                                                                                        /* tuple */[
                                                                                          "true",
                                                                                          /* TRUE */91
                                                                                        ],
                                                                                        /* :: */[
                                                                                          /* tuple */[
                                                                                            "try",
                                                                                            /* TRY */92
                                                                                          ],
                                                                                          /* :: */[
                                                                                            /* tuple */[
                                                                                              "type",
                                                                                              /* TYPE */93
                                                                                            ],
                                                                                            /* :: */[
                                                                                              /* tuple */[
                                                                                                "val",
                                                                                                /* VAL */95
                                                                                              ],
                                                                                              /* :: */[
                                                                                                /* tuple */[
                                                                                                  "virtual",
                                                                                                  /* VIRTUAL */96
                                                                                                ],
                                                                                                /* :: */[
                                                                                                  /* tuple */[
                                                                                                    "when",
                                                                                                    /* WHEN */97
                                                                                                  ],
                                                                                                  /* :: */[
                                                                                                    /* tuple */[
                                                                                                      "while",
                                                                                                      /* WHILE */98
                                                                                                    ],
                                                                                                    /* :: */[
                                                                                                      /* tuple */[
                                                                                                        "with",
                                                                                                        /* WITH */99
                                                                                                      ],
                                                                                                      /* :: */[
                                                                                                        /* tuple */[
                                                                                                          "lor",
                                                                                                          /* INFIXOP3 */Block.__(5, ["lor"])
                                                                                                        ],
                                                                                                        /* :: */[
                                                                                                          /* tuple */[
                                                                                                            "lxor",
                                                                                                            /* INFIXOP3 */Block.__(5, ["lxor"])
                                                                                                          ],
                                                                                                          /* :: */[
                                                                                                            /* tuple */[
                                                                                                              "mod",
                                                                                                              /* INFIXOP3 */Block.__(5, ["mod"])
                                                                                                            ],
                                                                                                            /* :: */[
                                                                                                              /* tuple */[
                                                                                                                "land",
                                                                                                                /* INFIXOP3 */Block.__(5, ["land"])
                                                                                                              ],
                                                                                                              /* :: */[
                                                                                                                /* tuple */[
                                                                                                                  "lsl",
                                                                                                                  /* INFIXOP4 */Block.__(6, ["lsl"])
                                                                                                                ],
                                                                                                                /* :: */[
                                                                                                                  /* tuple */[
                                                                                                                    "lsr",
                                                                                                                    /* INFIXOP4 */Block.__(6, ["lsr"])
                                                                                                                  ],
                                                                                                                  /* :: */[
                                                                                                                    /* tuple */[
                                                                                                                      "asr",
                                                                                                                      /* INFIXOP4 */Block.__(6, ["asr"])
                                                                                                                    ],
                                                                                                                    /* [] */0
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]
                                                                                                      ]
                                                                                                    ]
                                                                                                  ]
                                                                                                ]
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var string_buffer = $$Buffer.create(256);

var string_start_loc = /* record */[/* contents */$$Location.none];

var comment_start_loc = /* record */[/* contents : [] */0];

function in_comment(param) {
  return comment_start_loc[0] !== /* [] */0;
}

var is_in_string = /* record */[/* contents */false];

function in_string(param) {
  return is_in_string[0];
}

var print_warnings = /* record */[/* contents */true];

var if_then_else = /* record */[/* contents : Dir_out */2];

var sharp_look_ahead = /* record */[/* contents */undefined];

function store_escaped_char(lexbuf, c) {
  if (in_comment(/* () */0)) {
    var s = Lexing.lexeme(lexbuf);
    return $$Buffer.add_string(string_buffer, s);
  } else {
    return $$Buffer.add_char(string_buffer, c);
  }
}

function store_escaped_uchar(lexbuf, u) {
  if (in_comment(/* () */0)) {
    var s = Lexing.lexeme(lexbuf);
    return $$Buffer.add_string(string_buffer, s);
  } else {
    return $$Buffer.add_utf_8_uchar(string_buffer, u);
  }
}

function with_comment_buffer(comment, lexbuf) {
  var start_loc = $$Location.curr(lexbuf);
  comment_start_loc[0] = /* :: */[
    start_loc,
    /* [] */0
  ];
  $$Buffer.reset(string_buffer);
  var end_loc = Curry._1(comment, lexbuf);
  var s = $$Buffer.contents(string_buffer);
  $$Buffer.reset(string_buffer);
  var loc_000 = /* loc_start */start_loc[/* loc_start */0];
  var loc_001 = /* loc_end */end_loc[/* loc_end */1];
  var loc_002 = /* loc_ghost */start_loc[/* loc_ghost */2];
  var loc = /* record */[
    loc_000,
    loc_001,
    loc_002
  ];
  return /* tuple */[
          s,
          loc
        ];
}

function hex_digit_value(d) {
  if (d >= 97) {
    return d - 87 | 0;
  } else if (d >= 65) {
    return d - 55 | 0;
  } else {
    return d - 48 | 0;
  }
}

function hex_num_value(lexbuf, first, last) {
  var _acc = 0;
  var _i = first;
  while(true) {
    var i = _i;
    var acc = _acc;
    var match = i > last;
    if (match) {
      return acc;
    } else {
      var value = hex_digit_value(Lexing.lexeme_char(lexbuf, i));
      _i = i + 1 | 0;
      _acc = (acc << 4) + value | 0;
      continue ;
    }
  };
}

function char_for_backslash(c) {
  if (c >= 110) {
    if (c >= 117) {
      return c;
    } else {
      switch (c - 110 | 0) {
        case 0 :
            return /* "\n" */10;
        case 4 :
            return /* "\r" */13;
        case 1 :
        case 2 :
        case 3 :
        case 5 :
            return c;
        case 6 :
            return /* "\t" */9;
        
      }
    }
  } else if (c !== 98) {
    return c;
  } else {
    return /* "\b" */8;
  }
}

function char_for_decimal_code(lexbuf, i) {
  var c = (Caml_int32.imul(100, Lexing.lexeme_char(lexbuf, i) - 48 | 0) + Caml_int32.imul(10, Lexing.lexeme_char(lexbuf, i + 1 | 0) - 48 | 0) | 0) + (Lexing.lexeme_char(lexbuf, i + 2 | 0) - 48 | 0) | 0;
  if (c < 0 || c > 255) {
    if (in_comment(/* () */0)) {
      return /* "x" */120;
    } else {
      throw [
            $$Error,
            /* Illegal_escape */Block.__(1, [Lexing.lexeme(lexbuf)]),
            $$Location.curr(lexbuf)
          ];
    }
  } else {
    return Char.chr(c);
  }
}

function char_for_octal_code(lexbuf, i) {
  return Char.chr((((Lexing.lexeme_char(lexbuf, i) - 48 | 0) << 6) + ((Lexing.lexeme_char(lexbuf, i + 1 | 0) - 48 | 0) << 3) | 0) + (Lexing.lexeme_char(lexbuf, i + 2 | 0) - 48 | 0) | 0);
}

function char_for_hexadecimal_code(lexbuf, i) {
  return Char.chr(hex_num_value(lexbuf, i, i + 1 | 0));
}

function uchar_for_uchar_escape(lexbuf) {
  var err = function (e) {
    throw [
          $$Error,
          /* Illegal_escape */Block.__(1, [Lexing.lexeme(lexbuf) + e]),
          $$Location.curr(lexbuf)
        ];
  };
  var len = Lexing.lexeme_end(lexbuf) - Lexing.lexeme_start(lexbuf) | 0;
  var last = len - 2 | 0;
  var digit_count = (last - 3 | 0) + 1 | 0;
  var match = digit_count > 6;
  if (match) {
    return err(", too many digits, expected 1 to 6 hexadecimal digits");
  } else {
    var cp = hex_num_value(lexbuf, 3, last);
    if (Uchar.is_valid(cp)) {
      return Uchar.unsafe_of_int(cp);
    } else {
      return err(", " + (Curry._1(Printf.sprintf(/* Format */[
                            /* Int */Block.__(4, [
                                /* Int_X */8,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* End_of_format */0
                              ]),
                            "%X"
                          ]), cp) + " is not a Unicode scalar value"));
    }
  }
}

function get_label_name(lexbuf) {
  var s = Lexing.lexeme(lexbuf);
  var name = $$String.sub(s, 1, s.length - 2 | 0);
  if (Hashtbl.mem(keyword_table, name)) {
    throw [
          $$Error,
          /* Keyword_as_label */Block.__(4, [name]),
          $$Location.curr(lexbuf)
        ];
  }
  return name;
}

function update_loc(lexbuf, file, line, absolute, chars) {
  var pos = lexbuf[/* lex_curr_p */11];
  var new_file = file !== undefined ? file : pos[/* pos_fname */0];
  lexbuf[/* lex_curr_p */11] = /* record */[
    /* pos_fname */new_file,
    /* pos_lnum */absolute ? line : pos[/* pos_lnum */1] + line | 0,
    /* pos_bol */pos[/* pos_cnum */3] - chars | 0,
    /* pos_cnum */pos[/* pos_cnum */3]
  ];
  return /* () */0;
}

var preprocessor = /* record */[/* contents */undefined];

var escaped_newlines = /* record */[/* contents */false];

function warn_latin1(lexbuf) {
  return $$Location.deprecated(undefined, undefined, $$Location.curr(lexbuf), "ISO-Latin1 characters in identifiers");
}

var handle_docstrings = /* record */[/* contents */true];

var comment_list = /* record */[/* contents : [] */0];

function add_comment(com) {
  comment_list[0] = /* :: */[
    com,
    comment_list[0]
  ];
  return /* () */0;
}

function add_docstring_comment(ds) {
  return add_comment(/* tuple */[
              "*" + Docstrings.docstring_body(ds),
              Docstrings.docstring_loc(ds)
            ]);
}

function comments(param) {
  return List.rev(comment_list[0]);
}

function report_error(ppf, param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Unterminated_string */0 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "String literal not terminated",
                          /* End_of_format */0
                        ]),
                      "String literal not terminated"
                    ]);
      case /* Unterminated_paren_in_conditional */1 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Unterminated parens in conditional predicate",
                          /* End_of_format */0
                        ]),
                      "Unterminated parens in conditional predicate"
                    ]);
      case /* Unterminated_if */2 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "#if not terminated",
                          /* End_of_format */0
                        ]),
                      "#if not terminated"
                    ]);
      case /* Unterminated_else */3 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "#else not terminated",
                          /* End_of_format */0
                        ]),
                      "#else not terminated"
                    ]);
      case /* Unexpected_token_in_conditional */4 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Unexpected token in conditional predicate",
                          /* End_of_format */0
                        ]),
                      "Unexpected token in conditional predicate"
                    ]);
      case /* Expect_hash_then_in_conditional */5 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Expect `then` after conditional predicate",
                          /* End_of_format */0
                        ]),
                      "Expect `then` after conditional predicate"
                    ]);
      case /* Unexpected_directive */6 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Unexpected directive",
                          /* End_of_format */0
                        ]),
                      "Unexpected directive"
                    ]);
      
    }
  } else {
    switch (param.tag | 0) {
      case /* Illegal_character */0 :
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Illegal character (",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* ")" */41,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Illegal character (%s)"
                        ]), Char.escaped(param[0]));
      case /* Illegal_escape */1 :
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Illegal backslash escape in string or character (",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* ")" */41,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Illegal backslash escape in string or character (%s)"
                        ]), param[0]);
      case /* Unterminated_comment */2 :
          return Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Comment not terminated",
                          /* End_of_format */0
                        ]),
                      "Comment not terminated"
                    ]);
      case /* Unterminated_string_in_comment */3 :
          return Curry._2(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "This comment contains an unterminated string literal",
                              /* Formatting_lit */Block.__(17, [
                                  /* Flush_newline */4,
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          "String literal begins here",
                                          /* End_of_format */0
                                        ])])
                                ])
                            ]),
                          "This comment contains an unterminated string literal@.%aString literal begins here"
                        ]), $$Location.print_error, param[1]);
      case /* Keyword_as_label */4 :
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "`" */96,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "' is a keyword, it cannot be used as label name",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "`%s' is a keyword, it cannot be used as label name"
                        ]), param[0]);
      case /* Invalid_literal */5 :
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Invalid literal ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "Invalid literal %s"
                        ]), param[0]);
      case /* Invalid_directive */6 :
          var explanation = param[1];
          Curry._1(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Invalid lexer directive ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Invalid lexer directive %S"
                  ]), param[0]);
          if (explanation !== undefined) {
            return Curry._1(Format.fprintf(ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                ": ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            ": %s"
                          ]), explanation);
          } else {
            return /* () */0;
          }
      case /* Illegal_semver */7 :
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Illegal semantic version string ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "Illegal semantic version string %s"
                        ]), param[0]);
      case /* Conditional_expr_expected_type */8 :
          return Curry._2(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "Conditional expression type mismatch (",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "," */44,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* ")" */41,
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "Conditional expression type mismatch (%s,%s)"
                        ]), string_of_type_directive(param[0]), string_of_type_directive(param[1]));
      
    }
  }
}

$$Location.register_error_of_exn((function (param) {
        if (param[0] === $$Error) {
          return $$Location.error_of_printer(param[2], report_error, param[1]);
        }
        
      }));

var __ocaml_lex_tables = /* record */[
  /* lex_base */"\0\0\xa2\xff\xa3\xff\xe0\0\x03\x01&\x01I\x01l\x01\x8f\x01\xba\xff\xb2\x01\xd7\x01\xc2\xff[\0\xfc\x01\x1f\x02D\0G\0A\x02d\x02\xd4\xff\xd6\xff\xd9\xff\x87\x02\xe6\x02\t\x03X\0\xff\0'\x03\xec\xff{\x03\xcf\x03#\x04\xf3\x04\xc3\x05\x93\x06r\x07\xce\x07\x9e\bz\0\xfe\xff\x01\0\x05\0\xff\xff\x06\0\x07\0}\t\x9b\tk\n\xfa\xff\xf9\xff;\x0b\x0b\f\xf7\xff\xf6\xff\xdb\f/\r\x83\r\xd7\r+\x0e\x7f\x0e\xd3\x0e'\x0f{\x0f\xcf\x0f#\x10W\0w\x10\xcb\x10\x1f\x11s\x11\xc7\x11l\0\xc0\xff\xeb\xff\x07\x03\"\x12j\0k\0\x0b\0\xea\xff\xe9\xff\xe4\xff\x98\x02c\0v\0q\0\xe8\xff\x80\0\x93\0\xe7\xff\xe0\0\x03\x01\x94\0\xe6\xffn\x04\x95\0\xe5\xff\x94\0\xe0\xff\xd9\0\xdf\xff\xde\0\"\x12\xde\xffI\x12e\x05\t\x03\xdd\xff\f\0\x0e\x01P\x01s\x01\x18\x01\xdd\xff\r\0w\x12\x9e\x12\xc1\x12\xe7\x12\n\x13\xd1\xff\xcc\xff\xcd\xff\xce\xff\xca\xff-\x13\x9a\0\xb7\0\xc3\xff\xc4\xff\xc5\xff\xd9\0\xb6\xff\xb4\xff\xbd\xffP\x13\xb9\xff\xbb\xffs\x13\x96\x13\xb9\x13\xdc\x13\x82\x05\xf3\xff\xf4\xff\x11\0\xf5\xff\xae\x01\xdf\x05\xfd\xff\xf8\0\xf9\0\xff\xff\xfe\xff\xfc\xff\x05\x06\xee\x13\x03\x01\x04\x01\x12\0\xfb\xff\xfa\xff\xf9\xff\xde\x06\x1a\x03\x05\x01\xf8\xff$\x03\b\x01\xf7\xffB\b\x14\x01\xf6\xff;\x01\xea\x01\xf5\xff\xf6\xff\xf7\xff<\x017\x14\xff\xff\xf8\xff\xc1\0\xe9\b&\x01\x85\x04\xfd\xffI\x01^\x01q\x01\x8f\x04\xfc\xff\xc0\x02\x1b\x04\xfb\xff\xe6\t\xfa\xff\xb6\nY\x14\xf9\xff\x81\x01\x82\x01\xfc\xffU\x07\xfe\xff\xff\xff\x92\x01\x93\x01\xfd\xff\xb1\x07!\x01,\x01\x94\x01\x97\x01-\x01\x99\x01,\x01\x13\0\xff\xff",
  /* lex_backtrk */"\xff\xff\xff\xff\xff\xffZ\0Y\0V\0U\0N\0L\0\xff\xffC\0@\0\xff\xff9\x008\x006\x004\x000\0-\0Q\0\xff\xff\xff\xff\xff\xff$\0#\0*\0(\0'\0>\0\xff\xff\x0e\0\x0e\0\r\0\f\0\x0b\0\n\0\x07\0\x04\0\x03\0\x02\0\xff\xff]\0]\0\xff\xff\xff\xff\xff\xffT\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\x12\0\x10\0\x0f\0\x12\0\x0f\0\x0f\0\x0e\0\x10\0\x0f\0\x10\0\xff\xff\x11\0\x11\0\x0e\0\x0e\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\0\xff\xff\x1d\0\xff\xff\x1e\0X\0\xff\xff[\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff%\0W\0R\0,\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\0J\0G\0\xff\xff\xff\xff\xff\xffH\0\xff\xff\xff\xff\xff\xffA\0\xff\xff\xff\xffS\0M\0P\0O\0\xff\xff\xff\xff\xff\xff\f\0\xff\xff\f\0\f\0\xff\xff\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\xff\xff\x01\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_default */"\x01\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xffM\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xffR\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xffn\0\xff\xff\0\0\xff\xffn\0o\0n\0q\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x90\0\0\0\0\0\xff\xff\0\0\x9e\0\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xb0\0\0\0\0\0\0\0\xff\xff\xb6\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xcb\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xd5\0\xd8\0\xff\xff\xd8\0\xff\xff\xff\xff\0\0",
  /* lex_trans */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\0(\0(\0'\0)\0-\0+\0+\0(\0,\0,\0-\0N\0l\0r\0O\0m\0s\0\x91\0\x9f\0\xdb\0\xae\0\xa0\0'\0\b\0\x1d\0\x18\0\x06\0\x04\0\x17\0\x1b\0\x1a\0\x15\0\x19\0\x07\0\x14\0\x13\0\x12\0\x03\0\x1f\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x11\0\x10\0\x0f\0\x0e\0\n\0$\0\x05\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\r\0*\0\f\0\x05\0&\0\x16\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\x1c\0\x0b\0\t\0%\0}\0\x7f\0|\0b\0'\0{\0z\0'\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0Q\0P\0[\0[\0[\0[\0\x82\0W\0\x81\0'\0\x80\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0^\0a\0c\0d\0\x86\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\x83\0 \0 \0 \0 \0 \0 \0 \0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x84\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x02\0\x03\0e\0f\0\x03\0\x03\0\x03\0e\0f\0N\0\x03\0\x03\0O\0\x03\0\x03\0\x03\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0l\0\x85\0\x03\0m\0\x03\0\x03\0\x03\0\x03\0\x03\0\x9a\0r\0\x99\0\x03\0s\0\xff\xff\x03\0\x03\0\x03\0\xa3\0\xa2\0\xa7\0\x03\0\x03\0\xaa\0\x03\0\x03\0\x03\0]\0]\0]\0]\0]\0]\0]\0]\0\xad\0\xc6\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xd4\0\x91\0\xb2\0\x05\0\xae\0\xc9\0\x05\0\x05\0\x05\0\xd5\0\xd9\0\xda\0\x05\0\x05\0\xbc\0\x05\0\x05\0\x05\0\xc1\0\xc1\0\xc1\0\xc1\0l\0L\0\x03\0m\0\x03\0\0\0\x05\0\x03\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\xbc\0\xbc\0\x06\0\xbe\0\0\0\x06\0\x06\0\x06\0\0\0\0\0q\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\xbc\0p\0l\0\xbe\0\x03\0m\0\x03\0\0\0\x06\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\xb2\0\xce\0u\0\xc9\0\xcf\0u\0u\0u\0p\0\0\0o\0u\0u\0\0\0u\0\x8e\0u\0\xce\0\xce\0\xd6\0\xd0\0\xd0\0\xd7\0\x05\0\xd7\0\x05\0\0\0u\0\x06\0u\0\x8d\0u\0u\0u\0\0\0\0\0\0\0\x8b\0\0\0\0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\x9f\0\x8b\0\x8b\0\xa0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\x8b\0u\0\x8b\0\x8c\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\x06\0\0\0\xa1\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0u\0\0\0u\0\0\0\x06\0\x8b\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\xb2\0\0\0\0\0\xb3\0\x06\0\0\0\0\0\x06\0\x06\0\x06\0\xcc\0\xff\xff\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x9d\0\x8b\0\xb5\0\x8b\0\xff\xff\x8a\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\x06\0\x89\0\x06\0\0\0\0\0\0\0\x87\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\0\0\0\0\x06\0\x06\0\x06\0\xb4\0\0\0\0\0\x06\0\x06\0\0\0~\0\x06\0\x06\0\0\0\xff\xff\0\0\0\0\x88\0\0\0\x06\0\0\0\0\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0x\0\0\0\0\0x\0x\0x\0\0\0\0\0\0\0x\0x\0\0\0x\0y\0x\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0x\0\0\0\x06\0x\0x\0x\0x\0\xcd\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0u\0\0\0u\0v\0u\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\0\0\x06\0\0\0\x06\0u\0x\0u\0u\0w\0u\0u\0\0\0\0\0\0\0\x06\0\0\0\0\0\x06\0\x06\0t\0\xff\xff\0\0\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0x\0\0\0x\0\0\0\x06\0u\0\x06\0\x06\0\x06\0\x06\0\x06\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\0_\0_\0_\0_\0_\0\0\0u\0\0\0u\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\xb1\0\0\0\0\0\0\0\0\0k\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\0\0_\0_\0_\0_\0_\0_\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0k\0i\0\0\0i\0i\0i\0i\0\0\0\0\0\0\0i\0i\0k\0i\0i\0i\0j\0j\0j\0j\0j\0j\0j\0j\0j\0j\0i\0\0\0i\0i\0i\0i\0i\0\0\0\0\0k\0\x03\0\0\0\0\0\x03\0\x03\0\x03\0\0\0\0\0h\0g\0\x03\0\0\0\x03\0\x03\0\x03\0j\0j\0j\0j\0j\0j\0j\0j\0j\0j\0\x03\0i\0\x03\0\x03\0\x03\0\x03\0\x03\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\xa9\0\0\0\0\0\0\0\0\0i\0I\0i\0\0\0K\0\x03\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\0\0J\0\0\0\x03\0K\0\x03\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\x007\0J\0\0\0\0\0\0\0\0\0\0\x009\0\0\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x008\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\0\0\0\0\0\0\0\0\x1e\0\0\x007\x007\x007\x007\x008\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\x007\0\0\0\0\0\0\0\0\0\0\0\0\x009\0\0\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\0;\x007\x007\x008\x007\0:\0:\0:\0:\0:\0:\0:\0:\0<\0:\0:\0:\0:\0:\0:\0:\0:\0=\0:\0:\0\0\0\0\0\0\0\0\0\x1e\0\0\x007\0;\x007\x007\x008\x007\0:\0:\0:\0:\0:\0:\0:\0:\0<\0:\0:\0:\0:\0:\0:\0:\0:\0=\0:\0:\0 \0\xc3\0\xc3\0\xc3\0\xc3\0\xc3\0\xc3\0\xc3\0\xc3\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\0\0\0\0\0\0\0\0 \0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0`\0`\0`\0`\0`\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0`\0`\0`\0`\0`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0!\0 \0 \0 \0 \0 \0 \0 \0 \0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0\0\0\0\0\0\0!\0\0\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0p\0l\0\0\0\0\0m\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0p\0\0\0o\0\0\0\0\0\0\0\0\0\x91\0\0\0\0\0\x92\0\0\0\0\0\0\0\0\0\0\0j\0j\0j\0j\0j\0j\0j\0j\0j\0j\0\0\0\0\0\0\0\0\0\0\0\x96\0\0\0\0\0\0\0\0\0\x94\0\x98\0\0\0\x97\0\0\0\0\0\0\0\0\0\0\0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\0\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\"\0 \0 \0 \0 \0 \0 \0 \0 \0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\0\0\0\0\0\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x9c\0\0\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\0\0\x9b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9c\0\xff\xff\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\0\0\x9b\0\x93\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0#\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0\0\0\0\0\0\0#\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0.\0\0\0\0\0.\0.\0.\0\0\0\0\0\0\0.\0.\0\0\0.\0.\0.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0.\0\0\0.\0.\0.\0.\0.\0\0\0\xd2\0\0\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0.\x004\0\xd1\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0.\0.\0.\0\0\0.\0.\0.\0\0\0\0\0\0\0.\0.\0\0\0.\0.\0.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0.\0\0\0.\0.\0.\0.\0.\0\0\0\xd2\0\0\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0.\x000\0\xd1\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\0\0.\0\0\0.\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\0\x003\x003\x003\x003\x003\x003\x003\x003\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xac\0\xac\0\xac\0\xac\0\xac\0\xac\0\0\0\0\0\0\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0#\0/\0/\0/\0/\0/\0/\0/\0/\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0\0\0\0\0\0\0#\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\0\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0.\0\0\0\0\0.\0.\0.\0\0\0\0\0\0\0.\0.\0\0\0.\0.\0.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0.\0\0\0.\0.\0.\0.\0.\0\0\0\0\0\0\0\0\0/\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x002\0\0\0\0\0\0\0\0\0\0\0.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\0\0\0\0\0\0.\0/\0.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\0/\0/\0/\0/\0/\0/\0/\0/\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\0\0\0\0\0\0\0\0\0\0\0\0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\0\0\0\0\0\0\0\x000\0\0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\0\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x003\0/\0/\0/\0/\0/\0/\0/\0/\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x006\0\0\0\0\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\0\0\0\0\0\0\0\x003\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\0\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\x004\0\0\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x007\x003\x003\x003\x003\x003\x003\x003\x003\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0H\0\0\0H\0\0\0\0\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x008\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\0\0\0\0\0\0\0\x009\0\0\x007\x007\x007\x007\x008\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\0F\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0E\0E\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0>\0>\0>\0>\0>\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\0>\0>\0>\0>\0>\0>\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0?\0\0\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0>\0>\0>\0>\0>\0:\0:\0:\0:\0:\0:\0:\0:\0:\0@\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\0\0\0\0\0\0\0\0>\0\0\0>\0>\0>\0>\0>\0>\0:\0:\0:\0:\0:\0:\0:\0:\0:\0@\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0?\0?\0?\0?\0?\0?\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\0\0\0\0\0\0\0\0?\0\0\0?\0?\0?\0?\0?\0?\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\x007\0\0\0\0\0\0\0B\0\0\0B\0\0\0\0\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\0\0\0\0\0\0\0\0A\0\0\x007\x007\x007\x007\x007\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0B\0\0\0B\0\0\0\0\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\x007\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0E\0E\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\0\0\0\0\0\0\0\0E\0\0\x007\x007\x007\x007\x007\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\0F\x007\x007\x007\x007\x007\x007\x007\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\0\0\0\0\0\0\0\0F\0\0\x007\x007\x007\x007\x007\x007\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\x007\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x007\x007\x007\x007\x007\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\0\0\0\0\0\0\0\0G\0\0\x007\x007\x007\x007\x007\x007\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0V\0g\0V\0\0\0g\0g\0g\0V\0\0\0\0\0g\0g\0\0\0g\0g\0g\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0g\0\0\0g\0g\0g\0g\0g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0i\0\0\0i\0i\0i\0i\0\0\0\0\0\0\0i\0i\0\0\0i\0i\0i\0\0\0\0\0\0\0\0\0\0\0V\0\0\0g\0\0\0\0\0i\0V\0i\0i\0i\0i\0i\0\0\0\0\0\0\0\0\0\0\0\0\0V\0T\0\0\0\0\0V\0\0\0V\0\0\0\x06\0\0\0S\0\x06\0\x06\0\x06\0g\0\0\0g\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0i\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0i\0\0\0i\0u\0u\0\0\0u\0u\0u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0u\0\0\0u\0u\0u\0u\0u\0\0\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0u\0\0\0u\0u\0u\0\0\0\0\0\x06\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0u\0u\0u\0u\0u\0u\0u\0\0\0\0\0\0\0\0\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0u\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0\0\0u\0\0\0\0\0u\0\0\0u\0\xff\xffu\0u\0u\0u\0u\0\0\0\0\0\0\0x\0\0\0\0\0x\0x\0x\0\0\0\0\0\0\0x\0x\0\0\0x\0x\0x\0\0\0\0\0\0\0u\0\0\0u\0\0\0\0\0\0\0\0\0x\0u\0x\0x\0x\0x\0x\0\0\0\0\0\0\0\x06\0\0\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0u\0\0\0u\0\0\0\x06\0x\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\0\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x06\0\x06\0\0\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0x\0\0\0x\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\x8b\0\0\0\0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\x8b\0\x8b\0\0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\x8b\0\x06\0\x8b\0\x8b\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\x8b\0\0\0\0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\x8b\0\x8b\0\0\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\x8b\0\x8b\0\x8b\0\x8b\0\x8b\0\x8b\0\x8b\0\0\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0u\0\0\0u\0u\0u\0\0\0\0\0\0\0\0\0\0\0\0\0\x8b\0\0\0\x8b\0\0\0u\0\x8b\0u\0u\0u\0u\0u\0\0\0\0\0\0\0u\0\0\0\0\0u\0u\0u\0\0\0\0\0\0\0u\0u\0\0\0u\0u\0u\0\0\0\0\0\xa6\0\0\0\xa6\0\0\0\x8b\0\0\0\x8b\0\xa6\0u\0u\0u\0u\0u\0u\0u\0\0\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0u\0\0\0u\0\0\0\0\0u\0\0\0\0\0\0\0\0\0\0\0\0\0\xbc\0\0\0\0\0\xbd\0\0\0\0\0\0\0\0\0\0\0\xa6\0\0\0\0\0\0\0\0\0\0\0\xa6\0\0\0\0\0\0\0\0\0\0\0\0\0\xbb\0u\0\xbb\0u\0\0\0\xa6\0\0\0\xbb\0\0\0\xa6\0\0\0\xa6\0\0\0\0\0\0\0\xa4\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xbb\0\0\0\0\0\0\0\0\0\0\0\xbb\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\xbb\0\xb9\0\0\0\0\0\xbb\0\0\0\xbb\0\xb7\0\0\0\0\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_check */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0)\0\0\0\0\0)\0*\0,\0-\0*\0,\0-\0O\0m\0s\0O\0m\0s\0\x92\0\xa0\0\xda\0\x92\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\r\0\x11\0\x1a\0'\0\x11\0\x11\0'\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0M\0N\0T\0T\0T\0T\0\r\0V\0\r\0'\0\r\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0Y\0]\0`\0b\0b\0\x7f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0d\0d\0\x03\0\x03\0\x03\0f\0f\0\x1b\0\x03\0\x03\0\x1b\0\x03\0\x03\0\x03\0[\0[\0[\0[\0[\0[\0[\0[\0n\0\x84\0\x03\0n\0\x03\0\x03\0\x03\0\x03\0\x03\0\x97\0q\0\x98\0\x04\0q\0\x1b\0\x04\0\x04\0\x04\0\x9e\0\x9f\0\xa6\0\x04\0\x04\0\xa9\0\x04\0\x04\0\x04\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\xac\0\xb7\0\x04\0\x03\0\x04\0\x04\0\x04\0\x04\0\x04\0\xd3\0\xae\0\xb3\0\x05\0\xae\0\xb3\0\x05\0\x05\0\x05\0\xd4\0\xd7\0\xd9\0\x05\0\x05\0\xbc\0\x05\0\x05\0\x05\0\xb9\0\xb9\0\xb9\0\xb9\0o\0\x1b\0\x03\0o\0\x03\0\xff\xff\x05\0\x04\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xbd\0\xbc\0\x06\0\xbd\0\xff\xff\x06\0\x06\0\x06\0\xff\xff\xff\xffo\0\x06\0\x06\0\xff\xff\x06\0\x06\0\x06\0\xff\xff\xff\xff\xbe\0p\0p\0\xbe\0\x04\0p\0\x04\0\xff\xff\x06\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xc9\0\xca\0\x07\0\xc9\0\xca\0\x07\0\x07\0\x07\0p\0\xff\xffp\0\x07\0\x07\0\xff\xff\x07\0\x07\0\x07\0\xcf\0\xd0\0\xd5\0\xcf\0\xd0\0\xd6\0\x05\0\xd8\0\x05\0\xff\xff\x07\0\x06\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\b\0\xff\xff\xff\xff\b\0\b\0\b\0\xff\xff\xff\xff\x94\0\b\0\b\0\x94\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\x06\0\xff\xff\b\0\x07\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\n\0\xff\xff\x94\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\n\0\n\0\xff\xff\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\x07\0\xff\xff\n\0\b\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xaf\0\xff\xff\xff\xff\xaf\0\x0b\0\xff\xff\xff\xff\x0b\0\x0b\0\x0b\0\xca\0\x1b\0\xff\xff\x0b\0\x0b\0\xff\xff\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\x94\0\b\0\xaf\0\b\0n\0\n\0\n\0\x0b\0\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0q\0\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\x0e\0\x0e\0\xff\xff\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\x0b\0\x0b\0\x0e\0\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\xaf\0\xff\xff\xff\xff\x0f\0\x0f\0\xff\xff\x0f\0\x0f\0\x0f\0\xff\xffo\0\xff\xff\xff\xff\x0b\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\x0f\0\x0e\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\x12\0\xff\xff\xff\xff\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\x12\0\x12\0\xff\xff\x12\0\x12\0\x12\0\xff\xff\xff\xffp\0\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\x0e\0\x12\0\xff\xff\x0f\0\x12\0\x12\0\x12\0\x12\0\xca\0\xff\xff\xff\xff\x13\0\xff\xff\xff\xff\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\x13\0\x13\0\xff\xff\x13\0\x13\0\x13\0\xd5\0\xff\xff\xff\xff\xd6\0\xff\xff\xd8\0\xff\xff\x0f\0\xff\xff\x0f\0\x13\0\x12\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\xff\xff\x17\0\x17\0\x17\0\x94\0\xff\xff\xff\xff\x17\0\x17\0\xff\xff\x17\0\x17\0\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\xff\xff\x17\0\x13\0\x17\0\x17\0\x17\0\x17\0\x17\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0\xff\xff\x13\0\xff\xff\x13\0\xff\xff\xff\xff\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xaf\0\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\xc1\0\xc1\0\xc1\0\xc1\0\xc1\0\xc1\0\xc1\0\xc1\0\xff\xffS\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\x17\0\x18\0\x18\0\xff\xff\x18\0\x18\0\x18\0\x18\0\xff\xff\xff\xff\xff\xff\x18\0\x18\0k\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\xff\xff\x18\0\x18\0\x18\0\x18\0\x18\0\xff\xff\xff\xffk\0\x19\0\xff\xff\xff\xff\x19\0\x19\0\x19\0\xff\xff\xff\xff\x19\0\x19\0\x19\0\xff\xff\x19\0\x19\0\x19\0k\0k\0k\0k\0k\0k\0k\0k\0k\0k\0\x19\0\x18\0\x19\0\x19\0\x19\0\x19\0\x19\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa5\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xa8\0\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\x1c\0\x18\0\xff\xffK\0\x19\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\xff\xffK\0\xff\xff\x19\0\x1c\0\x19\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1e\0\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0 \0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0\xc2\0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\xff\xff\xff\xff\xff\xff\xff\xff \0\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff_\0_\0_\0_\0_\0_\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xba\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff_\0_\0_\0_\0_\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0!\0 \0 \0 \0 \0 \0 \0 \0 \0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff!\0\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0j\0j\0\xff\xff\xff\xffj\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffj\0\xff\xffj\0\xff\xff\xff\xff\xff\xff\xff\xff\x8f\0\xff\xff\xff\xff\x8f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffj\0j\0j\0j\0j\0j\0j\0j\0j\0j\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\0\xff\xff\xff\xff\xff\xff\xff\xff\x8f\0\x8f\0\xff\xff\x8f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\"\0!\0!\0!\0!\0!\0!\0!\0!\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x8f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\xff\xff\xff\xff\xff\xff\xff\xff\"\0\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\x95\0\xff\xff\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\x95\0\xff\xff\x95\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9c\0j\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\x9c\0\xff\xff\x9c\0\x8f\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0#\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff#\0\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xa4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0$\0\xff\xff\xff\xff$\0$\0$\0\xff\xff\xff\xff\xff\xff$\0$\0\xff\xff$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0\xff\xff$\0$\0$\0$\0$\0\xff\xff\xcc\0\xff\xff\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0$\0$\0\xcc\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff$\0%\0$\0\xff\xff%\0%\0%\0\xff\xff\xff\xff\xff\xff%\0%\0\xff\xff%\0%\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff%\0\xff\xff%\0%\0%\0%\0%\0\xff\xff\xd2\0\xff\xff\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0\xd2\0%\0%\0\xd2\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\xff\xff%\0\xff\xff%\0\xff\xff\xff\xff\xff\xff\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xab\0\xab\0\xab\0\xab\0\xab\0\xab\0\xff\xff\xff\xff\xff\xff\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0&\0%\0%\0%\0%\0%\0%\0%\0%\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff&\0\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0.\0\xff\xff\xff\xff.\0.\0.\0\xff\xff\xff\xff\xff\xff.\0.\0\xff\xff.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff.\0/\0.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xc4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\0/\0/\0/\0/\0/\0/\0/\0/\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x003\x000\x000\x000\x000\x000\x000\x000\x000\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff3\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff4\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x007\x004\x004\x004\x004\x004\x004\x004\x004\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff7\0\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x008\0\xff\xff\xff\xff\xff\xff8\0\xff\xff8\0\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff8\0\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff9\0\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff:\0\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff;\0\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff<\0\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0@\0\xff\xff\xff\xff\xff\xff@\0\xff\xff@\0\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff@\0\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0C\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xffC\0\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0\xff\xff\xff\xff\xff\xffD\0\xff\xffD\0\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xffD\0\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xffE\0\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xffF\0\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0L\0g\0L\0\xff\xffg\0g\0g\0L\0\xff\xff\xff\xffg\0g\0\xff\xffg\0g\0g\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0g\0\xff\xffg\0g\0g\0g\0g\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffi\0\xff\xffi\0i\0i\0i\0\xff\xff\xff\xff\xff\xffi\0i\0\xff\xffi\0i\0i\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0\xff\xffg\0\xff\xff\xff\xffi\0L\0i\0i\0i\0i\0i\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0\xff\xff\xff\xffL\0\xff\xffL\0\xff\xfft\0\xff\xffL\0t\0t\0t\0g\0\xff\xffg\0t\0t\0\xff\xfft\0t\0t\0i\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\0\xff\xfft\0t\0t\0t\0t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffu\0\xff\xff\xff\xffu\0u\0u\0i\0\xff\xffi\0u\0u\0\xff\xffu\0u\0u\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\0\xff\xff\xff\xffu\0\xff\xffu\0u\0u\0u\0u\0\xff\xff\xff\xff\xff\xffv\0\xff\xff\xff\xffv\0v\0v\0\xff\xff\xff\xff\xff\xffv\0v\0\xff\xffv\0v\0v\0\xff\xff\xff\xfft\0\xff\xfft\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffv\0u\0v\0v\0v\0v\0v\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffw\0\xff\xff\xff\xffw\0w\0w\0\xff\xff\xff\xff\xff\xffw\0w\0\xff\xffw\0w\0w\0\xff\xff\xff\xff\xff\xffu\0\xff\xffu\0\xff\xff\xff\xffv\0\xff\xffw\0L\0w\0w\0w\0w\0w\0\xff\xff\xff\xff\xff\xffx\0\xff\xff\xff\xffx\0x\0x\0\xff\xff\xff\xff\xff\xffx\0x\0\xff\xffx\0x\0x\0\xff\xff\xff\xff\xff\xffv\0\xff\xffv\0\xff\xff\xff\xff\xff\xff\xff\xffx\0w\0x\0x\0x\0x\0x\0\xff\xff\xff\xff\xff\xff~\0\xff\xff\xff\xff~\0~\0~\0\xff\xff\xff\xff\xff\xff~\0~\0\xff\xff~\0~\0~\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffw\0\xff\xffw\0\xff\xff~\0x\0~\0~\0~\0~\0~\0\xff\xff\xff\xff\xff\xff\x88\0\xff\xff\xff\xff\x88\0\x88\0\x88\0\xff\xff\xff\xff\xff\xff\x88\0\x88\0\xff\xff\x88\0\x88\0\x88\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffx\0\xff\xffx\0\xff\xff\x88\0~\0\x88\0\x88\0\x88\0\x88\0\x88\0\xff\xff\xff\xff\xff\xff\x8b\0\xff\xff\xff\xff\x8b\0\x8b\0\x8b\0\xff\xff\xff\xff\xff\xff\x8b\0\x8b\0\xff\xff\x8b\0\x8b\0\x8b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\0\xff\xff~\0\xff\xff\x8b\0\x88\0\x8b\0\x8b\0\x8b\0\x8b\0\x8b\0\xff\xff\xff\xff\xff\xff\x8c\0\xff\xff\xff\xff\x8c\0\x8c\0\x8c\0\xff\xff\xff\xff\xff\xff\x8c\0\x8c\0\xff\xff\x8c\0\x8c\0\x8c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\0\xff\xff\x88\0\xff\xff\x8c\0\x8b\0\x8c\0\x8c\0\x8c\0\x8c\0\x8c\0\xff\xff\xff\xff\xff\xff\x8d\0\xff\xff\xff\xff\x8d\0\x8d\0\x8d\0\xff\xff\xff\xff\xff\xff\x8d\0\x8d\0\xff\xff\x8d\0\x8d\0\x8d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8b\0\xff\xff\x8b\0\xff\xff\x8d\0\x8c\0\x8d\0\x8d\0\x8d\0\x8d\0\x8d\0\xff\xff\xff\xff\xff\xff\x8e\0\xff\xff\xff\xff\x8e\0\x8e\0\x8e\0\xff\xff\xff\xff\xff\xff\x8e\0\x8e\0\xff\xff\x8e\0\x8e\0\x8e\0\xff\xff\xff\xff\x9d\0\xff\xff\x9d\0\xff\xff\x8c\0\xff\xff\x8c\0\x9d\0\x8e\0\x8d\0\x8e\0\x8e\0\x8e\0\x8e\0\x8e\0\xff\xff\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\x9d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\0\xff\xff\x8d\0\xff\xff\xff\xff\x8e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\0\xff\xff\xff\xff\xb4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\0\x8e\0\xb4\0\x8e\0\xff\xff\x9d\0\xff\xff\xb4\0\xff\xff\x9d\0\xff\xff\x9d\0\xff\xff\xff\xff\xff\xff\x9d\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xb4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\0\xb4\0\xff\xff\xff\xff\xb4\0\xff\xff\xb4\0\xb4\0\xff\xff\xff\xff\xb4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_base_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0$\0\x16\0\0\0\0\0\0\0\x05\0\0\0'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_backtrk_codex005\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_default_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_trans_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x002\x002\0\0\0\t\x002\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\t\0\x01\0\0\0\t\0\0\0\"\0\0\0\0\0\t\0\0\0\f\0\x01\0\0\0\0\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x
  /* lex_check_code */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\0o\0\xb4\0\xbd\0o\0p\0\xbe\0\xff\xff\xff\xff\xff\xffj\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\xff\xffo\0\0\0\xff\xffp\0\xff\xffp\0\xff\xff\xff\xffj\0\xff\xffj\0k\0\xff\xff\xff\xff\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0j\0j\0j\0j\0j\0j\0j\0j\0j\0j\0k\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffk\0k\0k\0k\0k\0k\0k\0k\0k\0k\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffo\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_code */"\xff\x05\xff\xff\x07\xff\x06\xff\xff\x07\xff\xff\t\xff\b\xff\xff\x06\xff\x07\xff\xff\x04\xff\0\x05\x01\x06\x02\x07\xff\t\xff\xff\b\xff\t\xff\xff\0\x05\x01\x06\x04\b\x03\t\x02\x07\xff\x01\xff\xff\0\x01\xff"
];

function token(lexbuf) {
  lexbuf[/* lex_mem */9] = Caml_array.caml_make_vect(10, -1);
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 0;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.new_engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    switch (__ocaml_lex_state$1) {
      case 0 :
          if (!escaped_newlines[0]) {
            throw [
                  $$Error,
                  /* Illegal_character */Block.__(0, [Lexing.lexeme_char(lexbuf$1, 0)]),
                  $$Location.curr(lexbuf$1)
                ];
          }
          update_loc(lexbuf$1, undefined, 1, false, 0);
          return token(lexbuf$1);
      case 1 :
          update_loc(lexbuf$1, undefined, 1, false, 0);
          return /* EOL */100;
      case 2 :
          return token(lexbuf$1);
      case 3 :
          return /* UNDERSCORE */94;
      case 4 :
          return /* TILDE */89;
      case 5 :
          return /* LABEL */Block.__(9, [get_label_name(lexbuf$1)]);
      case 6 :
          warn_latin1(lexbuf$1);
          return /* LABEL */Block.__(9, [get_label_name(lexbuf$1)]);
      case 7 :
          return /* QUESTION */76;
      case 8 :
          return /* OPTLABEL */Block.__(11, [get_label_name(lexbuf$1)]);
      case 9 :
          warn_latin1(lexbuf$1);
          return /* OPTLABEL */Block.__(11, [get_label_name(lexbuf$1)]);
      case 10 :
          var s = Lexing.lexeme(lexbuf$1);
          try {
            return Hashtbl.find(keyword_table, s);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return /* LIDENT */Block.__(10, [s]);
            } else {
              throw exn;
            }
          }
      case 11 :
          warn_latin1(lexbuf$1);
          return /* LIDENT */Block.__(10, [Lexing.lexeme(lexbuf$1)]);
      case 12 :
          return /* UIDENT */Block.__(15, [Lexing.lexeme(lexbuf$1)]);
      case 13 :
          warn_latin1(lexbuf$1);
          return /* UIDENT */Block.__(15, [Lexing.lexeme(lexbuf$1)]);
      case 14 :
          return /* INT */Block.__(8, [/* tuple */[
                      Lexing.lexeme(lexbuf$1),
                      undefined
                    ]]);
      case 15 :
          var lit = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4], lexbuf$1[/* lex_curr_pos */5] - 1 | 0);
          var modif = Lexing.sub_lexeme_char(lexbuf$1, lexbuf$1[/* lex_curr_pos */5] - 1 | 0);
          return /* INT */Block.__(8, [/* tuple */[
                      lit,
                      modif
                    ]]);
      case 16 :
          return /* FLOAT */Block.__(1, [/* tuple */[
                      Lexing.lexeme(lexbuf$1),
                      undefined
                    ]]);
      case 17 :
          var lit$1 = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4], lexbuf$1[/* lex_curr_pos */5] - 1 | 0);
          var modif$1 = Lexing.sub_lexeme_char(lexbuf$1, lexbuf$1[/* lex_curr_pos */5] - 1 | 0);
          return /* FLOAT */Block.__(1, [/* tuple */[
                      lit$1,
                      modif$1
                    ]]);
      case 18 :
          throw [
                $$Error,
                /* Invalid_literal */Block.__(5, [Lexing.lexeme(lexbuf$1)]),
                $$Location.curr(lexbuf$1)
              ];
      case 19 :
          $$Buffer.reset(string_buffer);
          is_in_string[0] = true;
          var string_start = lexbuf$1[/* lex_start_p */10];
          string_start_loc[0] = $$Location.curr(lexbuf$1);
          string(lexbuf$1);
          is_in_string[0] = false;
          lexbuf$1[/* lex_start_p */10] = string_start;
          return /* STRING */Block.__(14, [/* tuple */[
                      $$Buffer.contents(string_buffer),
                      undefined
                    ]]);
      case 20 :
          $$Buffer.reset(string_buffer);
          var delim = Lexing.lexeme(lexbuf$1);
          var delim$1 = $$String.sub(delim, 1, delim.length - 2 | 0);
          is_in_string[0] = true;
          var string_start$1 = lexbuf$1[/* lex_start_p */10];
          string_start_loc[0] = $$Location.curr(lexbuf$1);
          __ocaml_lex_quoted_string_rec(delim$1, lexbuf$1, 202);
          is_in_string[0] = false;
          lexbuf$1[/* lex_start_p */10] = string_start$1;
          return /* STRING */Block.__(14, [/* tuple */[
                      $$Buffer.contents(string_buffer),
                      delim$1
                    ]]);
      case 21 :
          update_loc(lexbuf$1, undefined, 1, false, 1);
          return /* CHAR */Block.__(0, [Lexing.lexeme_char(lexbuf$1, 1)]);
      case 22 :
          return /* CHAR */Block.__(0, [Lexing.lexeme_char(lexbuf$1, 1)]);
      case 23 :
          return /* CHAR */Block.__(0, [char_for_backslash(Lexing.lexeme_char(lexbuf$1, 2))]);
      case 24 :
          return /* CHAR */Block.__(0, [char_for_decimal_code(lexbuf$1, 2)]);
      case 25 :
          return /* CHAR */Block.__(0, [char_for_octal_code(lexbuf$1, 3)]);
      case 26 :
          return /* CHAR */Block.__(0, [char_for_hexadecimal_code(lexbuf$1, 3)]);
      case 27 :
          var l = Lexing.lexeme(lexbuf$1);
          var esc = $$String.sub(l, 1, l.length - 1 | 0);
          throw [
                $$Error,
                /* Illegal_escape */Block.__(1, [esc]),
                $$Location.curr(lexbuf$1)
              ];
      case 28 :
          var match = with_comment_buffer(comment, lexbuf$1);
          return /* COMMENT */Block.__(16, [/* tuple */[
                      match[0],
                      match[1]
                    ]]);
      case 29 :
          var match$1 = with_comment_buffer(comment, lexbuf$1);
          var loc = match$1[1];
          var s$1 = match$1[0];
          if (handle_docstrings[0]) {
            return /* DOCSTRING */Block.__(17, [Docstrings.docstring(s$1, loc)]);
          } else {
            return /* COMMENT */Block.__(16, [/* tuple */[
                        "*" + s$1,
                        loc
                      ]]);
          }
      case 30 :
          var stars = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4] + 3 | 0, lexbuf$1[/* lex_curr_pos */5]);
          var match$2 = with_comment_buffer((function(stars){
              return function (lexbuf) {
                $$Buffer.add_string(string_buffer, "*" + stars);
                return __ocaml_lex_comment_rec(lexbuf, 143);
              }
              }(stars)), lexbuf$1);
          return /* COMMENT */Block.__(16, [/* tuple */[
                      match$2[0],
                      match$2[1]
                    ]]);
      case 31 :
          if (print_warnings[0]) {
            $$Location.prerr_warning($$Location.curr(lexbuf$1), /* Comment_start */0);
          }
          var match$3 = with_comment_buffer(comment, lexbuf$1);
          return /* COMMENT */Block.__(16, [/* tuple */[
                      match$3[0],
                      match$3[1]
                    ]]);
      case 32 :
          var stars$1 = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4] + 2 | 0, lexbuf$1[/* lex_curr_pos */5] - 2 | 0);
          if (handle_docstrings[0] && stars$1 === "") {
            return /* DOCSTRING */Block.__(17, [Docstrings.docstring("", $$Location.curr(lexbuf$1))]);
          } else {
            return /* COMMENT */Block.__(16, [/* tuple */[
                        stars$1,
                        $$Location.curr(lexbuf$1)
                      ]]);
          }
      case 33 :
          var loc$1 = $$Location.curr(lexbuf$1);
          $$Location.prerr_warning(loc$1, /* Comment_not_end */1);
          lexbuf$1[/* lex_curr_pos */5] = lexbuf$1[/* lex_curr_pos */5] - 1 | 0;
          var curpos = lexbuf$1[/* lex_curr_p */11];
          lexbuf$1[/* lex_curr_p */11] = /* record */[
            /* pos_fname */curpos[/* pos_fname */0],
            /* pos_lnum */curpos[/* pos_lnum */1],
            /* pos_bol */curpos[/* pos_bol */2],
            /* pos_cnum */curpos[/* pos_cnum */3] - 1 | 0
          ];
          return /* STAR */86;
      case 34 :
          var num = Lexing.sub_lexeme(lexbuf$1, Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 0), Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 1));
          var name = Lexing.sub_lexeme_opt(lexbuf$1, Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 4), Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 3));
          var directive = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4], Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 2));
          var line_num;
          try {
            line_num = Caml_format.caml_int_of_string(num);
          }
          catch (exn$1){
            var loc$2 = $$Location.curr(lexbuf$1);
            var error_001 = "line number out of range";
            var error = /* Invalid_directive */Block.__(6, [
                directive,
                error_001
              ]);
            throw [
                  $$Error,
                  error,
                  loc$2
                ];
          }
          update_loc(lexbuf$1, name, line_num, true, 0);
          return token(lexbuf$1);
      case 35 :
          return /* HASH */84;
      case 36 :
          return /* AMPERSAND */1;
      case 37 :
          return /* AMPERAMPER */0;
      case 38 :
          return /* BACKQUOTE */5;
      case 39 :
          return /* QUOTE */77;
      case 40 :
          return /* LPAREN */54;
      case 41 :
          return /* RPAREN */81;
      case 42 :
          return /* STAR */86;
      case 43 :
          return /* COMMA */16;
      case 44 :
          return /* MINUSGREATER */62;
      case 45 :
          return /* DOT */20;
      case 46 :
          return /* DOTDOT */21;
      case 47 :
          var s$2 = Lexing.sub_lexeme(lexbuf$1, lexbuf$1[/* lex_start_pos */4] + 1 | 0, lexbuf$1[/* lex_curr_pos */5]);
          return /* DOTOP */Block.__(7, [s$2]);
      case 48 :
          return /* COLON */12;
      case 49 :
          return /* COLONCOLON */13;
      case 50 :
          return /* COLONEQUAL */14;
      case 51 :
          return /* COLONGREATER */15;
      case 52 :
          return /* SEMI */82;
      case 53 :
          return /* SEMISEMI */83;
      case 54 :
          return /* LESS */51;
      case 55 :
          return /* LESSMINUS */52;
      case 56 :
          return /* EQUAL */26;
      case 57 :
          return /* LBRACKET */45;
      case 58 :
          return /* LBRACKETBAR */46;
      case 59 :
          return /* LBRACKETLESS */47;
      case 60 :
          return /* LBRACKETGREATER */48;
      case 61 :
          return /* RBRACKET */79;
      case 62 :
          return /* LBRACE */43;
      case 63 :
          return /* LBRACELESS */44;
      case 64 :
          return /* BAR */7;
      case 65 :
          return /* BARBAR */8;
      case 66 :
          return /* BARRBRACKET */9;
      case 67 :
          return /* GREATER */34;
      case 68 :
          return /* GREATERRBRACKET */36;
      case 69 :
          return /* RBRACE */78;
      case 70 :
          return /* GREATERRBRACE */35;
      case 71 :
          return /* LBRACKETAT */55;
      case 72 :
          return /* LBRACKETATAT */56;
      case 73 :
          return /* LBRACKETATATAT */57;
      case 74 :
          return /* LBRACKETPERCENT */49;
      case 75 :
          return /* LBRACKETPERCENTPERCENT */50;
      case 76 :
          return /* BANG */6;
      case 77 :
          return /* INFIXOP0 */Block.__(2, ["!="]);
      case 78 :
          return /* PLUS */72;
      case 79 :
          return /* PLUSDOT */73;
      case 80 :
          return /* PLUSEQ */74;
      case 81 :
          return /* MINUS */60;
      case 82 :
          return /* MINUSDOT */61;
      case 83 :
      case 84 :
          return /* PREFIXOP */Block.__(12, [Lexing.lexeme(lexbuf$1)]);
      case 85 :
          return /* INFIXOP0 */Block.__(2, [Lexing.lexeme(lexbuf$1)]);
      case 86 :
          return /* INFIXOP1 */Block.__(3, [Lexing.lexeme(lexbuf$1)]);
      case 87 :
          return /* INFIXOP2 */Block.__(4, [Lexing.lexeme(lexbuf$1)]);
      case 88 :
          return /* INFIXOP4 */Block.__(6, [Lexing.lexeme(lexbuf$1)]);
      case 89 :
          return /* PERCENT */71;
      case 90 :
          return /* INFIXOP3 */Block.__(5, [Lexing.lexeme(lexbuf$1)]);
      case 91 :
          return /* HASHOP */Block.__(13, [Lexing.lexeme(lexbuf$1)]);
      case 92 :
          if (if_then_else[0] !== /* Dir_out */2) {
            if (if_then_else[0] === /* Dir_if_true */0) {
              throw [
                    $$Error,
                    /* Unterminated_if */2,
                    $$Location.curr(lexbuf$1)
                  ];
            }
            throw [
                  $$Error,
                  /* Unterminated_else */3,
                  $$Location.curr(lexbuf$1)
                ];
          } else {
            return /* EOF */25;
          }
      case 93 :
          throw [
                $$Error,
                /* Illegal_character */Block.__(0, [Lexing.lexeme_char(lexbuf$1, 0)]),
                $$Location.curr(lexbuf$1)
              ];
      default:
        Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function __ocaml_lex_quoted_string_rec(delim, lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    switch (__ocaml_lex_state$1) {
      case 0 :
          update_loc(lexbuf, undefined, 1, false, 0);
          var s = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s);
          ___ocaml_lex_state = 202;
          continue ;
      case 1 :
          is_in_string[0] = false;
          throw [
                $$Error,
                /* Unterminated_string */0,
                string_start_loc[0]
              ];
      case 2 :
          var edelim = Lexing.lexeme(lexbuf);
          var edelim$1 = $$String.sub(edelim, 1, edelim.length - 2 | 0);
          if (delim === edelim$1) {
            return /* () */0;
          } else {
            var s$1 = Lexing.lexeme(lexbuf);
            $$Buffer.add_string(string_buffer, s$1);
            ___ocaml_lex_state = 202;
            continue ;
          }
      case 3 :
          var c = Lexing.lexeme_char(lexbuf, 0);
          $$Buffer.add_char(string_buffer, c);
          ___ocaml_lex_state = 202;
          continue ;
      default:
        Curry._1(lexbuf[/* refill_buff */0], lexbuf);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function string(lexbuf) {
  lexbuf[/* lex_mem */9] = Caml_array.caml_make_vect(2, -1);
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 175;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.new_engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    switch (__ocaml_lex_state$1) {
      case 0 :
          return /* () */0;
      case 1 :
          var space = Lexing.sub_lexeme(lexbuf$1, Caml_array.caml_array_get(lexbuf$1[/* lex_mem */9], 0), lexbuf$1[/* lex_curr_pos */5]);
          update_loc(lexbuf$1, undefined, 1, false, space.length);
          if (in_comment(/* () */0)) {
            var s = Lexing.lexeme(lexbuf$1);
            $$Buffer.add_string(string_buffer, s);
          }
          return string(lexbuf$1);
      case 2 :
          store_escaped_char(lexbuf$1, char_for_backslash(Lexing.lexeme_char(lexbuf$1, 1)));
          return string(lexbuf$1);
      case 3 :
          store_escaped_char(lexbuf$1, char_for_decimal_code(lexbuf$1, 1));
          return string(lexbuf$1);
      case 4 :
          store_escaped_char(lexbuf$1, char_for_octal_code(lexbuf$1, 2));
          return string(lexbuf$1);
      case 5 :
          store_escaped_char(lexbuf$1, char_for_hexadecimal_code(lexbuf$1, 2));
          return string(lexbuf$1);
      case 6 :
          store_escaped_uchar(lexbuf$1, uchar_for_uchar_escape(lexbuf$1));
          return string(lexbuf$1);
      case 7 :
          if (!in_comment(/* () */0)) {
            var loc = $$Location.curr(lexbuf$1);
            $$Location.prerr_warning(loc, /* Illegal_backslash */6);
          }
          var s$1 = Lexing.lexeme(lexbuf$1);
          $$Buffer.add_string(string_buffer, s$1);
          return string(lexbuf$1);
      case 8 :
          if (!in_comment(/* () */0)) {
            $$Location.prerr_warning($$Location.curr(lexbuf$1), /* Eol_in_string */13);
          }
          update_loc(lexbuf$1, undefined, 1, false, 0);
          var s$2 = Lexing.lexeme(lexbuf$1);
          $$Buffer.add_string(string_buffer, s$2);
          return string(lexbuf$1);
      case 9 :
          is_in_string[0] = false;
          throw [
                $$Error,
                /* Unterminated_string */0,
                string_start_loc[0]
              ];
      case 10 :
          var c = Lexing.lexeme_char(lexbuf$1, 0);
          $$Buffer.add_char(string_buffer, c);
          return string(lexbuf$1);
      default:
        Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function __ocaml_lex_comment_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    switch (__ocaml_lex_state$1) {
      case 0 :
          comment_start_loc[0] = /* :: */[
            $$Location.curr(lexbuf),
            comment_start_loc[0]
          ];
          var s = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s);
          ___ocaml_lex_state = 143;
          continue ;
      case 1 :
          var match = comment_start_loc[0];
          if (match) {
            var l = match[1];
            if (l) {
              comment_start_loc[0] = l;
              var s$1 = Lexing.lexeme(lexbuf);
              $$Buffer.add_string(string_buffer, s$1);
              ___ocaml_lex_state = 143;
              continue ;
            } else {
              comment_start_loc[0] = /* [] */0;
              return $$Location.curr(lexbuf);
            }
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "lexer.mll",
                    997,
                    16
                  ]
                ];
          }
      case 2 :
          string_start_loc[0] = $$Location.curr(lexbuf);
          $$Buffer.add_char(string_buffer, /* "\"" */34);
          is_in_string[0] = true;
          try {
            string(lexbuf);
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn[0] === $$Error) {
              var match$1 = exn[1];
              if (typeof match$1 === "number") {
                if (match$1 !== 0) {
                  throw exn;
                }
                var match$2 = comment_start_loc[0];
                if (match$2) {
                  var start = List.hd(List.rev(comment_start_loc[0]));
                  comment_start_loc[0] = /* [] */0;
                  throw [
                        $$Error,
                        /* Unterminated_string_in_comment */Block.__(3, [
                            start,
                            exn[2]
                          ]),
                        match$2[0]
                      ];
                } else {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "lexer.mll",
                          1011,
                          18
                        ]
                      ];
                }
              } else {
                throw exn;
              }
            } else {
              throw exn;
            }
          }
          is_in_string[0] = false;
          $$Buffer.add_char(string_buffer, /* "\"" */34);
          ___ocaml_lex_state = 143;
          continue ;
      case 3 :
          var delim = Lexing.lexeme(lexbuf);
          var delim$1 = $$String.sub(delim, 1, delim.length - 2 | 0);
          string_start_loc[0] = $$Location.curr(lexbuf);
          var s$2 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$2);
          is_in_string[0] = true;
          try {
            __ocaml_lex_quoted_string_rec(delim$1, lexbuf, 202);
          }
          catch (raw_exn$1){
            var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
            if (exn$1[0] === $$Error) {
              var match$3 = exn$1[1];
              if (typeof match$3 === "number") {
                if (match$3 !== 0) {
                  throw exn$1;
                }
                var match$4 = comment_start_loc[0];
                if (match$4) {
                  var start$1 = List.hd(List.rev(comment_start_loc[0]));
                  comment_start_loc[0] = /* [] */0;
                  throw [
                        $$Error,
                        /* Unterminated_string_in_comment */Block.__(3, [
                            start$1,
                            exn$1[2]
                          ]),
                        match$4[0]
                      ];
                } else {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "lexer.mll",
                          1031,
                          18
                        ]
                      ];
                }
              } else {
                throw exn$1;
              }
            } else {
              throw exn$1;
            }
          }
          is_in_string[0] = false;
          $$Buffer.add_char(string_buffer, /* "|" */124);
          $$Buffer.add_string(string_buffer, delim$1);
          $$Buffer.add_char(string_buffer, /* "}" */125);
          ___ocaml_lex_state = 143;
          continue ;
      case 4 :
          var s$3 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$3);
          ___ocaml_lex_state = 143;
          continue ;
      case 5 :
          update_loc(lexbuf, undefined, 1, false, 1);
          var s$4 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$4);
          ___ocaml_lex_state = 143;
          continue ;
      case 6 :
          var s$5 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$5);
          ___ocaml_lex_state = 143;
          continue ;
      case 7 :
          var s$6 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$6);
          ___ocaml_lex_state = 143;
          continue ;
      case 8 :
          var s$7 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$7);
          ___ocaml_lex_state = 143;
          continue ;
      case 9 :
          var s$8 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$8);
          ___ocaml_lex_state = 143;
          continue ;
      case 10 :
          var match$5 = comment_start_loc[0];
          if (match$5) {
            var start$2 = List.hd(List.rev(comment_start_loc[0]));
            comment_start_loc[0] = /* [] */0;
            throw [
                  $$Error,
                  /* Unterminated_comment */Block.__(2, [start$2]),
                  match$5[0]
                ];
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "lexer.mll",
                    1061,
                    16
                  ]
                ];
          }
      case 11 :
          update_loc(lexbuf, undefined, 1, false, 0);
          var s$9 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$9);
          ___ocaml_lex_state = 143;
          continue ;
      case 12 :
          var s$10 = Lexing.lexeme(lexbuf);
          $$Buffer.add_string(string_buffer, s$10);
          ___ocaml_lex_state = 143;
          continue ;
      default:
        Curry._1(lexbuf[/* refill_buff */0], lexbuf);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function comment(lexbuf) {
  return __ocaml_lex_comment_rec(lexbuf, 143);
}

function skip_hash_bang(lexbuf) {
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 211;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    switch (__ocaml_lex_state$1) {
      case 0 :
          return update_loc(lexbuf$1, undefined, 3, false, 0);
      case 1 :
          return update_loc(lexbuf$1, undefined, 1, false, 0);
      case 2 :
          return /* () */0;
      default:
        Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
    }
  };
}

function at_bol(lexbuf) {
  var pos = Lexing.lexeme_start_p(lexbuf);
  return pos[/* pos_cnum */3] === pos[/* pos_bol */2];
}

function token_with_comments(lexbuf) {
  var match = preprocessor[0];
  if (match !== undefined) {
    return Curry._2(match[1], token, lexbuf);
  } else {
    return token(lexbuf);
  }
}

function interpret_directive(lexbuf, cont, look_ahead) {
  var if_then_else$1 = if_then_else[0];
  var match = token_with_comments(lexbuf);
  if (typeof match === "number") {
    switch (match) {
      case /* ELSE */23 :
          if (if_then_else$1 !== 0) {
            throw [
                  $$Error,
                  /* Unexpected_directive */6,
                  $$Location.curr(lexbuf)
                ];
          }
          break;
      case /* END */24 :
          if (if_then_else$1 >= 2) {
            throw [
                  $$Error,
                  /* Unexpected_directive */6,
                  $$Location.curr(lexbuf)
                ];
          }
          if_then_else[0] = /* Dir_out */2;
          return Curry._1(cont, lexbuf);
      case /* IF */37 :
          if (if_then_else$1 >= 2) {
            if (directive_parse(token_with_comments, lexbuf)) {
              if_then_else[0] = /* Dir_if_true */0;
              return Curry._1(cont, lexbuf);
            } else {
              var _param = /* () */0;
              while(true) {
                var token = token_with_comments(lexbuf);
                if (token === /* EOF */25) {
                  throw [
                        $$Error,
                        /* Unterminated_if */2,
                        $$Location.curr(lexbuf)
                      ];
                }
                if (token === /* HASH */84 && at_bol(lexbuf)) {
                  var token$1 = token_with_comments(lexbuf);
                  if (typeof token$1 === "number") {
                    var switcher = token$1 - 23 | 0;
                    if (switcher === 0 || switcher === 1) {
                      if (switcher !== 0) {
                        if_then_else[0] = /* Dir_out */2;
                        return Curry._1(cont, lexbuf);
                      } else {
                        if_then_else[0] = /* Dir_if_false */1;
                        return Curry._1(cont, lexbuf);
                      }
                    } else if (switcher === 14) {
                      throw [
                            $$Error,
                            /* Unexpected_directive */6,
                            $$Location.curr(lexbuf)
                          ];
                    }
                    
                  }
                  if (is_elif(token$1) && directive_parse(token_with_comments, lexbuf)) {
                    if_then_else[0] = /* Dir_if_true */0;
                    return Curry._1(cont, lexbuf);
                  } else {
                    _param = /* () */0;
                    continue ;
                  }
                } else {
                  _param = /* () */0;
                  continue ;
                }
              };
            }
          } else {
            throw [
                  $$Error,
                  /* Unexpected_directive */6,
                  $$Location.curr(lexbuf)
                ];
          }
      default:
        return Curry._1(look_ahead, match);
    }
  } else if (match.tag === /* LIDENT */10 && match[0] === "elif") {
    if (if_then_else$1 !== 0) {
      throw [
            $$Error,
            /* Unexpected_directive */6,
            $$Location.curr(lexbuf)
          ];
    }
    
  } else {
    return Curry._1(look_ahead, match);
  }
  if (if_then_else$1 !== 0) {
    return Curry._1(look_ahead, match);
  } else {
    var _else_seen = match === /* ELSE */23;
    while(true) {
      var else_seen = _else_seen;
      var token$2 = token_with_comments(lexbuf);
      if (token$2 === /* EOF */25) {
        throw [
              $$Error,
              /* Unterminated_else */3,
              $$Location.curr(lexbuf)
            ];
      }
      if (token$2 === /* HASH */84 && at_bol(lexbuf)) {
        var token$3 = token_with_comments(lexbuf);
        if (typeof token$3 === "number") {
          var switcher$1 = token$3 - 23 | 0;
          if (switcher$1 === 0 || switcher$1 === 1) {
            if (switcher$1 !== 0) {
              if_then_else[0] = /* Dir_out */2;
              return Curry._1(cont, lexbuf);
            } else {
              if (else_seen) {
                throw [
                      $$Error,
                      /* Unexpected_directive */6,
                      $$Location.curr(lexbuf)
                    ];
              }
              _else_seen = true;
              continue ;
            }
          } else if (switcher$1 === 14) {
            throw [
                  $$Error,
                  /* Unexpected_directive */6,
                  $$Location.curr(lexbuf)
                ];
          }
          
        }
        if (else_seen && is_elif(token$3)) {
          throw [
                $$Error,
                /* Unexpected_directive */6,
                $$Location.curr(lexbuf)
              ];
        }
        continue ;
      } else {
        continue ;
      }
    };
  }
}

function token$1(lexbuf) {
  var post_pos = Lexing.lexeme_end_p(lexbuf);
  var attach = function (lines, docs, pre_pos) {
    if (typeof docs === "number") {
      return /* () */0;
    } else if (docs.tag) {
      var b = docs[2];
      var f = docs[1];
      var a = docs[0];
      if (lines >= 2) {
        Docstrings.set_post_docstrings(post_pos, List.rev(a));
        Docstrings.set_post_extra_docstrings(post_pos, List.rev_append(f, List.rev(b)));
        Docstrings.set_floating_docstrings(pre_pos, List.rev_append(f, List.rev(b)));
        return Docstrings.set_pre_extra_docstrings(pre_pos, List.rev(a));
      } else {
        Docstrings.set_post_docstrings(post_pos, List.rev(a));
        Docstrings.set_post_extra_docstrings(post_pos, List.rev_append(f, List.rev(b)));
        Docstrings.set_floating_docstrings(pre_pos, List.rev(f));
        Docstrings.set_pre_extra_docstrings(pre_pos, List.rev(a));
        return Docstrings.set_pre_docstrings(pre_pos, b);
      }
    } else {
      var a$1 = docs[0];
      if (lines >= 2) {
        Docstrings.set_post_docstrings(post_pos, List.rev(a$1));
        return Docstrings.set_pre_extra_docstrings(pre_pos, List.rev(a$1));
      } else {
        Docstrings.set_post_docstrings(post_pos, List.rev(a$1));
        return Docstrings.set_pre_docstrings(pre_pos, a$1);
      }
    }
  };
  var loop = function (_lines, _docs, lexbuf) {
    while(true) {
      var docs = _docs;
      var lines = _lines;
      var tok = token_with_comments(lexbuf);
      if (typeof tok === "number") {
        switch (tok) {
          case /* HASH */84 :
              if (at_bol(lexbuf)) {
                return interpret_directive(lexbuf, (function(lines,docs){
                          return function (lexbuf) {
                            return loop(lines, docs, lexbuf);
                          }
                          }(lines,docs)), (function (token) {
                              sharp_look_ahead[0] = token;
                              return /* HASH */84;
                            }));
              }
              break;
          case /* EOL */100 :
              var lines$prime = lines !== 0 ? /* BlankLine */2 : /* NewLine */1;
              _lines = lines$prime;
              continue ;
          default:
            
        }
      } else {
        switch (tok.tag | 0) {
          case /* COMMENT */16 :
              var match = tok[0];
              add_comment(/* tuple */[
                    match[0],
                    match[1]
                  ]);
              var lines$prime$1 = lines >= 2 ? /* BlankLine */2 : /* NoLine */0;
              _lines = lines$prime$1;
              continue ;
          case /* DOCSTRING */17 :
              var doc = tok[0];
              Docstrings.register(doc);
              add_docstring_comment(doc);
              var docs$prime;
              if (Docstrings.docstring_body(doc) === "/*") {
                docs$prime = typeof docs === "number" ? /* Before */Block.__(1, [
                      /* [] */0,
                      /* :: */[
                        doc,
                        /* [] */0
                      ],
                      /* [] */0
                    ]) : (
                    docs.tag ? /* Before */Block.__(1, [
                          docs[0],
                          Pervasives.$at(/* :: */[
                                doc,
                                docs[2]
                              ], docs[1]),
                          /* [] */0
                        ]) : /* Before */Block.__(1, [
                          docs[0],
                          /* :: */[
                            doc,
                            /* [] */0
                          ],
                          /* [] */0
                        ])
                  );
              } else if (typeof docs === "number") {
                docs$prime = lines >= 2 ? /* Before */Block.__(1, [
                      /* [] */0,
                      /* [] */0,
                      /* :: */[
                        doc,
                        /* [] */0
                      ]
                    ]) : /* After */Block.__(0, [/* :: */[
                        doc,
                        /* [] */0
                      ]]);
              } else if (docs.tag) {
                var b = docs[2];
                var f = docs[1];
                var a = docs[0];
                docs$prime = lines >= 2 ? /* Before */Block.__(1, [
                      a,
                      Pervasives.$at(b, f),
                      /* :: */[
                        doc,
                        /* [] */0
                      ]
                    ]) : /* Before */Block.__(1, [
                      a,
                      f,
                      /* :: */[
                        doc,
                        b
                      ]
                    ]);
              } else {
                var a$1 = docs[0];
                docs$prime = lines >= 2 ? /* Before */Block.__(1, [
                      a$1,
                      /* [] */0,
                      /* :: */[
                        doc,
                        /* [] */0
                      ]
                    ]) : /* After */Block.__(0, [/* :: */[
                        doc,
                        a$1
                      ]]);
              }
              _docs = docs$prime;
              _lines = /* NoLine */0;
              continue ;
          default:
            
        }
      }
      attach(lines, docs, Lexing.lexeme_start_p(lexbuf));
      return tok;
    };
  };
  var match = sharp_look_ahead[0];
  if (match !== undefined) {
    sharp_look_ahead[0] = undefined;
    return match;
  } else {
    return loop(/* NoLine */0, /* Initial */0, lexbuf);
  }
}

function init(param) {
  sharp_look_ahead[0] = undefined;
  if_then_else[0] = /* Dir_out */2;
  is_in_string[0] = false;
  comment_start_loc[0] = /* [] */0;
  comment_list[0] = /* [] */0;
  var match = preprocessor[0];
  if (match !== undefined) {
    return Curry._1(match[0], /* () */0);
  } else {
    return /* () */0;
  }
}

function filter_directive(pos, acc, lexbuf) {
  while(true) {
    var match = token_with_comments(lexbuf);
    if (typeof match === "number") {
      if (match !== 25) {
        if (match !== 84) {
          continue ;
        } else if (at_bol(lexbuf)) {
          var start_pos = Lexing.lexeme_start(lexbuf);
          return interpret_directive(lexbuf, (function(start_pos){
                    return function (lexbuf) {
                      return filter_directive(Lexing.lexeme_end(lexbuf), /* :: */[
                                  /* tuple */[
                                    pos,
                                    start_pos
                                  ],
                                  acc
                                ], lexbuf);
                    }
                    }(start_pos)), (function (_token) {
                        return filter_directive(pos, acc, lexbuf);
                      }));
        } else {
          continue ;
        }
      } else {
        return /* :: */[
                /* tuple */[
                  pos,
                  Lexing.lexeme_end(lexbuf)
                ],
                acc
              ];
      }
    } else {
      continue ;
    }
  };
}

function filter_directive_from_lexbuf(lexbuf) {
  return List.rev(filter_directive(0, /* [] */0, lexbuf));
}

function set_preprocessor(init, preprocess) {
  escaped_newlines[0] = true;
  preprocessor[0] = /* tuple */[
    init,
    preprocess
  ];
  return /* () */0;
}

export {
  init ,
  token$1 as token,
  skip_hash_bang ,
  $$Error ,
  report_error ,
  in_comment ,
  in_string ,
  print_warnings ,
  handle_docstrings ,
  comments ,
  token_with_comments ,
  set_preprocessor ,
  semver ,
  filter_directive_from_lexbuf ,
  replace_directive_int ,
  replace_directive_string ,
  replace_directive_bool ,
  remove_directive_built_in_value ,
  define_key_value ,
  list_variables ,
  
}
/* directive_built_in_values Not a pure module */
