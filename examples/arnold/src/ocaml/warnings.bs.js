// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Arg from "bs-platform/lib/es6/arg.js";
import * as Char from "bs-platform/lib/es6/char.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function number(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Comment_start */0 :
          return 1;
      case /* Comment_not_end */1 :
          return 2;
      case /* Partial_application */2 :
          return 5;
      case /* Statement_type */3 :
          return 10;
      case /* Unused_match */4 :
          return 11;
      case /* Unused_pat */5 :
          return 12;
      case /* Illegal_backslash */6 :
          return 14;
      case /* Unerasable_optional_argument */7 :
          return 16;
      case /* Unused_argument */8 :
          return 20;
      case /* Nonreturning_statement */9 :
          return 21;
      case /* Useless_record_with */10 :
          return 23;
      case /* All_clauses_guarded */11 :
          return 8;
      case /* Wildcard_arg_to_constant_constr */12 :
          return 28;
      case /* Eol_in_string */13 :
          return 29;
      case /* Unused_rec_flag */14 :
          return 39;
      case /* Expect_tailcall */15 :
          return 51;
      case /* Fragile_literal_pattern */16 :
          return 52;
      case /* Unreachable_case */17 :
          return 56;
      case /* Assignment_to_non_mutable_value */18 :
          return 59;
      case /* Constraint_on_gadt */19 :
          return 62;
      case /* Bs_polymorphic_comparison */20 :
          return 102;
      
    }
  } else {
    switch (param.tag | 0) {
      case /* Deprecated */0 :
          return 3;
      case /* Fragile_match */1 :
          return 4;
      case /* Labels_omitted */2 :
          return 6;
      case /* Method_override */3 :
          return 7;
      case /* Partial_match */4 :
          return 8;
      case /* Non_closed_record_pattern */5 :
          return 9;
      case /* Instance_variable_override */6 :
          return 13;
      case /* Implicit_public_methods */7 :
          return 15;
      case /* Undeclared_virtual_method */8 :
          return 17;
      case /* Not_principal */9 :
          return 18;
      case /* Without_principality */10 :
          return 19;
      case /* Preprocessor */11 :
          return 22;
      case /* Bad_module_name */12 :
          return 24;
      case /* Unused_var */13 :
          return 26;
      case /* Unused_var_strict */14 :
          return 27;
      case /* Duplicate_definitions */15 :
          return 30;
      case /* Multiple_definition */16 :
          return 31;
      case /* Unused_value_declaration */17 :
          return 32;
      case /* Unused_open */18 :
          return 33;
      case /* Unused_type_declaration */19 :
          return 34;
      case /* Unused_for_index */20 :
          return 35;
      case /* Unused_ancestor */21 :
          return 36;
      case /* Unused_constructor */22 :
          return 37;
      case /* Unused_extension */23 :
          return 38;
      case /* Name_out_of_scope */24 :
          return 40;
      case /* Ambiguous_name */25 :
          return 41;
      case /* Disambiguated_name */26 :
          return 42;
      case /* Nonoptional_label */27 :
          return 43;
      case /* Open_shadow_identifier */28 :
          return 44;
      case /* Open_shadow_label_constructor */29 :
          return 45;
      case /* Bad_env_variable */30 :
          return 46;
      case /* Attribute_payload */31 :
          return 47;
      case /* Eliminated_optional_arguments */32 :
          return 48;
      case /* No_cmi_file */33 :
          return 49;
      case /* Bad_docstring */34 :
          return 50;
      case /* Misplaced_attribute */35 :
          return 53;
      case /* Duplicated_attribute */36 :
          return 54;
      case /* Inlining_impossible */37 :
          return 55;
      case /* Ambiguous_pattern */38 :
          return 57;
      case /* No_cmx_file */39 :
          return 58;
      case /* Unused_module */40 :
          return 60;
      case /* Unboxable_type_in_prim_decl */41 :
          return 61;
      case /* Bs_unused_attribute */42 :
          return 101;
      case /* Bs_ffi_warning */43 :
          return 103;
      case /* Bs_derive_warning */44 :
          return 104;
      case /* Bs_fragile_external */45 :
          return 105;
      
    }
  }
}

function loop(i) {
  if (i === 0) {
    return /* [] */0;
  } else {
    return /* :: */[
            i,
            loop(i - 1 | 0)
          ];
  }
}

var letter_all = loop(105);

function letter(param) {
  switch (param) {
    case 97 :
        return letter_all;
    case 99 :
        return /* :: */[
                1,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ];
    case 100 :
        return /* :: */[
                3,
                /* [] */0
              ];
    case 101 :
        return /* :: */[
                4,
                /* [] */0
              ];
    case 102 :
        return /* :: */[
                5,
                /* [] */0
              ];
    case 107 :
        return /* :: */[
                32,
                /* :: */[
                  33,
                  /* :: */[
                    34,
                    /* :: */[
                      35,
                      /* :: */[
                        36,
                        /* :: */[
                          37,
                          /* :: */[
                            38,
                            /* :: */[
                              39,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ];
    case 108 :
        return /* :: */[
                6,
                /* [] */0
              ];
    case 109 :
        return /* :: */[
                7,
                /* [] */0
              ];
    case 112 :
        return /* :: */[
                8,
                /* [] */0
              ];
    case 114 :
        return /* :: */[
                9,
                /* [] */0
              ];
    case 115 :
        return /* :: */[
                10,
                /* [] */0
              ];
    case 117 :
        return /* :: */[
                11,
                /* :: */[
                  12,
                  /* [] */0
                ]
              ];
    case 118 :
        return /* :: */[
                13,
                /* [] */0
              ];
    case 98 :
    case 103 :
    case 104 :
    case 105 :
    case 106 :
    case 110 :
    case 111 :
    case 113 :
    case 116 :
    case 119 :
        return /* [] */0;
    case 120 :
        return /* :: */[
                14,
                /* :: */[
                  15,
                  /* :: */[
                    16,
                    /* :: */[
                      17,
                      /* :: */[
                        18,
                        /* :: */[
                          19,
                          /* :: */[
                            20,
                            /* :: */[
                              21,
                              /* :: */[
                                22,
                                /* :: */[
                                  23,
                                  /* :: */[
                                    24,
                                    /* :: */[
                                      30,
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ];
    case 121 :
        return /* :: */[
                26,
                /* [] */0
              ];
    case 122 :
        return /* :: */[
                27,
                /* [] */0
              ];
    default:
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "warnings.ml",
              215,
              9
            ]
          ];
  }
}

var current = {
  contents: {
    active: Caml_array.caml_make_vect(106, true),
    error: Caml_array.caml_make_vect(106, false)
  }
};

var disabled = {
  contents: false
};

function without_warnings(f) {
  return Misc.protect_refs(/* :: */[
              /* R */[
                disabled,
                true
              ],
              /* [] */0
            ], f);
}

function backup(param) {
  return current.contents;
}

function restore(x) {
  current.contents = x;
  return /* () */0;
}

function is_active(x) {
  if (disabled.contents) {
    return false;
  } else {
    return Caml_array.caml_array_get(current.contents.active, number(x));
  }
}

function is_error(x) {
  if (disabled.contents) {
    return false;
  } else {
    return Caml_array.caml_array_get(current.contents.error, number(x));
  }
}

function mk_lazy(f) {
  var state = backup(/* () */0);
  return Caml_obj.caml_lazy_make((function (param) {
                var prev = backup(/* () */0);
                restore(state);
                try {
                  var r = Curry._1(f, /* () */0);
                  restore(prev);
                  return r;
                }
                catch (exn){
                  restore(prev);
                  throw exn;
                }
              }));
}

function parse_opt(error, active, flags, s) {
  var set = function (i) {
    return Caml_array.caml_array_set(flags, i, true);
  };
  var clear = function (i) {
    return Caml_array.caml_array_set(flags, i, false);
  };
  var set_all = function (i) {
    Caml_array.caml_array_set(active, i, true);
    return Caml_array.caml_array_set(error, i, true);
  };
  var get_num = function (_n, _i) {
    while(true) {
      var i = _i;
      var n = _n;
      if (i >= s.length) {
        return /* tuple */[
                i,
                n
              ];
      } else {
        var match = Caml_string.get(s, i);
        if (match > 57 || match < 48) {
          return /* tuple */[
                  i,
                  n
                ];
        } else {
          _i = i + 1 | 0;
          _n = (Caml_int32.imul(10, n) + Caml_string.get(s, i) | 0) - /* "0" */48 | 0;
          continue ;
        }
      }
    };
  };
  var get_range = function (i) {
    var match = get_num(0, i);
    var n1 = match[1];
    var i$1 = match[0];
    if ((i$1 + 2 | 0) < s.length && Caml_string.get(s, i$1) === /* "." */46 && Caml_string.get(s, i$1 + 1 | 0) === /* "." */46) {
      var match$1 = get_num(0, i$1 + 2 | 0);
      var n2 = match$1[1];
      if (n2 < n1) {
        throw [
              Arg.Bad,
              "Ill-formed list of warnings"
            ];
      }
      return /* tuple */[
              match$1[0],
              n1,
              n2
            ];
    } else {
      return /* tuple */[
              i$1,
              n1,
              n1
            ];
    }
  };
  var loop = function (_i) {
    while(true) {
      var i = _i;
      if (i >= s.length) {
        return /* () */0;
      } else {
        var match = Caml_string.get(s, i);
        if (match >= 65) {
          if (match >= 97) {
            if (match >= 123) {
              throw [
                    Arg.Bad,
                    "Ill-formed list of warnings"
                  ];
            }
            List.iter(clear, letter(Caml_string.get(s, i)));
            _i = i + 1 | 0;
            continue ;
          } else {
            if (match >= 91) {
              throw [
                    Arg.Bad,
                    "Ill-formed list of warnings"
                  ];
            }
            List.iter(set, letter(Char.lowercase_ascii(Caml_string.get(s, i))));
            _i = i + 1 | 0;
            continue ;
          }
        } else if (match >= 46) {
          if (match >= 64) {
            return loop_letter_num(set_all, i + 1 | 0);
          } else {
            throw [
                  Arg.Bad,
                  "Ill-formed list of warnings"
                ];
          }
        } else if (match >= 43) {
          switch (match - 43 | 0) {
            case 0 :
                return loop_letter_num(set, i + 1 | 0);
            case 1 :
                throw [
                      Arg.Bad,
                      "Ill-formed list of warnings"
                    ];
            case 2 :
                return loop_letter_num(clear, i + 1 | 0);
            
          }
        } else {
          throw [
                Arg.Bad,
                "Ill-formed list of warnings"
              ];
        }
      }
    };
  };
  var loop_letter_num = function (myset, i) {
    if (i >= s.length) {
      throw [
            Arg.Bad,
            "Ill-formed list of warnings"
          ];
    }
    var match = Caml_string.get(s, i);
    if (match >= 65) {
      if (match >= 97) {
        if (match >= 123) {
          throw [
                Arg.Bad,
                "Ill-formed list of warnings"
              ];
        }
        List.iter(myset, letter(Caml_string.get(s, i)));
        return loop(i + 1 | 0);
      } else {
        if (match >= 91) {
          throw [
                Arg.Bad,
                "Ill-formed list of warnings"
              ];
        }
        List.iter(myset, letter(Char.lowercase_ascii(Caml_string.get(s, i))));
        return loop(i + 1 | 0);
      }
    } else {
      if (match > 57 || match < 48) {
        throw [
              Arg.Bad,
              "Ill-formed list of warnings"
            ];
      }
      var match$1 = get_range(i);
      for(var n = match$1[1] ,n_finish = Caml_primitive.caml_int_min(match$1[2], 105); n <= n_finish; ++n){
        Curry._1(myset, n);
      }
      return loop(match$1[0]);
    }
  };
  return loop(0);
}

function parse_options(errflag, s) {
  var error = $$Array.copy(current.contents.error);
  var active = $$Array.copy(current.contents.active);
  parse_opt(error, active, errflag ? error : active, s);
  current.contents = {
    active: active,
    error: error
  };
  return /* () */0;
}

var defaults_w = "+a-4-6-7-9-27-29-32..42-44-45-48-50-60-102";

var defaults_warn_error = "-a+31";

parse_options(false, defaults_w);

parse_options(true, defaults_warn_error);

function message(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Comment_start */0 :
          return "this is the start of a comment.";
      case /* Comment_not_end */1 :
          return "this is not the end of a comment.";
      case /* Partial_application */2 :
          return "this function application is partial,\nmaybe some arguments are missing.";
      case /* Statement_type */3 :
          return "this expression should have type unit.";
      case /* Unused_match */4 :
          return "this match case is unused.";
      case /* Unused_pat */5 :
          return "this sub-pattern is unused.";
      case /* Illegal_backslash */6 :
          return "illegal backslash escape in string.";
      case /* Unerasable_optional_argument */7 :
          return "this optional argument cannot be erased.";
      case /* Unused_argument */8 :
          return "this argument will not be used by the function.";
      case /* Nonreturning_statement */9 :
          return "this statement never returns (or has an unsound type.)";
      case /* Useless_record_with */10 :
          return "all the fields are explicitly listed in this record:\nthe 'with' clause is useless.";
      case /* All_clauses_guarded */11 :
          return "this pattern-matching is not exhaustive.\nAll clauses in this pattern-matching are guarded.";
      case /* Wildcard_arg_to_constant_constr */12 :
          return "wildcard pattern given as argument to a constant constructor";
      case /* Eol_in_string */13 :
          return "unescaped end-of-line in a string constant (non-portable code)";
      case /* Unused_rec_flag */14 :
          return "unused rec flag.";
      case /* Expect_tailcall */15 :
          return Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "expected tailcall",
                          /* End_of_format */0
                        ]),
                      "expected tailcall"
                    ]);
      case /* Fragile_literal_pattern */16 :
          return Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. (See manual section 8.5)",
                          /* End_of_format */0
                        ]),
                      "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. (See manual section 8.5)"
                    ]);
      case /* Unreachable_case */17 :
          return "this match case is unreachable.\nConsider replacing it with a refutation case '<pat> -> .'";
      case /* Assignment_to_non_mutable_value */18 :
          return "A potential assignment to a non-mutable value was detected \nin this source file.  Such assignments may generate incorrect code \nwhen using Flambda.";
      case /* Constraint_on_gadt */19 :
          return "Type constraints do not apply to GADT cases of variant types.";
      case /* Bs_polymorphic_comparison */20 :
          return "polymorphic comparison introduced (maybe unsafe)";
      
    }
  } else {
    switch (param.tag | 0) {
      case /* Deprecated */0 :
          return "deprecated: " + Misc.normalise_eol(param[0]);
      case /* Fragile_match */1 :
          var s = param[0];
          if (s === "") {
            return "this pattern-matching is fragile.";
          } else {
            return "this pattern-matching is fragile.\nIt will remain exhaustive when constructors are added to type " + (s + ".");
          }
      case /* Labels_omitted */2 :
          var ls = param[0];
          if (ls) {
            if (ls[1]) {
              return "labels " + ($$String.concat(", ", ls) + " were omitted in the application of this function.");
            } else {
              return "label " + (ls[0] + " was omitted in the application of this function.");
            }
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    341,
                    25
                  ]
                ];
          }
      case /* Method_override */3 :
          var match = param[0];
          if (match) {
            var slist = match[1];
            var lab = match[0];
            if (slist) {
              return $$String.concat(" ", /* :: */[
                          "the following methods are overridden by the class",
                          /* :: */[
                            lab,
                            /* :: */[
                              ":\n ",
                              slist
                            ]
                          ]
                        ]);
            } else {
              return "the method " + (lab + " is overridden.");
            }
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    353,
                    26
                  ]
                ];
          }
      case /* Partial_match */4 :
          var s$1 = param[0];
          if (s$1 === "") {
            return "this pattern-matching is not exhaustive.";
          } else {
            return "this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\n" + s$1;
          }
      case /* Non_closed_record_pattern */5 :
          return "the following labels are not bound in this record pattern:\n" + (param[0] + "\nEither bind these labels explicitly or add '; _' to the pattern.");
      case /* Instance_variable_override */6 :
          var match$1 = param[0];
          if (match$1) {
            var slist$1 = match$1[1];
            var lab$1 = match$1[0];
            if (slist$1) {
              return $$String.concat(" ", /* :: */[
                          "the following instance variables are overridden by the class",
                          /* :: */[
                            lab$1,
                            /* :: */[
                              ":\n ",
                              slist$1
                            ]
                          ]
                        ]) + "\nThe behaviour changed in ocaml 3.10 (previous behaviour was hiding.)";
            } else {
              return "the instance variable " + (lab$1 + " is overridden.\nThe behaviour changed in ocaml 3.10 (previous behaviour was hiding.)");
            }
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    373,
                    37
                  ]
                ];
          }
      case /* Implicit_public_methods */7 :
          return "the following private methods were made public implicitly:\n " + ($$String.concat(" ", param[0]) + ".");
      case /* Undeclared_virtual_method */8 :
          return "the virtual method " + (param[0] + " is not declared.");
      case /* Not_principal */9 :
          return param[0] + " is not principal.";
      case /* Without_principality */10 :
          return param[0] + " without principality.";
      case /* Preprocessor */11 :
          return param[0];
      case /* Bad_module_name */12 :
          return "bad source file name: \"" + (param[0] + "\" is not a valid module name.");
      case /* Unused_var */13 :
      case /* Unused_var_strict */14 :
          return "unused variable " + (param[0] + ".");
      case /* Duplicate_definitions */15 :
          return Curry._4(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "the ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " is defined in both types ",
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* String_literal */Block.__(11, [
                                                      " and ",
                                                      /* String */Block.__(2, [
                                                          /* No_padding */0,
                                                          /* Char_literal */Block.__(12, [
                                                              /* "." */46,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "the %s %s is defined in both types %s and %s."
                        ]), param[0], param[1], param[2], param[3]);
      case /* Multiple_definition */16 :
          return Curry._3(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "files ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " and ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " both define a module named ",
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "files %s and %s both define a module named %s"
                        ]), param[1], param[2], param[0]);
      case /* Unused_value_declaration */17 :
          return "unused value " + (param[0] + ".");
      case /* Unused_open */18 :
          return "unused open " + (param[0] + ".");
      case /* Unused_type_declaration */19 :
          return "unused type " + (param[0] + ".");
      case /* Unused_for_index */20 :
          return "unused for-loop index " + (param[0] + ".");
      case /* Unused_ancestor */21 :
          return "unused ancestor variable " + (param[0] + ".");
      case /* Unused_constructor */22 :
          var s$2 = param[0];
          if (param[1]) {
            return "constructor " + (s$2 + " is never used to build values.\n(However, this constructor appears in patterns.)");
          } else if (param[2]) {
            return "constructor " + (s$2 + " is never used to build values.\nIts type is exported as a private type.");
          } else {
            return "unused constructor " + (s$2 + ".");
          }
      case /* Unused_extension */23 :
          var kind = param[1] ? "exception" : "extension constructor";
          var name = kind + (" " + param[0]);
          if (param[2]) {
            return name + " is never used to build values.\n(However, this constructor appears in patterns.)";
          } else if (param[3]) {
            return name + " is never used to build values.\nIt is exported or rebound as a private extension.";
          } else {
            return "unused " + name;
          }
      case /* Name_out_of_scope */24 :
          var slist$2 = param[1];
          var ty = param[0];
          if (slist$2 && !slist$2[1] && !param[2]) {
            return slist$2[0] + (" was selected from type " + (ty + ".\nIt is not visible in the current scope, and will not \nbe selected if the type becomes unknown."));
          }
          if (param[2]) {
            return "this record of type " + (ty + (" contains fields that are \nnot visible in the current scope: " + ($$String.concat(" ", slist$2) + ".\nThey will not be selected if the type becomes unknown.")));
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    441,
                    39
                  ]
                ];
          }
          break;
      case /* Ambiguous_name */25 :
          var _slist = param[0];
          if (_slist && !_slist[1] && !param[2]) {
            return _slist[0] + (" belongs to several types: " + ($$String.concat(" ", param[1]) + "\nThe first one was selected. Please disambiguate if this is wrong."));
          }
          if (param[2]) {
            return "these field labels belong to several types: " + ($$String.concat(" ", param[1]) + "\nThe first one was selected. Please disambiguate if this is wrong.");
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    450,
                    36
                  ]
                ];
          }
          break;
      case /* Disambiguated_name */26 :
          return "this use of " + (param[0] + " relies on type-directed disambiguation,\nit will not compile with OCaml 4.00 or earlier.");
      case /* Nonoptional_label */27 :
          return "the label " + (param[0] + " is not optional.");
      case /* Open_shadow_identifier */28 :
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "this open statement shadows the ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " identifier ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " (which is later used)",
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "this open statement shadows the %s identifier %s (which is later used)"
                        ]), param[0], param[1]);
      case /* Open_shadow_label_constructor */29 :
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "this open statement shadows the ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " (which is later used)",
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "this open statement shadows the %s %s (which is later used)"
                        ]), param[0], param[1]);
      case /* Bad_env_variable */30 :
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "illegal environment variable ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " : ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "illegal environment variable %s : %s"
                        ]), param[0], param[1]);
      case /* Attribute_payload */31 :
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "illegal payload for attribute '",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "'.\n",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "illegal payload for attribute '%s'.\n%s"
                        ]), param[0], param[1]);
      case /* Eliminated_optional_arguments */32 :
          var sl = param[0];
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "implicit elimination of optional argument",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "implicit elimination of optional argument%s %s"
                        ]), List.length(sl) === 1 ? "" : "s", $$String.concat(", ", sl));
      case /* No_cmi_file */33 :
          var match$2 = param[1];
          var name$1 = param[0];
          if (match$2 !== undefined) {
            return Curry._2(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "no valid cmi file was found in path for module ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ". ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ]),
                            "no valid cmi file was found in path for module %s. %s"
                          ]), name$1, match$2);
          } else {
            return "no cmi file was found in path for module " + name$1;
          }
      case /* Bad_docstring */34 :
          if (param[0]) {
            return "unattached documentation comment (ignored)";
          } else {
            return "ambiguous documentation comment";
          }
      case /* Misplaced_attribute */35 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "the ",
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " attribute cannot appear in this context",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "the %S attribute cannot appear in this context"
                        ]), param[0]);
      case /* Duplicated_attribute */36 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "the ",
                              /* Caml_string */Block.__(3, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " attribute is used more than once on this expression",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "the %S attribute is used more than once on this expression"
                        ]), param[0]);
      case /* Inlining_impossible */37 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Cannot inline: ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "Cannot inline: %s"
                        ]), param[0]);
      case /* Ambiguous_pattern */38 :
          var vars = List.sort($$String.compare, param[0]);
          var tmp;
          if (vars) {
            tmp = vars[1] ? "variables " + $$String.concat(",", vars) : "variable " + vars[0];
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "warnings.ml",
                    507,
                    16
                  ]
                ];
          }
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Ambiguous or-pattern variables under guard;\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " may match different arguments. (See manual section 8.5)",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Ambiguous or-pattern variables under guard;\n%s may match different arguments. (See manual section 8.5)"
                        ]), tmp);
      case /* No_cmx_file */39 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "no cmx file was found in path for module ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", and its interface was not compiled with -opaque",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "no cmx file was found in path for module %s, and its interface was not compiled with -opaque"
                        ]), param[0]);
      case /* Unused_module */40 :
          return "unused module " + (param[0] + ".");
      case /* Unboxable_type_in_prim_decl */41 :
          var t = param[0];
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "This primitive declaration uses type ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", which is unannotated and\nunboxable. The representation of such types may change in future\nversions. You should annotate the declaration of ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " with [",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Escaped_at */5,
                                                  /* String_literal */Block.__(11, [
                                                      "boxed]\nor [",
                                                      /* Formatting_lit */Block.__(17, [
                                                          /* Escaped_at */5,
                                                          /* String_literal */Block.__(11, [
                                                              "unboxed].",
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "This primitive declaration uses type %s, which is unannotated and\nunboxable. The representation of such types may change in future\nversions. You should annotate the declaration of %s with [@@boxed]\nor [@@unboxed]."
                        ]), t, t);
      case /* Bs_unused_attribute */42 :
          return "Unused BuckleScript attribute: " + param[0];
      case /* Bs_ffi_warning */43 :
          return "BuckleScript FFI warning: " + param[0];
      case /* Bs_derive_warning */44 :
          return "BuckleScript bs.deriving warning: " + param[0];
      case /* Bs_fragile_external */45 :
          return "BuckleScript warning: " + (param[0] + " : the external name is inferred from val name is unsafe from refactoring when changing value name");
      
    }
  }
}

function sub_locs(param) {
  if (typeof param === "number" || param.tag) {
    return /* [] */0;
  } else {
    return /* :: */[
            /* tuple */[
              param[1],
              "Definition"
            ],
            /* :: */[
              /* tuple */[
                param[2],
                "Expected signature"
              ],
              /* [] */0
            ]
          ];
  }
}

var nerrors = {
  contents: 0
};

function report(w) {
  var match = is_active(w);
  if (match) {
    if (is_error(w)) {
      nerrors.contents = nerrors.contents + 1 | 0;
    }
    return /* `Active */[
            -891636250,
            {
              number: number(w),
              message: message(w),
              is_error: is_error(w),
              sub_locs: sub_locs(w)
            }
          ];
  } else {
    return /* Inactive */-1008610421;
  }
}

function super_report(message, w) {
  var match = is_active(w);
  if (match) {
    if (is_error(w)) {
      nerrors.contents = nerrors.contents + 1 | 0;
    }
    return /* `Active */[
            -891636250,
            {
              number: number(w),
              message: Curry._1(message, w),
              is_error: is_error(w),
              sub_locs: sub_locs(w)
            }
          ];
  } else {
    return /* Inactive */-1008610421;
  }
}

var Errors = Caml_exceptions.create("Warnings.Errors");

function reset_fatal(param) {
  nerrors.contents = 0;
  return /* () */0;
}

function check_fatal(param) {
  if (nerrors.contents > 0) {
    nerrors.contents = 0;
    throw Errors;
  } else {
    return 0;
  }
}

function help_warnings(param) {
  List.iter((function (param) {
          return Curry._2(Printf.printf(/* Format */[
                          /* Int */Block.__(4, [
                              /* Int_i */3,
                              /* Lit_padding */Block.__(0, [
                                  /* Right */1,
                                  3
                                ]),
                              /* No_precision */0,
                              /* Char_literal */Block.__(12, [
                                  /* " " */32,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "\n" */10,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "%3i %s\n"
                        ]), param[0], param[1]);
        }), /* :: */[
        /* tuple */[
          1,
          "Suspicious-looking start-of-comment mark."
        ],
        /* :: */[
          /* tuple */[
            2,
            "Suspicious-looking end-of-comment mark."
          ],
          /* :: */[
            /* tuple */[
              3,
              "Deprecated feature."
            ],
            /* :: */[
              /* tuple */[
                4,
                "Fragile pattern matching: matching that will remain complete even\n    if additional constructors are added to one of the variant types\n    matched."
              ],
              /* :: */[
                /* tuple */[
                  5,
                  "Partially applied function: expression whose result has function\n    type and is ignored."
                ],
                /* :: */[
                  /* tuple */[
                    6,
                    "Label omitted in function application."
                  ],
                  /* :: */[
                    /* tuple */[
                      7,
                      "Method overridden."
                    ],
                    /* :: */[
                      /* tuple */[
                        8,
                        "Partial match: missing cases in pattern-matching."
                      ],
                      /* :: */[
                        /* tuple */[
                          9,
                          "Missing fields in a record pattern."
                        ],
                        /* :: */[
                          /* tuple */[
                            10,
                            "Expression on the left-hand side of a sequence that doesn't have type\n    \"unit\" (and that is not a function, see warning number 5)."
                          ],
                          /* :: */[
                            /* tuple */[
                              11,
                              "Redundant case in a pattern matching (unused match case)."
                            ],
                            /* :: */[
                              /* tuple */[
                                12,
                                "Redundant sub-pattern in a pattern-matching."
                              ],
                              /* :: */[
                                /* tuple */[
                                  13,
                                  "Instance variable overridden."
                                ],
                                /* :: */[
                                  /* tuple */[
                                    14,
                                    "Illegal backslash escape in a string constant."
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      15,
                                      "Private method made public implicitly."
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        16,
                                        "Unerasable optional argument."
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          17,
                                          "Undeclared virtual method."
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            18,
                                            "Non-principal type."
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              19,
                                              "Type without principality."
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                20,
                                                "Unused function argument."
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  21,
                                                  "Non-returning statement."
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    22,
                                                    "Preprocessor warning."
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      23,
                                                      "Useless record \"with\" clause."
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        24,
                                                        "Bad module name: the source file name is not a valid OCaml module name."
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          25,
                                                          "Deprecated: now part of warning 8."
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            26,
                                                            "Suspicious unused variable: unused variable that is bound\n    with \"let\" or \"as\", and doesn't start with an underscore (\"_\")\n    character."
                                                          ],
                                                          /* :: */[
                                                            /* tuple */[
                                                              27,
                                                              "Innocuous unused variable: unused variable that is not bound with\n    \"let\" nor \"as\", and doesn't start with an underscore (\"_\")\n    character."
                                                            ],
                                                            /* :: */[
                                                              /* tuple */[
                                                                28,
                                                                "Wildcard pattern given as argument to a constant constructor."
                                                              ],
                                                              /* :: */[
                                                                /* tuple */[
                                                                  29,
                                                                  "Unescaped end-of-line in a string constant (non-portable code)."
                                                                ],
                                                                /* :: */[
                                                                  /* tuple */[
                                                                    30,
                                                                    "Two labels or constructors of the same name are defined in two\n    mutually recursive types."
                                                                  ],
                                                                  /* :: */[
                                                                    /* tuple */[
                                                                      31,
                                                                      "A module is linked twice in the same executable."
                                                                    ],
                                                                    /* :: */[
                                                                      /* tuple */[
                                                                        32,
                                                                        "Unused value declaration."
                                                                      ],
                                                                      /* :: */[
                                                                        /* tuple */[
                                                                          33,
                                                                          "Unused open statement."
                                                                        ],
                                                                        /* :: */[
                                                                          /* tuple */[
                                                                            34,
                                                                            "Unused type declaration."
                                                                          ],
                                                                          /* :: */[
                                                                            /* tuple */[
                                                                              35,
                                                                              "Unused for-loop index."
                                                                            ],
                                                                            /* :: */[
                                                                              /* tuple */[
                                                                                36,
                                                                                "Unused ancestor variable."
                                                                              ],
                                                                              /* :: */[
                                                                                /* tuple */[
                                                                                  37,
                                                                                  "Unused constructor."
                                                                                ],
                                                                                /* :: */[
                                                                                  /* tuple */[
                                                                                    38,
                                                                                    "Unused extension constructor."
                                                                                  ],
                                                                                  /* :: */[
                                                                                    /* tuple */[
                                                                                      39,
                                                                                      "Unused rec flag."
                                                                                    ],
                                                                                    /* :: */[
                                                                                      /* tuple */[
                                                                                        40,
                                                                                        "Constructor or label name used out of scope."
                                                                                      ],
                                                                                      /* :: */[
                                                                                        /* tuple */[
                                                                                          41,
                                                                                          "Ambiguous constructor or label name."
                                                                                        ],
                                                                                        /* :: */[
                                                                                          /* tuple */[
                                                                                            42,
                                                                                            "Disambiguated constructor or label name (compatibility warning)."
                                                                                          ],
                                                                                          /* :: */[
                                                                                            /* tuple */[
                                                                                              43,
                                                                                              "Nonoptional label applied as optional."
                                                                                            ],
                                                                                            /* :: */[
                                                                                              /* tuple */[
                                                                                                44,
                                                                                                "Open statement shadows an already defined identifier."
                                                                                              ],
                                                                                              /* :: */[
                                                                                                /* tuple */[
                                                                                                  45,
                                                                                                  "Open statement shadows an already defined label or constructor."
                                                                                                ],
                                                                                                /* :: */[
                                                                                                  /* tuple */[
                                                                                                    46,
                                                                                                    "Error in environment variable."
                                                                                                  ],
                                                                                                  /* :: */[
                                                                                                    /* tuple */[
                                                                                                      47,
                                                                                                      "Illegal attribute payload."
                                                                                                    ],
                                                                                                    /* :: */[
                                                                                                      /* tuple */[
                                                                                                        48,
                                                                                                        "Implicit elimination of optional arguments."
                                                                                                      ],
                                                                                                      /* :: */[
                                                                                                        /* tuple */[
                                                                                                          49,
                                                                                                          "Absent cmi file when looking up module alias."
                                                                                                        ],
                                                                                                        /* :: */[
                                                                                                          /* tuple */[
                                                                                                            50,
                                                                                                            "Unexpected documentation comment."
                                                                                                          ],
                                                                                                          /* :: */[
                                                                                                            /* tuple */[
                                                                                                              51,
                                                                                                              "Warning on non-tail calls if @tailcall present."
                                                                                                            ],
                                                                                                            /* :: */[
                                                                                                              /* tuple */[
                                                                                                                52,
                                                                                                                "Fragile constant pattern."
                                                                                                              ],
                                                                                                              /* :: */[
                                                                                                                /* tuple */[
                                                                                                                  53,
                                                                                                                  "Attribute cannot appear in this context"
                                                                                                                ],
                                                                                                                /* :: */[
                                                                                                                  /* tuple */[
                                                                                                                    54,
                                                                                                                    "Attribute used more than once on an expression"
                                                                                                                  ],
                                                                                                                  /* :: */[
                                                                                                                    /* tuple */[
                                                                                                                      55,
                                                                                                                      "Inlining impossible"
                                                                                                                    ],
                                                                                                                    /* :: */[
                                                                                                                      /* tuple */[
                                                                                                                        56,
                                                                                                                        "Unreachable case in a pattern-matching (based on type information)."
                                                                                                                      ],
                                                                                                                      /* :: */[
                                                                                                                        /* tuple */[
                                                                                                                          57,
                                                                                                                          "Ambiguous or-pattern variables under guard"
                                                                                                                        ],
                                                                                                                        /* :: */[
                                                                                                                          /* tuple */[
                                                                                                                            58,
                                                                                                                            "Missing cmx file"
                                                                                                                          ],
                                                                                                                          /* :: */[
                                                                                                                            /* tuple */[
                                                                                                                              59,
                                                                                                                              "Assignment to non-mutable value"
                                                                                                                            ],
                                                                                                                            /* :: */[
                                                                                                                              /* tuple */[
                                                                                                                                60,
                                                                                                                                "Unused module declaration"
                                                                                                                              ],
                                                                                                                              /* :: */[
                                                                                                                                /* tuple */[
                                                                                                                                  61,
                                                                                                                                  "Unboxable type in primitive declaration"
                                                                                                                                ],
                                                                                                                                /* :: */[
                                                                                                                                  /* tuple */[
                                                                                                                                    62,
                                                                                                                                    "Type constraint on GADT type declaration"
                                                                                                                                  ],
                                                                                                                                  /* :: */[
                                                                                                                                    /* tuple */[
                                                                                                                                      101,
                                                                                                                                      "Unused bs attributes"
                                                                                                                                    ],
                                                                                                                                    /* :: */[
                                                                                                                                      /* tuple */[
                                                                                                                                        102,
                                                                                                                                        "polymorphic comparison introduced (maybe unsafe)"
                                                                                                                                      ],
                                                                                                                                      /* :: */[
                                                                                                                                        /* tuple */[
                                                                                                                                          103,
                                                                                                                                          "BuckleScript FFI warning: "
                                                                                                                                        ],
                                                                                                                                        /* :: */[
                                                                                                                                          /* tuple */[
                                                                                                                                            104,
                                                                                                                                            "BuckleScript bs.deriving warning: "
                                                                                                                                          ],
                                                                                                                                          /* [] */0
                                                                                                                                        ]
                                                                                                                                      ]
                                                                                                                                    ]
                                                                                                                                  ]
                                                                                                                                ]
                                                                                                                              ]
                                                                                                                            ]
                                                                                                                          ]
                                                                                                                        ]
                                                                                                                      ]
                                                                                                                    ]
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]
                                                                                                      ]
                                                                                                    ]
                                                                                                  ]
                                                                                                ]
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  console.log("  A all warnings");
  for(var i = /* "b" */98; i <= /* "z" */122; ++i){
    var c = Char.chr(i);
    var l = letter(c);
    if (l) {
      if (l[1]) {
        Curry._2(Printf.printf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "  ",
                      /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                              " warnings ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ".\n",
                                      /* End_of_format */0
                                    ])
                                ])
                            ])])
                    ]),
                  "  %c warnings %s.\n"
                ]), Char.uppercase_ascii(c), $$String.concat(", ", List.map((function (prim) {
                        return String(prim);
                      }), l)));
      } else {
        Curry._2(Printf.printf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "  ",
                      /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                              " Alias for warning ",
                              /* Int */Block.__(4, [
                                  /* Int_i */3,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ".\n",
                                      /* End_of_format */0
                                    ])
                                ])
                            ])])
                    ]),
                  "  %c Alias for warning %i.\n"
                ]), Char.uppercase_ascii(c), l[0]);
      }
    }
    
  }
  return Pervasives.exit(0);
}

export {
  parse_options ,
  without_warnings ,
  is_active ,
  is_error ,
  defaults_w ,
  defaults_warn_error ,
  report ,
  Errors ,
  check_fatal ,
  reset_fatal ,
  help_warnings ,
  backup ,
  restore ,
  mk_lazy ,
  message ,
  number ,
  super_report ,
  
}
/* letter_all Not a pure module */
