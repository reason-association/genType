// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Int64 from "bs-platform/lib/es6/int64.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_int64 from "bs-platform/lib/es6/caml_int64.js";
import * as Identifiable from "./identifiable.bs.js";

function compare(x, y) {
  return x - y | 0;
}

function output(oc, x) {
  return Curry._1(Printf.fprintf(oc, /* Format */[
                  /* Int */Block.__(4, [
                      /* Int_i */3,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* End_of_format */0
                    ]),
                  "%i"
                ]), x);
}

function hash(i) {
  return i;
}

function equal(i, j) {
  return i === j;
}

var Int_base = Identifiable.Make({
      equal: equal,
      hash: hash,
      compare: compare,
      output: output,
      print: Format.pp_print_int
    });

function zero_to_n(n) {
  if (n < 0) {
    return Int_base.$$Set.empty;
  } else {
    return Curry._2(Int_base.$$Set.add, n, zero_to_n(n - 1 | 0));
  }
}

var Int_T = Int_base.T;

var Int_equal = Int_base.equal;

var Int_hash = Int_base.hash;

var Int_compare = Int_base.compare;

var Int_output = Int_base.output;

var Int_print = Int_base.print;

var Int_Set = Int_base.$$Set;

var Int_Map = Int_base.$$Map;

var Int_Tbl = Int_base.Tbl;

var Int = {
  T: Int_T,
  equal: Int_equal,
  hash: Int_hash,
  compare: Int_compare,
  output: Int_output,
  print: Int_print,
  $$Set: Int_Set,
  $$Map: Int_Map,
  Tbl: Int_Tbl,
  zero_to_n: zero_to_n
};

function of_int_exn(i) {
  if (i < -128 || i > 127) {
    return Curry._1(Misc.fatal_errorf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Int8.of_int_exn: ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* String_literal */Block.__(11, [
                                " is out of range",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Int8.of_int_exn: %d is out of range"
                  ]), i);
  } else {
    return i;
  }
}

function to_int(i) {
  return i;
}

var Int8 = {
  zero: 0,
  one: 1,
  of_int_exn: of_int_exn,
  to_int: to_int
};

function of_int_exn$1(i) {
  if (i < -32768 || i > 32767) {
    return Curry._1(Misc.fatal_errorf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Int16.of_int_exn: ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* String_literal */Block.__(11, [
                                " is out of range",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Int16.of_int_exn: %d is out of range"
                  ]), i);
  } else {
    return i;
  }
}

var lower_int64 = Caml_int64.neg(Caml_int64.lsl_(Int64.one, 15));

var upper_int64 = Caml_int64.sub(Caml_int64.lsl_(Int64.one, 15), Int64.one);

function of_int64_exn(i) {
  if (Int64.compare(i, lower_int64) < 0 || Int64.compare(i, upper_int64) > 0) {
    return Curry._1(Misc.fatal_errorf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Int16.of_int64_exn: ",
                        /* Int64 */Block.__(7, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* String_literal */Block.__(11, [
                                " is out of range",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Int16.of_int64_exn: %Ld is out of range"
                  ]), i);
  } else {
    return i[1] | 0;
  }
}

function to_int$1(t) {
  return t;
}

var compare$1 = Caml_obj.caml_compare;

function output$1(oc, x) {
  return Curry._1(Printf.fprintf(oc, /* Format */[
                  /* Float */Block.__(8, [
                      /* Float_f */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* End_of_format */0
                    ]),
                  "%f"
                ]), x);
}

var hash$1 = Hashtbl.hash;

function equal$1(i, j) {
  return i === j;
}

var include = Identifiable.Make({
      equal: equal$1,
      hash: hash$1,
      compare: compare$1,
      output: output$1,
      print: Format.pp_print_float
    });

var Float_T = include.T;

var Float_equal = include.equal;

var Float_hash = include.hash;

var Float_compare = include.compare;

var Float_output = include.output;

var Float_print = include.print;

var Float_Set = include.$$Set;

var Float_Map = include.$$Map;

var Float_Tbl = include.Tbl;

var Float = {
  T: Float_T,
  equal: Float_equal,
  hash: Float_hash,
  compare: Float_compare,
  output: Float_output,
  print: Float_print,
  $$Set: Float_Set,
  $$Map: Float_Map,
  Tbl: Float_Tbl
};

var Int16 = {
  of_int_exn: of_int_exn$1,
  of_int64_exn: of_int64_exn,
  to_int: to_int$1
};

export {
  Int ,
  Int8 ,
  Int16 ,
  Float ,
  
}
/* Int_base Not a pure module */
