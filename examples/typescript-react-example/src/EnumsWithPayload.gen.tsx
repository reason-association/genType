/* TypeScript file generated by genType. */

const $$toJS542320962 = {"97": "a", "98": "bRenamed", "937218926": true, "-574635695": 20, "803296723": 0.5};

const XX = {"0": "A"};

const $$toRE1058613066 = {};

const $$toJS1058613066 = {};

const $$toRE542320962 = {"a": 97, "bRenamed": 98, "true": 937218926, "20": -574635695, "0.5": 803296723};

const YY = {"A": 0};

// tslint:disable-next-line:no-var-requires
const EnumsWithPayloadBS = require('./EnumsWithPayload.bs');

// tslint:disable-next-line:interface-over-type-literal
export type payload = {readonly x: number, readonly y?: string};

// tslint:disable-next-line:interface-over-type-literal
export type withPayload = "a" | "bRenamed" | true | 20 | 0.5 | payload;

// tslint:disable-next-line:interface-over-type-literal
export type manyPayloads = {tag: "one", value: number} | {tag: "two", value: [string, string]} | {tag: "three", value: payload};

// tslint:disable-next-line:interface-over-type-literal
export type simpleVariant = "A" | "B" | "C";

// tslint:disable-next-line:interface-over-type-literal
export type variantWithPayloads = "A" | {tag: "B", value: [number]} | {tag: "C", value: [number, number]} | {tag: "D", value: [[number, number]]} | {tag: "E", value: [number, string, number]};

export const testWithPayload: (_1:withPayload) => withPayload = function _(Arg1: any) { const result = EnumsWithPayloadBS.testWithPayload((typeof(Arg1) === 'object' ? [/* c */99, [Arg1.x, Arg1.y]] : $$toRE542320962[Arg1.toString()])); return (typeof(result) === 'object' ? {x:result[1][0], y:result[1][1]} : $$toJS542320962[result]) };

export const printEnumValue: (_1:withPayload) => void = function _(Arg1: any) { const result = EnumsWithPayloadBS.printEnumValue((typeof(Arg1) === 'object' ? [/* c */99, [Arg1.x, Arg1.y]] : $$toRE542320962[Arg1.toString()])); return result };

export const testManyPayloads: (_1:manyPayloads) => manyPayloads = function _(Arg1: any) { const result = EnumsWithPayloadBS.testManyPayloads((typeof(Arg1) === 'object' ? (Arg1.tag==="one" ? [/* one */5544550, Arg1.value] :  Arg1.tag==="two" ? [/* two */5795212, Arg1.value] :  [/* three */261117022, [Arg1.value.x, Arg1.value.y]]) : $$toRE1058613066[Arg1])); return (typeof(result) === 'object' ? (result[0]===/* one */5544550 ? {tag:"one", value:result[1]} :  result[0]===/* two */5795212 ? {tag:"two", value:result[1]} :  {tag:"three", value:{x:result[1][0], y:result[1][1]}}) : $$toJS1058613066[result]) };

export const printManyPayloads: (_1:manyPayloads) => void = function _(Arg1: any) { const result = EnumsWithPayloadBS.printManyPayloads((typeof(Arg1) === 'object' ? (Arg1.tag==="one" ? [/* one */5544550, Arg1.value] :  Arg1.tag==="two" ? [/* two */5795212, Arg1.value] :  [/* three */261117022, [Arg1.value.x, Arg1.value.y]]) : $$toRE1058613066[Arg1])); return result };

export const testSimpleVariant: (_1:simpleVariant) => simpleVariant = function _(Arg1: any) { const result = EnumsWithPayloadBS.testSimpleVariant(YY[Arg1]); return XX[result] };

export const testVariantWithPayloads: (_1:variantWithPayloads) => variantWithPayloads = function _(Arg1: any) { const result = EnumsWithPayloadBS.testVariantWithPayloads((typeof(Arg1) === 'object' ? (Arg1.tag==="B" ? [/* 0 */48, Arg1.value] :  Arg1.tag==="C" ? [/* 1 */49, Arg1.value] :  Arg1.tag==="D" ? [/* 2 */50, Arg1.value] :  [/* 3 */51, Arg1.value]) : YY[Arg1])); return (typeof(result) === 'object' ? (result[0]===/* 0 */48 ? {tag:"B", value:result[1]} :  result[0]===/* 1 */49 ? {tag:"C", value:result[1]} :  result[0]===/* 2 */50 ? {tag:"D", value:result[1]} :  {tag:"E", value:result[1]}) : XX[result]) };
