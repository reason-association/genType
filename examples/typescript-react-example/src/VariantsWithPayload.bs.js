// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE


function testWithPayload(x) {
  return x;
}

function printVariantWithPayload(x) {
  if (typeof x === "number") {
    if (x !== 97) {
      if (x >= 803296723) {
        if (x >= 937218926) {
          console.log("printVariantWithPayload: True");
        } else {
          console.log("printVariantWithPayload: Half");
        }
      } else if (x >= 98) {
        console.log("printVariantWithPayload: b");
      } else {
        console.log("printVariantWithPayload: Twenty");
      }
    } else {
      console.log("printVariantWithPayload: a");
    }
    return ;
  }
  var payload = x.value;
  console.log("printVariantWithPayload x:", payload.x, "y:", payload.y);
  
}

function testManyPayloads(x) {
  return x;
}

function printManyPayloads(x) {
  var variant = x.HASH;
  if (variant !== 5795212) {
    if (variant >= 261117022) {
      var payload = x.value;
      console.log("printManyPayloads x:", payload.x, "y:", payload.y);
      return ;
    }
    console.log("printManyPayloads one:", x.value);
    return ;
  }
  var match = x.value;
  console.log("printManyPayloads two:", match[0], match[1]);
  
}

function testSimpleVariant(x) {
  return x;
}

function testVariantWithPayloads(x) {
  return x;
}

function printVariantWithPayloads(x) {
  if (typeof x === "number") {
    console.log("printVariantWithPayloads", "A");
    return ;
  }
  switch (x.TAG | 0) {
    case /* B */0 :
        console.log("printVariantWithPayloads", "B(" + (String(x._0) + ")"));
        return ;
    case /* C */1 :
        console.log("printVariantWithPayloads", "C(" + (String(x._0) + (", " + (String(x._1) + ")"))));
        return ;
    case /* D */2 :
        var match = x._0;
        console.log("printVariantWithPayloads", "D((" + (String(match[0]) + (", " + (String(match[1]) + "))"))));
        return ;
    case /* E */3 :
        console.log("printVariantWithPayloads", "E(" + (String(x._0) + (", " + (x._1 + (", " + (String(x._2) + ")"))))));
        return ;
    
  }
}

function testVariant1Int(x) {
  return x;
}

function testVariant1Object(x) {
  return x;
}

export {
  testWithPayload ,
  printVariantWithPayload ,
  testManyPayloads ,
  printManyPayloads ,
  testSimpleVariant ,
  testVariantWithPayloads ,
  printVariantWithPayloads ,
  testVariant1Int ,
  testVariant1Object ,
  
}
/* No side effect */
