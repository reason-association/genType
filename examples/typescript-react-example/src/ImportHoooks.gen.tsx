/* TypeScript file generated by genType. */

import {make as makeNotChecked} from './hookExample';

import {foo as fooNotChecked} from './hookExample';

// In case of type error, check the type of 'make' in 'ImportHoooks.re' and './hookExample'.
export const makeTypeChecked: (_1:{ readonly person: person; readonly children: React_element }) => React_element = makeNotChecked;

// Export 'make' early to allow circular import from the '.bs.js' file.
export const make: unknown = function (Arg1: any) {
  const result = makeTypeChecked({person:{name:Arg1.person[0], age:Arg1.person[1]}, children:Arg1.children});
  return result
} as (_1:{ readonly person: person; readonly children: React_element }) => React_element;

// In case of type error, check the type of 'foo' in 'ImportHoooks.re' and './hookExample'.
export const fooTypeChecked: (_1:{ readonly person: person }) => string = fooNotChecked;

// Export 'foo' early to allow circular import from the '.bs.js' file.
export const foo: unknown = function (Argperson: any) {
  const result = fooTypeChecked({person:{name:Argperson[0], age:Argperson[1]}});
  return result
} as (_1:{ readonly person: person }) => string;

import {element as React_element} from '../src/shims/ReactShim.shim';

// tslint:disable-next-line:interface-over-type-literal
export type person = { readonly name: string; readonly age: number };
