// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var counter = /* record */[/* contents */Random.$$int(100)];

function progress(param) {
  if (counter[0] < 0) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "TestCyberTruck.re",
            5,
            22
          ]
        ];
  }
  counter[0] = counter[0] - 1 | 0;
  return /* () */0;
}

var Nested = {
  f: progress
};

var Progress = {
  Nested: Nested
};

function justReturn(param) {
  return /* () */0;
}

function alwaysLoop(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
  };
}

function alwaysProgress(_param) {
  while(true) {
    progress(/* () */0);
    _param = /* () */0;
    continue ;
  };
}

function alwaysProgressWrongOrder(param) {
  alwaysProgressWrongOrder(/* () */0);
  return progress(/* () */0);
}

function doNotAlias(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
  };
}

function progressOnBothBranches(x) {
  while(true) {
    progress(/* () */0);
    continue ;
  };
}

function progressOnOneBranch(x) {
  while(true) {
    if (x > 3) {
      progress(/* () */0);
    }
    continue ;
  };
}

function testParametricFunction(x) {
  while(true) {
    if (x > 3) {
      progress(/* () */0);
    }
    continue ;
  };
}

var testParametricFunction2 = testParametricFunction;

function callParseFunction(x, parseFunction) {
  return Curry._1(parseFunction, x);
}

function testCacheHit(x) {
  while(true) {
    if (x > 0) {
      progress(/* () */0);
    }
    continue ;
  };
}

function doNothing(param) {
  return /* () */0;
}

function evalOrderIsNotLeftToRight(x) {
  evalOrderIsNotLeftToRight(x);
  progress(/* () */0);
  return /* () */0;
}

function evalOrderIsNotRightToLeft(x) {
  progress(/* () */0);
  evalOrderIsNotRightToLeft(x);
  return /* () */0;
}

function butFirstArgumentIsAlwaysEvaluated(x) {
  while(true) {
    progress(/* () */0);
    continue ;
  };
}

function butSecondArgumentIsAlwaysEvaluated(x) {
  while(true) {
    progress(/* () */0);
    continue ;
  };
}

var progress2 = progress;

export {
  progress ,
  progress2 ,
  Progress ,
  justReturn ,
  alwaysLoop ,
  alwaysProgress ,
  alwaysProgressWrongOrder ,
  doNotAlias ,
  progressOnBothBranches ,
  progressOnOneBranch ,
  testParametricFunction ,
  testParametricFunction2 ,
  callParseFunction ,
  testCacheHit ,
  doNothing ,
  evalOrderIsNotLeftToRight ,
  evalOrderIsNotRightToLeft ,
  butFirstArgumentIsAlwaysEvaluated ,
  butSecondArgumentIsAlwaysEvaluated ,
  
}
/* counter Not a pure module */
