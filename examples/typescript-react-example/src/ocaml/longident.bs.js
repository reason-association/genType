// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Misc from "./misc.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function flatten(lid) {
  var _accu = /* [] */0;
  var _param = lid;
  while(true) {
    var param = _param;
    var accu = _accu;
    switch (param.tag | 0) {
      case /* Lident */0 :
          return /* :: */[
                  param[0],
                  accu
                ];
      case /* Ldot */1 :
          _param = param[0];
          _accu = /* :: */[
            param[1],
            accu
          ];
          continue ;
      case /* Lapply */2 :
          return Misc.fatal_error("Longident.flat");
      
    }
  };
}

function last(param) {
  switch (param.tag | 0) {
    case /* Lident */0 :
        return param[0];
    case /* Ldot */1 :
        return param[1];
    case /* Lapply */2 :
        return Misc.fatal_error("Longident.last");
    
  }
}

function split_at_dots(s, pos) {
  try {
    var dot = $$String.index_from(s, pos, /* "." */46);
    return /* :: */[
            $$String.sub(s, pos, dot - pos | 0),
            split_at_dots(s, dot + 1 | 0)
          ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* :: */[
              $$String.sub(s, pos, s.length - pos | 0),
              /* [] */0
            ];
    } else {
      throw exn;
    }
  }
}

function unflatten(l) {
  if (l) {
    return List.fold_left((function (p, s) {
                  return /* Ldot */Block.__(1, [
                            p,
                            s
                          ]);
                }), /* Lident */Block.__(0, [l[0]]), l[1]);
  }
  
}

function parse(s) {
  var match = unflatten(split_at_dots(s, 0));
  if (match !== undefined) {
    return match;
  } else {
    return /* Lident */Block.__(0, [""]);
  }
}

export {
  flatten ,
  unflatten ,
  last ,
  parse ,
  
}
/* Misc Not a pure module */
