# The cache key is built up of the following:
# We use a string that we can change to bust the cache
# The string "esy"
# The string for the OS
# The hash of the lock file
steps:
  - task: CacheBeta@1
    inputs:
      key: cache_string1 | esy | $(Agent.OS) | esy.lock/index.json
      path: $(STAGING_DIRECTORY)
      cacheHitVar: CACHE_RESTORED
    displayName: "[Cache] esy packages"

  - bash: "mkdir -p $(ESY_CACHE_INSTALL_PATH)"
    condition: eq(variables.CACHE_RESTORED, 'true')
    displayName: "[Cache][Restore] Create esy cache install directory"

  - bash: cd $(ESY_CACHE_INSTALL_PATH) && tar xf $(STAGING_DIRECTORY_UNIX)/$(ESY_CACHE_INSTALL_TGZ)
    displayName: "[Cache][Restore] Unpack esy cache install .tgz"
    condition: eq(variables.CACHE_RESTORED, 'true')

  - bash: "mkdir -p $(ESY_CACHE_SOURCE_PATH)"
    condition: eq(variables.CACHE_RESTORED, 'true')
    displayName: "[Cache][Restore] Create esy cache source directory"

  - bash: cd $(ESY_CACHE_SOURCE_PATH) && tar xf $(STAGING_DIRECTORY_UNIX)/$(ESY_CACHE_SOURCE_TGZ)
    displayName: "[Cache][Restore] Unpack esy cache source .tgz"
    condition: eq(variables.CACHE_RESTORED, 'true')
