parameters:
  platform: "macOS"
  vmImage: "macOS-10.13"

jobs:
  - job: ${{ parameters.platform }}
    pool:
      vmImage: ${{ parameters.vmImage }}
      demands: node.js
    timeoutInMinutes: 120 # This is mostly for Windows
    variables:
      STAGING_DIRECTORY: $(Build.StagingDirectory)
      ESY_CACHE_INSTALL_TGZ: esy-cache-install-$(Agent.OS).tgz
      ESY_CACHE_SOURCE_TGZ: esy-cache-source-$(Agent.OS).tgz
    steps:
      - bash: |
          # COMPUTE THE ESY INSTALL CACHE LOCATION AHEAD OF TIME
          DESIRED_LEN="86"
          # Note: This will need to change when upgrading esy version
          # that reenables long paths on windows.
          if [ "$AGENT_OS" == "Windows_NT" ]; then
            DESIRED_LEN="33"
          fi
          HOME_ESY3="$HOME/.esy/3"
          HOME_ESY3_LEN=${#HOME_ESY3}
          NUM_UNDERS=$(echo "$(($DESIRED_LEN-$HOME_ESY3_LEN))")
          UNDERS=$(printf "%-${NUM_UNDERS}s" "_")
          UNDERS="${UNDERS// /_}"
          ESY_CACHE_INSTALL_PATH=${HOME_ESY3}${UNDERS}/i
          if [ "$AGENT_OS" == "Windows_NT" ]; then
            ESY_CACHE_INSTALL_PATH=$( cygpath --mixed --absolute "$ESY_CACHE_INSTALL_PATH")
          fi
          echo "ESY_CACHE_INSTALL_PATH: $ESY_CACHE_INSTALL_PATH"
          # This will be exposed as an env var ESY_CACHE_INSTALL_PATH, or an
          # Azure var esy_cache_install_path
          echo "##vso[task.setvariable variable=esy_cache_install_path]$ESY_CACHE_INSTALL_PATH"
        displayName: "Set ESY_CACHE_INSTALL_PATH"
      - bash: |
          ESY_SOURCE_INSTALL_PATH="$HOME/.esy/source"
          echo "ESY_SOURCE_INSTALL_PAT: $ESY_SOURCE_INSTALL_PATH"
          # This will be exposed as an env var ESY_SOURCE_INSTALL_PATH, or an
          # Azure var esy_source_install_path
          echo "##vso[task.setvariable variable=esy_source_install_path]$ESY_SOURCE_INSTALL_PATH"
        displayName: "Set ESY_SOURCE_INSTALL_PATH"
      - bash: |
          if [ "$AGENT_OS" == "Windows_NT" ]; then
            STAGING_DIRECTORY_UNIX=$( cygpath --unix "$STAGING_DIRECTORY")
          else
            STAGING_DIRECTORY_UNIX=$STAGING_DIRECTORY
          fi
          echo "STAGING_DIRECTORY_UNIX: $STAGING_DIRECTORY_UNIX"
          echo "##vso[task.setvariable variable=staging_directory_unix]$STAGING_DIRECTORY_UNIX"
        displayName: "Set STAGING_DIRECTORY_UNIX"
      - bash: env
        displayName: "Print environment"
      - template: utils/use-node.yml
      - script: npm install
        displayName: "npm install"
      - template: utils/cache.yml
      - script: npx esy install
        displayName: "esy install"
      - script: npx esy clean
        displayName: "esy clean"
      - script: npx esy build
        displayName: "esy build"
      - bash: cd $(ESY_CACHE_INSTALL_PATH) && tar czf $(STAGING_DIRECTORY_UNIX)/$(ESY_CACHE_INSTALL_TGZ) .
        displayName: "Create esy cache install .tgz"
        condition: eq(variables.CACHE_RESTORED, 'false')
      - bash: cd $(ESY_SOURCE_INSTALL_PATH) && tar czf $(STAGING_DIRECTORY_UNIX)/$(ESY_CACHE_SOURCE_TGZ) .
        displayName: "Create esy cache source .tgz"
        condition: eq(variables.CACHE_RESTORED, 'false')
      - bash: "echo `find _esy -name GenType.exe`"
        displayName: "Find GenType.exe"
      - bash: "rm examples/GenType.exe && cp `find _esy -name GenType.exe` examples/"
        displayName: "Copy GenType.exe to examples/"
      - bash: npm test
        displayName: "Test command"
      - bash: mkdir _release
        displayName: "Create _release directory"
      - bash: cp `find _esy -name GenType.exe` _release/gentype.exe
        displayName: "Copy gentype.exe to _release"
      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: ${{ parameters.platform }}"
        inputs:
          PathtoPublish: "_release"
          ArtifactName: ${{ parameters.platform }}
